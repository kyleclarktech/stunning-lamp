{
  "model": "qwen2.5-coder:7b",
  "timestamp": "2025-06-22T20:49:14.204351",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person {role: 'CTO'})\nRETURN p.name, p.email, p.department, p.location\nLIMIT 1",
        "generation_time": 9.97161078453064,
        "execution_time": 0.001865386962890625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team {department: 'Engineering'})\nRETURN t.name AS team_name, t.focus AS team_focus LIMIT 100",
        "generation_time": 0.9463992118835449,
        "execution_time": 0.0017399787902832031,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 4
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.name AS employee_name, p.email AS email, p.department AS department, p.role AS role\nLIMIT 10",
        "generation_time": 1.330920934677124,
        "execution_time": 0.001775979995727539,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person {role: 'Engineer', seniority: 'Senior'})<-[:HAS_SKILL]->(s:Skill {name: toLower('Python')})\nWHERE EXISTS((p)-[:HAS_SKILL]->(:Skill {name: toLower('React')}))\nRETURN p.name, p.email, p.department, p.role, p.seniority\nLIMIT 10",
        "generation_time": 2.007840871810913,
        "execution_time": 0.0016608238220214844,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(p)-[:HAS_SKILL]->(:Skill {name: toLower('React')})'",
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy {category: 'security', severity: 'critical'})\nWHERE pol.updated_at >= date(\"2023-01-01\") AND pol.updated_at < date(\"2024-01-01\")\nRETURN pol.name, pol.description, pol.category, pol.severity, pol.updated_at",
        "generation_time": 1.7662084102630615,
        "execution_time": 0.001352548599243164,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)-[r:MEMBER_OF]->(p:Person)\nWITH t.name AS teamName, count(r) AS memberCount\nWHERE memberCount > 10\nRETURN teamName, memberCount\nORDER BY memberCount DESC;",
        "generation_time": 1.4444551467895508,
        "execution_time": 0.0019948482513427734,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nRETURN p.department AS department, count(*) AS employee_count\nORDER BY department;",
        "generation_time": 0.8168356418609619,
        "execution_time": 0.0018448829650878906,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team)\nWITH t.department AS department, COUNT(t) AS team_size\nRETURN department, AVG(team_size) AS avg_team_size\nORDER BY avg_team_size DESC;",
        "generation_time": 1.1181256771087646,
        "execution_time": 0.001798391342163086,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 11
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nRETURN p.location AS Location, p.seniority AS Seniority, count(*) AS Count\nORDER BY Location, Seniority\nLIMIT 100;",
        "generation_time": 1.1355054378509521,
        "execution_time": 0.0045032501220703125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 84
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (dataTeam:Team {name: 'Data'})<-[:MEMBER_OF {is_lead: true}]-(manager:Person)-[:REPORTS_TO*1..2]-(employee:Person)\nRETURN employee.name, employee.email, employee.department, employee.role\nLIMIT 50;",
        "generation_time": 1.5557887554168701,
        "execution_time": 0.002236604690551758,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]->(team:Team)-[m:MEMBER_OF]->(proj:Project {type: 'customer'})\nRETURN pol.name AS policy_name, pol.category AS policy_category, pol.description AS policy_description\nLIMIT 10;",
        "generation_time": 1.514164924621582,
        "execution_time": 0.001695871353149414,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person {role: 'engineer'})<-[:ALLOCATED_TO]->(proj:Project)-[wjc:WORKS_WITH]->(c:Client {industry: 'financial'})\nRETURN p.name, p.email, c.name AS client_name, c.industry, proj.name AS project_name\nLIMIT 10;",
        "generation_time": 1.739917516708374,
        "execution_time": 0.001873016357421875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = (juniorDeveloper:Person {role: 'Junior Developer'})<-[:REPORTS_TO*]-(manager:Person)\nWHERE toLower(manager.role) = 'ceo'\nRETURN path\nLIMIT 1",
        "generation_time": 1.4642210006713867,
        "execution_time": 0.0018849372863769531,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (t:Team {name: 'security'})<-[:MEMBER_OF]-(p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy)\nRETURN p.name AS person_name, pol.name AS policy_name, pol.category AS policy_category, pol.description AS policy_description",
        "generation_time": 1.5682952404022217,
        "execution_time": 0.0018777847290039062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role: 'Collaborator'}]-(t:Team {name: toLower('product')})\nWITH p1, t\nMATCH (p2:Person)-[:MEMBER_OF {role: 'Collaborator'}]-(t)\nWHERE p1 <> p2\nRETURN p1.name AS Product_Collaborator,\n       p2.name AS Engineering_Collaborator,\n       count(DISTINCT t) AS Number_of_Teams_Shared\nLIMIT 10;",
        "generation_time": 2.6725597381591797,
        "execution_time": 0.002402782440185547,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH p = (p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE id(p1) = id(p2) AND length(p) > 1\nRETURN DISTINCT p1.id, p1.name, collect(DISTINCT p2.id) AS indirect_reports\nLIMIT 50;",
        "generation_time": 1.7136287689208984,
        "execution_time": 0.002187490463256836,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person)-[:HAS_SKILL]->(s:Skill)\nWITH t.name AS team_name, collect(s.name) AS skills\nWHERE size([s IN skills WHERE NOT EXISTS((t2:Team)-[:MEMBER_OF]->(p2:Person)-[:HAS_SKILL]->(s))]) > 0\nRETURN team_name, skills\nLIMIT 10;",
        "generation_time": 2.187162399291992,
        "execution_time": 0.0018367767333984375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p1:Person)-[:ALLOCATED_TO]->(proj:Project)\nWITH proj, collect(DISTINCT p1.id) AS team_members\nUNWIND proj.skills AS required_skill\nWHERE NOT exists((p2:Person WHERE p2.id IN team_members)-[:HAS_SKILL]->(required_skill))\nRETURN required_skill.name AS skill_gap",
        "generation_time": 1.8599331378936768,
        "execution_time": 0.0012679100036621094,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 4, column: 2, offset: 139 errCtx: WHERE NOT exists((p2:Person WHERE p2.id IN team_members)-[:HAS_SKILL]->(requi... errCtxOffset: 1",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person {seniority: 'important'})\nRETURN p.name, p.email, p.department, p.role\nLIMIT 10",
        "generation_time": 0.9854638576507568,
        "execution_time": 0.0015575885772705078,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (i:Incident) WHERE i.severity > 1\nRETURN i.id AS incident_id, i.description AS issue_description, i.created_at AS created_on, i.resolved_at AS resolved_on\nLIMIT 10",
        "generation_time": 1.197404384613037,
        "execution_time": 0.0016558170318603516,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name AS PersonName, p.email AS Email, p.department AS Department, p.role AS Role\nLIMIT 10",
        "generation_time": 1.3241181373596191,
        "execution_time": 0.0015006065368652344,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project {status: 'critical'})\nWITH proj, collect(p) AS team_members\nRETURN proj.name AS project_name, size(team_members) AS team_size, size(filter(m in team_members | m.role = 'lead')) AS lead_count",
        "generation_time": 1.631594181060791,
        "execution_time": 0.0013363361358642578,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '|': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, WHERE, ')' or ',' line: 3, column: 98, offset: 205 errCtx: ...AS team_size, size(filter(m in team_members | m.role = 'lead')) AS lead_count errCtxOffset: 47",
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE NOT EXISTS ((p)-[:MEMBER_OF]->(:Group {name: 'Policy Training'}))\nRETURN t.name AS TeamName, t.department AS Department\nLIMIT 10;",
        "generation_time": 1.5616002082824707,
        "execution_time": 0.0016217231750488281,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(p)-[:MEMBER_OF]->(:Group {name: 'Policy Training'})'",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE NOT EXISTS (\n  MATCH (p2:Person)-[:HAS_SKILL]->(s)\n  WHERE p2 <> p1 AND (p2 MEMBERSHIP_OF OR p2 REPORTS_TO) ANYOF (p1 MEMBERSHIP_OF OR p1 REPORTS_TO)\n)\nRETURN s.name AS skill_name, COUNT(DISTINCT p1) AS num_people\nLIMIT 10;",
        "generation_time": 2.3530311584472656,
        "execution_time": 0.0014014244079589844,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 22, offset: 82 errCtx:   MATCH (p2:Person)-[:HAS_SKILL]->(s) errCtxOffset: 21",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\nWHERE lower(p.name) IN ['john', 'jon']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
        "generation_time": 1.5657823085784912,
        "execution_time": 0.0013301372528076172,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {role: 'data team member'}]->(t:Team)\nWITH t\nOPTIONAL MATCH (t)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nRETURN t.name AS team_name, pol.name AS policy_responsible, COUNT(pol) AS policies_responsible\nLIMIT 10;",
        "generation_time": 1.8039875030517578,
        "execution_time": 0.002228260040283203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name AS TeamLeadName, p.email AS TeamLeadEmail, t.name AS TeamName\nLIMIT 10",
        "generation_time": 1.3264000415802002,
        "execution_time": 0.0021333694458007812,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 20,
    "has_results": 5,
    "pattern_matches": 11,
    "avg_generation_time": 1.872702051092077,
    "avg_execution_time": 0.0018727602782072845,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.6666666666666666,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 1.0,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 58.33333333333333
}