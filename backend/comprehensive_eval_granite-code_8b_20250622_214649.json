{
  "model": "granite-code:8b",
  "timestamp": "2025-06-22T21:45:56.770914",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (ctos:Person {role:\"cto\"}) \nRETURN ctos",
        "generation_time": 14.948424816131592,
        "execution_time": 0.0016350746154785156,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team {department: 'engineering'})\nRETURN t",
        "generation_time": 0.6287136077880859,
        "execution_time": 0.00164031982421875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Berlin' OR p.location = 'Berlin' RETURN p.name, p.email, p.role, p.seniority, p.timezone, p.manager_id, p.hire_date LIMIT 10",
        "generation_time": 1.6574163436889648,
        "execution_time": 0.001953601837158203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person {role: 'ENGINEER', seniority: 'SENIOR'})\nWHERE toLower(p.name) CONTAINS 'python' AND toLower(p.name) CONTAINS 'react'\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
        "generation_time": 2.3953278064727783,
        "execution_time": 0.001996755599975586,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.category = 'security' \nAND pol.severity = 'critical'\nAND pol.updated_at >= date('2023-01-01')\nAND pol.updated_at <= date('2023-12-31')\nRETURN pol\nLIMIT 1000",
        "generation_time": 1.9618804454803467,
        "execution_time": 0.001495361328125,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team) WHERE t.name = 'X' AND size((t)-[:MEMBER_OF]-(p:Person)) > 10 RETURN t.id, t.name",
        "generation_time": 1.1931612491607666,
        "execution_time": 0.0014843940734863281,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t)-[:MEMBER_OF]-(p:Person)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.department IS NOT NULL\nWITH p.department, COUNT(p) AS num_people\nRETURN department, num_people",
        "generation_time": 1.0663800239562988,
        "execution_time": 0.0014066696166992188,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "WITH clause projections must be aliased",
        "result_count": 0
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team)\nRETURN AVG(size(t)) AS avg_team_size",
        "generation_time": 0.7710928916931152,
        "execution_time": 0.0013604164123535156,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Type mismatch: expected List, String, or Null but was Node",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority IS NOT NULL AND p.location IS NOT NULL\nWITH p.seniority, p.location\nORDER BY p.seniority\nRETURN p.location as Location, COUNT(p) AS NumberOfEmployees",
        "generation_time": 1.5462157726287842,
        "execution_time": 0.0013544559478759766,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "WITH clause projections must be aliased",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (t:Team {name: 'Data Team'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.id, p.name, p.email\nLIMIT 10",
        "generation_time": 1.315248727798462,
        "execution_time": 0.0016698837280273438,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity) WHERE pol.category = 'Customer' OR pol.name CONTAINS 'Customer' RETURN pol, entity LIMIT 100",
        "generation_time": 1.2535414695739746,
        "execution_time": 0.005589962005615234,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "Match (p:Person) \nWhere p.department = 'Engineering' \nAnd lower(p.name) CONTAINS 'financial' \nReturn p.name, p.email Limit 10",
        "generation_time": 1.2940714359283447,
        "execution_time": 0.001508951187133789,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH (ceo:Person {role:'CEO'})<-[:REPORTS_TO*]-(junior:Person {role:'Junior Developer'}) \nRETURN ceo.name, junior.name;",
        "generation_time": 1.4735267162322998,
        "execution_time": 0.0015583038330078125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:RESPONSIBLE_FOR]-(pol:Policy)\nRETURN pol",
        "generation_time": 1.0889875888824463,
        "execution_time": 0.0017206668853759766,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (t:Team {name: 'Product'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.department = 'Engineering'\nRETURN DISTINCT p.name, p.email\nLIMIT 10",
        "generation_time": 1.4992475509643555,
        "execution_time": 0.001926422119140625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH\n  (personA:Person {name: 'Alice'})-[:REPORTS_TO*1..]->(personB:Person)\nWHERE\n  personA.id = personB.id\nRETURN\n  personA,\n  personB",
        "generation_time": 1.4251916408538818,
        "execution_time": 0.0017125606536865234,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (teamA:Team)\nWHERE NOT EXISTS {\n  MATCH (teamB:Team)\n  WHERE teamA <> teamB\n  AND ALL(member IN teamA.members | NOT member IN teamB.members)\n}\nRETURN teamA.name AS TeamName, teamA.id AS TeamID",
        "generation_time": 1.743001937866211,
        "execution_time": 0.0013391971588134766,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 3, column: 9, offset: 46 errCtx:   MATCH (teamB:Team) errCtxOffset: 8",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project {name: 'X'})\n-[:ALLOCATED_TO]->(t:Team)\nWHERE NOT (t)-[:HAS_SKILL]->(s:Skill)\nRETURN t.name, s.name AS skill_gap",
        "generation_time": 1.503288745880127,
        "execution_time": 0.0014004707336425781,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias 's'",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person) WHERE p.role IN ('Manager', 'Senior Engineer') OR p.seniority > 5 RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
        "generation_time": 1.9300692081451416,
        "execution_time": 0.0015723705291748047,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ',': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or ')' line: 1, column: 44, offset: 43 errCtx: ...(p:Person) WHERE p.role IN ('Manager', 'Senior Engineer') OR p.seniority >... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
        "generation_time": 0.84891676902771,
        "execution_time": 0.0014393329620361328,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": false,
        "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
        "generation_time": 0.8440017700195312,
        "execution_time": 0.0015382766723632812,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": false,
        "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH(p:Project {type: 'critical'})<-[:ALLOCATED_TO]-(m:Person) \nWITH COUNT(DISTINCT m.name) AS BusFactor \nRETURN BusFactor",
        "generation_time": 1.2310552597045898,
        "execution_time": 0.0015926361083984375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (pol:Policy {name: 'required_policy_training'})\nOPTIONAL MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol)\nWHERE t IS NULL\nRETURN t.name, t.department\nLIMIT 10",
        "generation_time": 1.447702169418335,
        "execution_time": 0.0015954971313476562,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p1:Person)\nOPTIONAL MATCH (t:Team)-[:MEMBER_OF]-(p2:Person)\nWHERE p1 <> p2\nWITH p1, COLLECT(DISTINCT p2.name) AS skillsilo\nRETURN p1.name, skillsilo\nLIMIT 10\n\n\nThis query will return the name of the team lead and the names of the individuals who do not have the same skills as the lead. It uses OPTIONAL MATCH to find individuals who are not team leads, and then uses COLLECT to create a list of the skills possessed by each individual. Finally, it returns only those individuals who do not share the same skills as the lead.",
        "generation_time": 3.8976547718048096,
        "execution_time": 0.0013952255249023438,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'T': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 9, column: 1, offset: 218 errCtx: This query will return the name of the team lead and the names of the individ... errCtxOffset: 0",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person) \nWHERE p.name CONTAINS 'John' OR p.name CONTAINS 'Jon' \nRETURN p",
        "generation_time": 1.0015497207641602,
        "execution_time": 0.0060884952545166016,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 36
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name AS person_name, t.name AS team_name, p.email AS person_email\nLIMIT 10",
        "generation_time": 1.554410457611084,
        "execution_time": 0.0016868114471435547,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email\nLIMIT 10",
        "generation_time": 1.2243895530700684,
        "execution_time": 0.0015704631805419922,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 24,
    "execution_success": 15,
    "has_results": 4,
    "pattern_matches": 6,
    "avg_generation_time": 1.9534988315017134,
    "avg_execution_time": 0.0018975028285273799,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.0,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 45.37037037037037
}