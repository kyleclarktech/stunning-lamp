{
  "evaluation_date": "2025-06-22T22:48:48.246364",
  "models_evaluated": [
    "mistral:7b",
    "codeqwen:7b",
    "granite-code:8b",
    "phi4:14b",
    "granite3.3:8b",
    "granite3.3:8b-largectx"
  ],
  "total_test_queries": 27,
  "results": [
    {
      "model": "mistral:7b",
      "timestamp": "2025-06-22T22:37:42.065201",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email",
            "generation_time": 7.754110813140869,
            "execution_time": 0.002773284912109375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.name",
            "generation_time": 0.6916768550872803,
            "execution_time": 0.001993894577026367,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.department, p.role, p.seniority",
            "generation_time": 1.0076186656951904,
            "execution_time": 0.0021452903747558594,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 29
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'engineer' AND p.seniority = 'senior' AND\ntoLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'Python'}) AND\ntoLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'React'})\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date, collect(p.skills.name) ORDER BY p.name ASC LIMIT 10",
            "generation_time": 3.0095863342285156,
            "execution_time": 0.0017642974853515625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 20, offset: 93 errCtx: toLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'Python'}) AND errCtxOffset: 19",
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy {severity: 'critical'})-[:RESPONSIBLE_FOR]-(entity)\nWHERE toDate(pol.updated_at).date() = toDay().date()\nRETURN pol.name, pol.category, pol.description, pol.updated_at",
            "generation_time": 2.3037705421447754,
            "execution_time": 0.0013780593872070312,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 2, column: 34, offset: 103 errCtx: WHERE toDate(pol.updated_at).date() = toDay().date() errCtxOffset: 33",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWHERE count(DISTINCT p) > 10\nRETURN t.name, count(DISTINCT p)",
            "generation_time": 1.1567916870117188,
            "execution_time": 0.0014369487762451172,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Invalid use of aggregating function 'count'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.department <> ''\nWITH DISTINCT p.department AS dep, count(p) as total\nORDER BY total DESC\nRETURN dep, total",
            "generation_time": 1.1516623497009277,
            "execution_time": 0.0021882057189941406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (dep:Department)<-[:MEMBER_OF*1..]-(team:Team)-[r:MEMBER_OF]->(persons:Person)\nWITH dep, count(persons) as count, COUNT(distinct dep) as total_depts\nRETURN avg(count) AS average_team_size, total_depts AS total_departments",
            "generation_time": 1.8189139366149902,
            "execution_time": 0.0027899742126464844,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.location <> '' AND p.seniority IS NOT NULL\nWITH p.location AS location, toLower(p.seniority) AS seniority, COUNT(*) AS count\nGROUP BY location, seniority\nORDER BY location, seniority\nLIMIT 10",
            "generation_time": 1.570383071899414,
            "execution_time": 0.0013666152954101562,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'G': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 1, offset: 150 errCtx: GROUP BY location, seniority errCtxOffset: 0",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (dataTeam:Team {department:'Data'})<-[:REPORTS_TO*1..]-(p:Person)\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
            "generation_time": 1.770749807357788,
            "execution_time": 0.0017125606536865234,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (team:Team)-[:ALLOCATED_TO]->(project:Project)-[:RESPONSIBLE_FOR]->(policy:Policy)\nRETURN DISTINCT policy.name, policy.category, policy.description",
            "generation_time": 1.1759672164916992,
            "execution_time": 0.0019481182098388672,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]->(cl:Client)\nWHERE p.role = 'Engineer' AND toLower(cl.industry) = 'financial sector'\nRETURN DISTINCT p.name, cl.name, cl.annual_value",
            "generation_time": 1.7569994926452637,
            "execution_time": 0.0017621517181396484,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH (juniorDeveloper:Person {role: 'junior developer'}), (ceo:Person {role: 'CEO'})-[:REPORTS_TO]*-(middleManager)-[:REPORTS_TO*]->(juniorDeveloper)\nRETURN middleManager.name, middleManager.email",
            "generation_time": 1.6096842288970947,
            "execution_time": 0.001313924789428711,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '*': expected '-' line: 1, column: 100, offset: 99 errCtx: ...o:Person {role: 'CEO'})-[:REPORTS_TO]*-(middleManager)-[:REPORTS_TO*]->(ju... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (securityTeam:Team {name: 'Security'}), (policy:Policy)\nWHERE securityTeam-[:RESPONSIBLE_FOR]->(policy) OR (securityTeam)-[:RESPONSIBLE_FOR]-(group:Group)-[:RESPONSIBLE_FOR]->(policy)\nRETURN DISTINCT securityTeam, policy",
            "generation_time": 1.764413833618164,
            "execution_time": 0.0021059513092041016,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 21, offset: 82 errCtx: WHERE securityTeam-[:RESPONSIBLE_FOR]->(policy) OR (securityTeam)-[:RESPONSIB... errCtxOffset: 20",
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person {department:'Product'}), (p2:Person {department:'Engineering'})-[:MEMBER_OF]->(team)<-(:Team {name:'X'| ANY(case when 'Collaboration Team' in labels(team) then '' else ' AND labels(team) = \"Collaboration Team\" ' end)| order by size(labels(team)) desc LIMIT 1})-(p3:Person), (p1)-[:ALLOCATED_TO]->(project)<-(:Project {type:'Engineering'}), p4 IN RELATIONSHIP((p1)-[:WORKS_AT]->(office) OR (p2)-[:WORKS_AT]->(office)) WHERE id(p3) <> id(p1) AND id(p3) <> id(p2) RETURN p1, p2, team, project, office",
            "generation_time": 3.984452247619629,
            "execution_time": 0.001445770263671875,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 104, offset: 103 errCtx: ...Engineering'})-[:MEMBER_OF]->(team)<-(:Team {name:'X'| ANY(case when 'Coll... errCtxOffset: 40",
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH p=(p1:Person)-[:REPORTS_TO]->(p2:Person)-<[:REPORTS_TO]-(p3:Person)\nWHERE toLower(p1.email) = toLower(p3.email) AND id(p1) < id(p3)\nRETURN p1.name, p2.name, p3.name, p1.id, p2.id, p3.id",
            "generation_time": 2.0890700817108154,
            "execution_time": 0.0013461112976074219,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '<': expected '-' or '[' line: 1, column: 48, offset: 47 errCtx: MATCH p=(p1:Person)-[:REPORTS_TO]->(p2:Person)-<[:REPORTS_TO]-(p3:Person) errCtxOffset: 47",
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nWITH DISTINCT s1, COLLECT(ID(t1)) as t1_ids\nMATCH (t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s1)\nWHERE ID(t1) <> ALL(t2_ids IN COLLECT(ID(t2))) AND t1 <> t2\nRETURN DISTINCT t1.name as Team, s1.name as Skill",
            "generation_time": 2.867906093597412,
            "execution_time": 0.0014197826385498047,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'t1' not defined",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nOPTIONAL MATCH (p)-[:HAS_SKILL]->(skil:Skill)\nWHERE NOT EXISTS ((p)-[:HAS_SKILL]->(skil))\nWITH DISTINCT skil.name as missing_skill, collect(distinct proj.name) as affected_projects\nRETURN missing_skill, affected_projects",
            "generation_time": 2.361537456512451,
            "execution_time": 0.0017232894897460938,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(p)-[:HAS_SKILL]->(skil)'",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority > 2 OR p.role =~ '(Director|Manager|Team Lead)'\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
            "generation_time": 1.7255005836486816,
            "execution_time": 0.0014100074768066406,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "FalkorDB does not currently support =~",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (g:Group), (p:Policy)\nWHERE p.severity = 'High' AND g.type = 'Department' OR g.location\nWITH collect(distinct g.name) as dept_locations, collect(distinct p.name) as policies\nCALL apoc.refactor.fromDelimitedListToMap(dept_locations, '_') AS dept_map,\n     apoc.refactor.fromDelimitedListToMap(policies, '_') AS policy_map\nUNWIND ranges(0, size(dept_map)) as idx\nWITH idx, dept_map[idx] as dept, policy_map[idx] as policy\nMATCH (p:Person) WHERE p.department = dept OR p.location = dept\nRETURN p.name, dept, collect(policy) AS policies\nORDER BY size((collections.keys(p)) intersect collections.keys(policy_map)) DESC LIMIT 5",
            "generation_time": 5.20122218132019,
            "execution_time": 0.001984119415283203,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'A': expected YIELD, WHERE, ';', call clause or a clause line: 4, column: 64, offset: 243 errCtx: CALL apoc.refactor.fromDelimitedListToMap(dept_locations, '_') AS dept_map, errCtxOffset: 63",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(sk:Skill {name: 'AI'})\nRETURN p.name, p.email",
            "generation_time": 0.9049973487854004,
            "execution_time": 0.0018329620361328125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(pr:Project {status:'critical', priority:1})-[:MEMBER_OF {role: 'developer'}]-(teams)<-[:RESPONSIBLE_FOR]-(policies)\nWHERE NOT ()-[:MEMBER_OF]->(p)\nWITH DISTINCT teams, count(distinct p) as bus_factor\nORDER BY bus_factor ASC\nRETURN teams.name AS Team, bus_factor AS BusFactor",
            "generation_time": 2.4186227321624756,
            "execution_time": 0.0022165775299072266,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nOPTIONAL MATCH (p:Person)-[:MEMBER_OF {role: 'Trainee'}]->(t)\nWITH t, collect(DISTINCT pol) as policies\nWHERE NOT EXISTS ((p)-[:HAS_SKILL {name:'Policy Training'}]) AND size(policies) > 0\nRETURN t.name AS TeamName, polices AS Policies",
            "generation_time": 2.3074235916137695,
            "execution_time": 0.0013592243194580078,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ')': expected '-' line: 4, column: 60, offset: 211 errCtx: ...NOT EXISTS ((p)-[:HAS_SKILL {name:'Policy Training'}]) AND size(policies) > 0 errCtxOffset: 56",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role:'*'}]-(t:Team)<-[:MEMBER_OF | :REPORTS_TO*]-(p2:Person), skill:Skill WHERE count(p1)-count(p2)=1 AND p1-[:HAS_SKILL]->(skill) AND NOT EXISTS((p3:Person)-[:MEMBER_OF]->(t) WHERE p3-[:HAS_SKILL]->(skill)) RETURN DISTINCT p1.name, skill.name, p1.department, t.name",
            "generation_time": 2.698526620864868,
            "execution_time": 0.0014541149139404297,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected '=' line: 1, column: 99, offset: 98 errCtx: ...OF | :REPORTS_TO*]-(p2:Person), skill:Skill WHERE count(p1)-count(p2)=1 AN... errCtxOffset: 40",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
            "generation_time": 1.682776927947998,
            "execution_time": 0.0016121864318847656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Data'\nOPTIONAL MATCH (p)-[:RESPONSIBLE_FOR]->(pol:Policy), (p)-[:MEMBER_OF {role: 'Lead'}]->(team:Team), (p)-[:MEMBER_OF]->(group:Group)\nRETURN DISTINCT pol, team, group, p.name, p.email\nUNION MATCH (p:Person) WHERE p.department = 'Data' AND NOT EXISTS ((p)-[:RESPONSIBLE_FOR]->(pol)) AND NOT EXISTS ((p)-[:MEMBER_OF {role: 'Lead'}]->(team)) AND NOT EXISTS ((p)-[:MEMBER_OF]->(group))\nRETURN DISTINCT p.name, p.email",
            "generation_time": 3.6891353130340576,
            "execution_time": 0.0014994144439697266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "All sub queries in a UNION must have the same column names.",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name",
            "generation_time": 0.9619519710540771,
            "execution_time": 0.004636287689208984,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 87
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 26,
        "execution_success": 12,
        "has_results": 3,
        "pattern_matches": 8,
        "avg_generation_time": 2.2753871105335377,
        "avg_execution_time": 0.0018747824209707756,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.3333333333333333,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 45.370370370370374
    },
    {
      "model": "codeqwen:7b",
      "timestamp": "2025-06-22T22:38:43.554859",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(lead) WHERE lead.role = 'CTO' RETURN p.name, lead.name",
            "generation_time": 8.963774681091309,
            "execution_time": 0.004525661468505859,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person) WHERE t.department = 'engineering' RETURN DISTINCT t",
            "generation_time": 0.925757884979248,
            "execution_time": 0.0016086101531982422,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.city = 'Berlin'\nRETURN p",
            "generation_time": 0.8681819438934326,
            "execution_time": 0.0017566680908203125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'Engineer' AND p.seniority >= 3 AND 'Python' IN p.skills AND 'React' IN p.skills\nRETURN p.name, p.email, p.department, p.role, p.location",
            "generation_time": 1.5504438877105713,
            "execution_time": 0.0016629695892333984,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (p:Policy)\nWHERE p.category = 'Critical Security' AND p.updated_at >= datetime({year: 2022})\nRETURN p.name, p.description, p.severity\nORDER BY p.severity DESC",
            "generation_time": 3.8143985271453857,
            "execution_time": 0.0014939308166503906,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'datetime'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(:Person)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nRETURN t.name",
            "generation_time": 1.0584304332733154,
            "execution_time": 0.0016551017761230469,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nWITH p.department as dept, count(*) as cnt\nRETURN dept, cnt\nORDER BY cnt DESC",
            "generation_time": 0.9894647598266602,
            "execution_time": 0.0018591880798339844,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team)\nRETURN AVG(size((t)<-[:MEMBER_OF])) as Average_team_size\nLIMIT 1",
            "generation_time": 0.9127352237701416,
            "execution_time": 0.0014994144439697266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ')': expected '-' line: 2, column: 34, offset: 48 errCtx: RETURN AVG(size((t)<-[:MEMBER_OF])) as Average_team_size errCtxOffset: 33",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nWITH p.seniority as seniority, p.location as location\nRETURN location, count(DISTINCT seniority) as seniority_count\nORDER BY location",
            "generation_time": 1.1377007961273193,
            "execution_time": 0.002074003219604492,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 17
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)\nWHERE p2.department = 'Data'\nRETURN p1, p2",
            "generation_time": 1.494856834411621,
            "execution_time": 0.0015370845794677734,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWHERE pol.category = 'customer' OR pol.name CONTAINS 'customer'\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description",
            "generation_time": 1.5894930362701416,
            "execution_time": 0.0017466545104980469,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {category: 'engineering'})-[:MEMBER_OF]->(t:Team)<-[:WORKS_AT]-(c:Client {industry: 'financial'})\nRETURN p.name AS engineer, c.name AS client",
            "generation_time": 1.6219916343688965,
            "execution_time": 0.001940011978149414,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH (junior_dev:Person {role: 'Developer', seniority: 'Junior'})-[:REPORTS_TO]->(manager)\n\nWHILE manager IS NOT NULL AND manager.role <> 'CEO'\n\nMERGE (new:Path)-[:CHAIN]->(manager)\n\nSET new.position = size((junior_dev)<-[:REPORTS_TO]-()<-[:MEMBER_OF {is_lead: true}]->()) + 1\n, manager.level = new.position\n\nSET junior_dev.id = toLower(junior_dev.name)\n, manager.id = toLower(manager.name)\n\nSET new.junior_dev = junior_dev.id\n, new.manager = manager.id\n, new.level = manager.level\n\nSET new.path = collect([new.junior_dev, new.manager])\n\nSET new.ceo = (manager.role = 'CEO')\n\nSET new.path = reduce(paths = [], node IN new.path | paths + [node.name])\n\nWHERE new.ceo\nRETURN new.path",
            "generation_time": 5.096910715103149,
            "execution_time": 0.001569986343383789,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'I': expected WHERE line: 3, column: 3, offset: 95 errCtx: WHILE manager IS NOT NULL AND manager.role <> 'CEO' errCtxOffset: 2",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (s:SecurityTeam)-[:RESPONSIBLE_FOR]->(p:Policy)\nRETURN s, p",
            "generation_time": 1.3091309070587158,
            "execution_time": 0.001992940902709961,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (pt:Team {name: 'Product'})-[r:COLLABORATES_WITH]->(et:Team {name: 'Engineering'})\nRETURN pt.name AS Product_Team, et.name AS Engineering_Team, r.description AS Collaboration_Description",
            "generation_time": 3.67160964012146,
            "execution_time": 0.0021407604217529297,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "WITH [1] as start_level\nMATCH (p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE p1 = p2 AND start_level < 10 // Set a limit for levels of reporting\nRETURN p1, p2, p2.name AS reports_to",
            "generation_time": 5.2831151485443115,
            "execution_time": 0.0016162395477294922,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "WITH [t IN ['Team1', 'Team2']] AS teams\nMATCH (p:Person)-[:MEMBER_OF]->(team)\nWHERE team.name IN teams\nAND NOT any(s in p.skills where any(ss in s.skills where ss IN [s for s In COLLECT(t)[0].members | s.skill]))\nRETURN DISTINCT team.name, p.name, p.skills",
            "generation_time": 4.568305492401123,
            "execution_time": 0.0014963150024414062,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'f': expected IN, '=', '.', '(', AND, OR, XOR, NOT, '=~', '<>', '+', '-', '*', '/', '%', '^', CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ']' line: 4, column: 67, offset: 169 errCtx: ...re any(ss in s.skills where ss IN [s for s In COLLECT(t)[0].members | s.sk... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)\nWITH project.id as pid, [p.name, p.email, p.role] as personInfo, collect(DISTINCT toLower(p.skills)) AS teamSkills\n\nMATCH (p2:Person)-[:MEMBER_OF]->(team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy)\nWITH pid, teamSkills, [p2.name, p2.email, p2.role] AS policyInfo, collect(DISTINCT toLower(p2.skills)) AS policySkills\n\nUNWIND policyInfo as info\nWHERE NOT ALL (info[2] in teamSkills OR toLower(info[0]) IN ['lead', 'manager'])\n\nRETURN pid, DISTINCT policySkills - teamSkills",
            "generation_time": 6.423109769821167,
            "execution_time": 0.0017306804656982422,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 8, column: 2, offset: 395 errCtx: WHERE NOT ALL (info[2] in teamSkills OR toLower(info[0]) IN ['lead', 'manager... errCtxOffset: 1",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.hire_date",
            "generation_time": 0.9720227718353271,
            "execution_time": 0.0016880035400390625,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": false,
            "error": "'p' not defined",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy) WHERE p.severity = 'High' OR p.category IN ['Operational', 'Compliance']\nWITH t, collect(DISTINCT p) as policies\n\nCALL {\n   WITH policies\n   UNWIND policies as policy\n   MATCH (policy)<-[:RESPONSIBLE_FOR]-(entity:Person|Group|Project|Client|Office)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN entity\n}\n\nWITH collect(DISTINCT entity) as affected_entities\n\nCALL {\n   WITH affected_entities\n   UNWIND affected_entities as entity\n   MATCH (entity)-[:ALLOCATED_TO]->(p:Project)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN p\n}\n\nWITH collect(DISTINCT p) as affected_projects\n\nCALL {\n   WITH affected_projects, affected_entities\n   UNWIND affected_projects as project\n   MATCH (project)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN project\n}\n\nRETURN DISTINCT affected_entities, affected_projects",
            "generation_time": 6.711174249649048,
            "execution_time": 0.0016357898712158203,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '|': expected a label, '{', a parameter or ')' line: 7, column: 53, offset: 265 errCtx: ...y)<-[:RESPONSIBLE_FOR]-(entity:Person|Group|Project|Client|Office)-[:HAS_S... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name = 'AI' RETURN p.name",
            "generation_time": 0.9054274559020996,
            "execution_time": 0.0015606880187988281,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project) WHERE project.priority = 'Critical' AND project.status IN ['In Progress', 'On Hold']\nWITH count(distinct p) AS total_people, count(DISTINCT project) AS critical_projects\nRETURN total_people / (critical_projects * 0.5) as bus_factor",
            "generation_time": 1.9421939849853516,
            "execution_time": 0.0019073486328125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "Match (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)\nwhere not exists((p)<-[:HAS_SKILL]-(s:Skill))\n\nReturn t, p",
            "generation_time": 1.1209955215454102,
            "execution_time": 0.0015101432800292969,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(p)<-[:HAS_SKILL]-(s:Skill)'",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s), (p2:Person)-[:HAS_SKILL]->(s)\n\nWHERE p1.id <> p2.id AND NOT (p1)-[:MEMBER_OF]->(:Team)<-[:MEMBER_OF]-(:Team WHERE id = p2.id)\n\nRETURN s, collect(DISTINCT p1.name + ': ' + p1.role + ', ' + p2.name + ': ' + p2.role) AS KnowledgeSilo\n\nLIMIT 10",
            "generation_time": 2.6514334678649902,
            "execution_time": 0.0015454292297363281,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected a label, '{', a parameter or ')' line: 3, column: 78, offset: 145 errCtx: ....id AND NOT (p1)-[:MEMBER_OF]->(:Team)<-[:MEMBER_OF]-(:Team WHERE id = p2.id) errCtxOffset: 63",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.name =~ '(?i)(john|jon)'\nRETURN p.id, p.name, p.email",
            "generation_time": 0.9971978664398193,
            "execution_time": 0.0017364025115966797,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "FalkorDB does not currently support =~",
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (t:Team {name: 'Data Team'})\nDETACH DELETE t",
            "generation_time": 3.6627469062805176,
            "execution_time": 0.0018758773803710938,
            "syntax_valid": false,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN t.name, p.name",
            "generation_time": 0.930370569229126,
            "execution_time": 0.004662036895751953,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 87
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 24,
        "execution_success": 16,
        "has_results": 4,
        "pattern_matches": 8,
        "avg_generation_time": 2.6360360781351724,
        "avg_execution_time": 0.0019269607685230396,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.3333333333333333,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 48.148148148148145
    },
    {
      "model": "granite-code:8b",
      "timestamp": "2025-06-22T22:39:54.781176",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person {role: 'cto'}) \nRETURN p.name as CTO_Name",
            "generation_time": 14.60750961303711,
            "execution_time": 0.0015480518341064453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering'\nRETURN t\nLIMIT 100",
            "generation_time": 0.8356878757476807,
            "execution_time": 0.0018393993377685547,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.role, p.department, p.timezone, p.manager_id, p.hire_date LIMIT 10",
            "generation_time": 1.4416587352752686,
            "execution_time": 0.0018608570098876953,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'Engineer' AND toLower(p.name) CONTAINS 'senior' AND (p)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['Python', 'React'] RETURN p.name, p.email, p.department, p.role, p.location, p.timezone",
            "generation_time": 2.032851457595825,
            "execution_time": 0.003693103790283203,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 1, column: 115, offset: 114 errCtx: ...or' AND (p)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['Python', 'React'] RE... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'security' OR pol.name CONTAINS 'critical' AND pol.updated_at >= DATE({year: 2023, month: 1, day: 1}) RETURN pol.id, pol.name, pol.severity",
            "generation_time": 1.680863857269287,
            "execution_time": 0.0014352798461914062,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'DATE'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)\nWHERE t.size > 10\nRETURN t",
            "generation_time": 0.8345489501953125,
            "execution_time": 0.001996755599975586,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person) WHERE p.department = 'X' OR p.location = 'X'\nRETURN COUNT(p), p.department\nLIMIT 10",
            "generation_time": 1.0847313404083252,
            "execution_time": 0.002204418182373047,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team) \nWITH AVG(t.size) AS avg_team_size \nRETURN avg_team_size",
            "generation_time": 0.9796092510223389,
            "execution_time": 0.0015218257904052734,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person) \nWHERE p.location IS NOT NULL\nWITH p.seniority as sen, p.location as loc\nRETURN loc, COUNT(sen) as Count\nORDER BY loc\nLIMIT 1000",
            "generation_time": 1.4258241653442383,
            "execution_time": 0.001888275146484375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 17
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email",
            "generation_time": 1.0979640483856201,
            "execution_time": 0.0016336441040039062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "Match (pol:Policy) \nWhere pol.category = 'Customer' \nOr pol.name CONTAINS 'Customer'",
            "generation_time": 0.908118486404419,
            "execution_time": 0.0012803077697753906,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person {role: 'Engineer'})\nWHERE p.department = 'Engineering' OR p.location = 'San Francisco'\nRETURN DISTINCT(p)",
            "generation_time": 1.0892443656921387,
            "execution_time": 0.0016901493072509766,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH (ceo:Person {name: 'CEO'})\nCALL apoc.path.subgraphAll(ceo, {minLevel: 0, maxLevel: 10}) yield nodes, relationships\nUNWIND nodes as node\nRETURN node.name as name, node.role as role, relationships as connections\nLIMIT 10",
            "generation_time": 2.9102578163146973,
            "execution_time": 0.0014693737030029297,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Procedure `apoc.path.subgraphAll` is not registered",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.department = 'Security' AND pol.category = 'Compliance' OR pol.name CONTAINS 'compliance'\nRETURN p.name, t.name, pol.name, pol.category\nLIMIT 10",
            "generation_time": 1.9205207824707031,
            "execution_time": 0.0012378692626953125,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'pol' not defined",
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (t:Team {name: 'product'})<-[:MEMBER_OF]-(p:Person)\nRETURN p.name, p.email, t.name\nLIMIT 10",
            "generation_time": 1.1534032821655273,
            "execution_time": 0.001392364501953125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO*]-(p2:Person)\nWHERE p1.id = p2.id\nRETURN p1.name, p2.name\nLIMIT 10",
            "generation_time": 2.094247341156006,
            "execution_time": 0.007372617721557617,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t1:Team)\nWHERE NOT ((t1)-[:MEMBER_OF]->(:Person))\nWITH t1\nMATCH (p1:Person)-[:MEMBER_OF]->(t1)\nOPTIONAL MATCH (p2:Person)-[:MEMBER_OF]->(t2)\nWHERE t2.name IS NOT NULL AND t1.name <> t2.name\nRETURN t1.name, collect(DISTINCT p1.name) AS team_members\nORDER BY COUNT(p1) DESC\nLIMIT 5",
            "generation_time": 2.8000681400299072,
            "execution_time": 0.5197651386260986,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 5
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\n-[:ALLOCATED_TO]->(project:Project)\nWHERE NOT (p)-[:HAS_SKILL]->(project:Project)\nRETURN p.name, project.name\nLIMIT 10\n\n\nThis query will return the names of team members who are not allocated to a specific project and do not possess any skills required by that project. The LIMIT clause is used to restrict the number of results returned to 10 for better performance. You can modify the query as needed based on your specific requirements.",
            "generation_time": 3.169482469558716,
            "execution_time": 0.0015540122985839844,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'T': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 8, column: 1, offset: 189 errCtx: This query will return the names of team members who are not allocated to a s... errCtxOffset: 0",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person) WHERE p.is_lead = true OR p.role CONTAINS 'important' RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
            "generation_time": 1.7156460285186768,
            "execution_time": 0.001691579818725586,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'Problematic Areas' OR pol.name CONTAINS 'Problematic Areas' RETURN pol",
            "generation_time": 0.9849104881286621,
            "execution_time": 0.0014865398406982422,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
            "generation_time": 0.8258287906646729,
            "execution_time": 0.0013585090637207031,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": false,
            "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity) WHERE pol.category = 'critical' OR pol.name CONTAINS 'critical' RETURN entity, COUNT(*) AS bus_factor",
            "generation_time": 1.244983196258545,
            "execution_time": 0.0016336441040039062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team) WHERE NOT t: compliant WITH t MATCH (pol:Policy) WHERE pol.category = 'compliance' AND pol.type = 'training' CALL apoc.path.subgraph(t, pol, {minLevel:1, maxLevel:2}) yield nodes, relationships WITH nodes[0] as team, nodes[1] as policy RETURN team, policy",
            "generation_time": 2.0050764083862305,
            "execution_time": 0.0014750957489013672,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Procedure `apoc.path.subgraph` is not registered",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE NOT (p)-[:HAS_SKILL]->(:Skill)\nRETURN p.name, p.email\nLIMIT 10",
            "generation_time": 1.5153083801269531,
            "execution_time": 0.013660430908203125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) CONTAINS 'john' OR toLower(p.name) CONTAINS 'jon' RETURN p.id, p.name, p.email",
            "generation_time": 1.2795541286468506,
            "execution_time": 0.0021271705627441406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 36
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (t:Team {name: 'Data'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name AS Team_Name, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
            "generation_time": 1.9863972663879395,
            "execution_time": 0.0016562938690185547,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)",
            "generation_time": 0.9143843650817871,
            "execution_time": 0.0013043880462646484,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 24,
        "execution_success": 18,
        "has_results": 5,
        "pattern_matches": 9,
        "avg_generation_time": 2.0199511492693865,
        "avg_execution_time": 0.021547299844247324,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.3333333333333333,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 51.85185185185185
    },
    {
      "model": "phi4:14b",
      "timestamp": "2025-06-22T22:40:49.902972",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE toLower(p.role) = 'cto'\nRETURN p.id AS id, p.name AS name, p.email AS email, p.department AS department, p.location AS location LIMIT 1",
            "generation_time": 26.718915700912476,
            "execution_time": 0.002503633499145508,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE toLower(t.department) = 'engineering'\nRETURN t.id AS TeamID, t.name AS TeamName, t.focus AS Focus\nLIMIT 1000",
            "generation_time": 2.0397191047668457,
            "execution_time": 0.0017447471618652344,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 4
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office)\nWHERE toLower(o.city) = 'berlin'\nRETURN p.id AS EmployeeID, p.name AS Name, p.email AS Email, p.department AS Department, p.role AS Role, p.seniority AS Seniority\nLIMIT 100",
            "generation_time": 3.046898603439331,
            "execution_time": 0.0027627944946289062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), \n      (p)-[:HAS_SKILL]->(s2:Skill)\nWHERE p.role = 'Engineer' \n  AND p.seniority = 'Senior'\n  AND toLower(s1.name) = 'python'\n  AND toLower(s2.name) = 'react'\nRETURN DISTINCT p.id, p.name, p.email, p.department, p.location\nLIMIT 100",
            "generation_time": 4.154339551925659,
            "execution_time": 0.0017161369323730469,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (policy:Policy)\nWHERE policy.category = 'security' \n  AND toLower(policy.name) CONTAINS 'critical'\n  AND date(policy.updated_at) >= date('2023-01-01')\nRETURN policy.id, policy.name, policy.description, policy.severity, policy.updated_at\nLIMIT 100",
            "generation_time": 3.006998300552368,
            "execution_time": 0.0017943382263183594,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWITH t, COUNT(p) AS memberCount\nWHERE memberCount > 10\nRETURN t.name AS TeamName, t.department AS Department, memberCount\nORDER BY memberCount DESC",
            "generation_time": 3.3858699798583984,
            "execution_time": 0.002464771270751953,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 26
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nRETURN p.department AS Department, COUNT(p) AS NumberOfPeople\nWHERE toLower(p.department) <> ''\nGROUP BY toLower(p.department)\nORDER BY NumberOfPeople DESC",
            "generation_time": 2.0660054683685303,
            "execution_time": 0.0013744831085205078,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 2, offset: 80 errCtx: WHERE toLower(p.department) <> '' errCtxOffset: 1",
            "result_count": 0
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWITH t.department AS department, COUNT(p) AS teamSize\nRETURN AVG(teamSize) AS averageTeamSize",
            "generation_time": 2.0351781845092773,
            "execution_time": 0.002056121826171875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nRETURN p.location AS Location, p.seniority AS Seniority, COUNT(p) AS Count\nWHERE toLower(p.location) <> ''\nGROUP BY p.location, p.seniority\nORDER BY p.location ASC, p.seniority ASC",
            "generation_time": 2.746821165084839,
            "execution_time": 0.0018291473388671875,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 2, offset: 93 errCtx: WHERE toLower(p.location) <> '' errCtxOffset: 1",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (reporter:Person)-[:REPORTS_TO]->(manager:Person),\n      (manager)-[:MEMBER_OF {role: 'member'}]-(dataTeam:Team {name: \"Data\"})\nRETURN reporter.id, reporter.name, reporter.email, manager.id AS manager_id, manager.name AS manager_name\nLIMIT 1000",
            "generation_time": 3.1599862575531006,
            "execution_time": 0.0017583370208740234,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy),\n      (person:Person)-[:MEMBER_OF {role: 'member'}]->(team),\n      (person)-[:ALLOCATED_TO]->(project:Project)\nRETURN DISTINCT policy.id, policy.name, policy.category, policy.description\nLIMIT 100",
            "generation_time": 3.1106362342834473,
            "execution_time": 0.0028259754180908203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:ALLOCS_PROJECT]-(c:Client {industry: 'financial'})\nWHERE p.role = 'engineer'\nRETURN DISTINCT p.name, p.email, p.department, c.name AS client_name, proj.name AS project_name\nLIMIT 100",
            "generation_time": 3.073709011077881,
            "execution_time": 0.0019073486328125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path=(junior:Person {seniority: 'Junior Developer'})-[:REPORTS_TO*]->(ceo:Person {role: 'CEO'})\nRETURN path\nLIMIT 100",
            "generation_time": 3.586229085922241,
            "execution_time": 0.0020661354064941406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:RESPONSIBLE_FOR]-(p:Policy)\nRETURN t.name AS TeamName, p.name AS PolicyName, p.description AS PolicyDescription, p.category AS Category, p.severity AS Severity\nLIMIT 100",
            "generation_time": 2.6780478954315186,
            "execution_time": 0.0016477108001708984,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (prodTeam:Team {name: 'Product'}),\n      (engPerson:Person)-[:MEMBER_OF]->(engTeam:Team {name: 'Engineering'}),\n      (prodMember:Person)-[:MEMBER_OF]-(prodTeam),\n      (prodMember)-[:ALLOCATED_TO|:ON_CALL|:REPORTS_TO]->(proj:Project)<-[:ALLOCATED_TO|:ON_CALL|:REPORTS_TO]-(engPerson)\nRETURN prodMember.name AS Product_Member, engPerson.name AS Engineering_Member, proj.name AS Project\nLIMIT 10",
            "generation_time": 4.948955297470093,
            "execution_time": 0.0017364025115966797,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH path=(p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE p1.id = p2.id AND LENGTH(path) > 1\nRETURN DISTINCT p1.id AS person_id, \n               COLLECT(p1.name) AS names,\n               COLLECT(p1.email) AS emails,\n               COLLECT(length(path)) AS path_lengths\nLIMIT 100",
            "generation_time": 4.307037830352783,
            "execution_time": 0.002048015594482422,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-[:HAS_SKILL]-(p2:Person),\n      (p1)-[:MEMBER_OF]->(t1:Team),\n      (p2)-[:MEMBER_OF]->(t2:Team)\nWHERE p1 <> p2 AND t1 <> t2\nWITH s, COLLECT(DISTINCT t1) AS teams_with_s1, COLLECT(DISTINCT t2) AS teams_with_s2\nWHERE SIZE(teams_with_s2) = 1\nWITH s.name AS skill_name, teams_with_s1[0] AS unique_team\nRETURN DISTINCT unique_team.id AS team_id, unique_team.name AS team_name, unique_team.department AS department, COLLECT(skill_name) AS unique_skills\nLIMIT 100",
            "generation_time": 6.768206357955933,
            "execution_time": 1.0024664402008057,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Query timed out",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)<-[:ALLOCATED_TO]-(person:Person)-[:HAS_SKILL]->(ps:Skill),\n      (p)-[:REQUIRES {skill: id}]->(reqs:Skill)\nWHERE NOT (person)-[:HAS_SKILL]->(reqs)\nRETURN p.name AS ProjectName, collect(DISTINCT reqs.name) AS RequiredSkills, \n       collect(DISTINCT ps.name) AS PossessedSkills",
            "generation_time": 3.991192102432251,
            "execution_time": 0.001711130142211914,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'id' not defined",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority IN ['senior', 'executive'] OR \n      EXISTS((t:Team)<-[:MEMBER_OF {is_lead: true}]-(p)) OR \n      EXISTS((g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'high')\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.manager_id\nORDER BY p.seniority DESC, p.role\nLIMIT 100",
            "generation_time": 4.7322306632995605,
            "execution_time": 0.0013232231140136719,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected '<', '-', '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 4, column: 57, offset: 183 errCtx: ...XISTS((g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'high') errCtxOffset: 52",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (inc:Incident {severity: 'high', status: 'open'})\nRETURN inc.id AS IncidentID, inc.description AS Description, inc.affected_regions AS AffectedRegions, inc.created_at AS CreatedAt\nORDER BY inc.created_at ASC\nLIMIT 10",
            "generation_time": 10.388505458831787,
            "execution_time": 0.001697540283203125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name AS Name, p.email AS Email, p.department AS Department, \n       COLLECT(DISTINCT s.name) AS Skills\nLIMIT 5",
            "generation_time": 4.644266843795776,
            "execution_time": 0.002398252487182617,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project {priority: 'Critical'})\nWITH proj, p, COUNT(p) AS totalPeopleInProj\nWHERE NOT EXISTS {\n    MATCH (other:Person)-[r:ALLOCATED_TO]->(proj)\n    WHERE other <> p AND r IS NOT NULL\n}\nRETURN proj.name AS ProjectName, \n       totalPeopleInProj - 1 AS BusFactor, \n       [p.name | ' '] AS CriticalPersons\nLIMIT 10",
            "generation_time": 5.957176446914673,
            "execution_time": 0.0014896392822265625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 11, offset: 145 errCtx:     MATCH (other:Person)-[r:ALLOCATED_TO]->(proj) errCtxOffset: 10",
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t, p\nWHERE NOT EXISTS {\n    MATCH (mem:Person)-[:MEMBER_OF]-(t)\n    WHERE mem.id IN (\n        SELECT m2.id FROM (\n            MATCH (m1:Person)-[:HAS_SKILL]->(:Skill)<-[:RESPONSIBLE_FOR]-(p)\n            RETURN DISTINCT m1.id\n        ) AS m2\n    )\n}\nRETURN t.name AS TeamName, collect(p.name) AS ResponsiblePolicies\nLIMIT 10",
            "generation_time": 4.814473628997803,
            "execution_time": 0.0014607906341552734,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 11, offset: 85 errCtx:     MATCH (mem:Person)-[:MEMBER_OF]-(t) errCtxOffset: 10",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n      (p1)-[:HAS_SKILL]->(s:Skill)\nWHERE p1 <> p2 \n  AND NOT EXISTS { MATCH (p2)-[:HAS_SKILL]->(s) }\nRETURN t.name AS Team, s.name AS UniqueSkill, COLLECT(DISTINCT p1.name) AS PersonsWithUniqueSkill\nORDER BY t.name, s.name",
            "generation_time": 4.434514045715332,
            "execution_time": 0.0014793872833251953,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 26, offset: 144 errCtx:   AND NOT EXISTS { MATCH (p2)-[:HAS_SKILL]->(s) } errCtxOffset: 25",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\nWHERE toLower(p.name) = 'john' OR toLower(p.name) = 'jon'\nRETURN p.id AS person_id, p.name AS full_name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
            "generation_time": 4.100346803665161,
            "execution_time": 0.0019142627716064453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (person:Person)-[:MEMBER_OF]->(team:Team {name: 'Data'})\nWITH person, team\nOPTIONAL MATCH (team)<-[:RESPONSIBLE_FOR]-(policy:Policy)\nWITH policy, COUNT(DISTINCT person) AS teamSize, team\nWHERE NOT EXISTS((team)<-[:MEMBER_OF]-(:Person))\nRETURN \n    CASE WHEN teamSize = 0 THEN 'Team is already empty'\n         ELSE 'All members of the Data team are gone' END AS Status,\n    COLLECT(policy.id) AS UnassignedPolicies",
            "generation_time": 6.796862840652466,
            "execution_time": 0.0018420219421386719,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.name AS TeamLeadName, t.name AS TeamName\nLIMIT 100",
            "generation_time": 2.89151668548584,
            "execution_time": 0.0027434825897216797,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 87
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 18,
        "has_results": 4,
        "pattern_matches": 7,
        "avg_generation_time": 4.947579242565014,
        "avg_execution_time": 0.038991195184213144,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 51.85185185185185
    },
    {
      "model": "granite3.3:8b",
      "timestamp": "2025-06-22T22:43:04.541732",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role =~ /cto/ RETURN p.name, p.email, p.department, p.location, p.seniority, p.manager_id, p.hire_date LIMIT 1",
            "generation_time": 15.09735894203186,
            "execution_time": 0.0013580322265625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '/': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 1, column: 34, offset: 33 errCtx: MATCH (p:Person) WHERE p.role =~ /cto/ RETURN p.name, p.email, p.department, ... errCtxOffset: 33",
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWHERE toLower(p.department) CONTAINS 'engineering'\nRETURN DISTINCT t.name AS Team, t.id AS TeamID\nLIMIT 100",
            "generation_time": 1.4824650287628174,
            "execution_time": 0.0020995140075683594,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 12
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin' RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100",
            "generation_time": 2.0552725791931152,
            "execution_time": 0.0026733875274658203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10",
            "generation_time": 2.7279908657073975,
            "execution_time": 0.001984834671020508,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.severity = 'critical' AND toLower(pol.category) CONTAINS 'security' \nAND pol.updated_at >= date('now','-1year')\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.severity, pol.updated_at\nLIMIT 100",
            "generation_time": 2.0817251205444336,
            "execution_time": 0.0013837814331054688,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nRETURN t.name, count(distinct (:Person)-[:MEMBER_OF]->(t))\nLIMIT 100",
            "generation_time": 1.462524652481079,
            "execution_time": 0.0013785362243652344,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.department as Department, count(p) as Number_of_People\n  LIMIT 10",
            "generation_time": 0.9805805683135986,
            "execution_time": 0.0016603469848632812,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (d:Department)\n  OPTIONAL MATCH (t:Team)-[:MEMBER_OF]->(p:Person)\n  WITH d, size(collect(t)) AS teamSize\n  RETURN d.name AS Department, avg(teamSize) AS AverageTeamSize LIMIT 10",
            "generation_time": 1.5908312797546387,
            "execution_time": 0.0023293495178222656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.location AS Location, collect(p.seniority) AS SeniorityLevels\n  ORDER BY Location\n  LIMIT 20",
            "generation_time": 1.1326911449432373,
            "execution_time": 0.004380226135253906,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 17
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person {department: 'Data'}))\n  RETURN reporter.id, reporter.name, reporter.email, reporter.role, reporter.seniority, reporter.location, reporter.timezone, reporter.manager_id, reporter.hire_date\n  LIMIT 100",
            "generation_time": 2.307985305786133,
            "execution_time": 0.001646280288696289,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected a label line: 1, column: 43, offset: 42 errCtx: MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person {department: 'Data'})) errCtxOffset: 42",
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)<-[:ALLOCATED_TO]-(p2:Person)\n  WHERE p2.role = 'customer project'\n  RETURN DISTINCT p.id, p.name, p.category, p.description, p.severity\n  LIMIT 10",
            "generation_time": 1.8836252689361572,
            "execution_time": 0.0016863346099853516,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:HAS_SKILL]->(s:Skill {name: 'engineering'})<-[:WORKS_AT]-(:Office)-[:SERVES]->(c:Client {industry: 'financial'})\nRETURN DISTINCT e.id, e.name, e.email, e.department, e.role, e.seniority, e.location, e.timezone, e.manager_id, e.hire_date \nLIMIT 100",
            "generation_time": 2.5857255458831787,
            "execution_time": 0.0021457672119140625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'Junior Developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDevelopers, collect(ceo) AS ceoNode\nUNWIND juniorDevelopers AS dev\nWITH dev, shortestPath(path) AS reportingChain\nRETURN * ORDER BY length(reportingChain) DESC\nLIMIT 10",
            "generation_time": 2.7442219257354736,
            "execution_time": 0.0014519691467285156,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (s:Team {name: 'security'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)-[:RESPONSIBLE_FOR*]->(pol:Policy)\nRETURN p.name AS member, pol.name AS policy, type(pol)\nLIMIT 100",
            "generation_time": 1.7771821022033691,
            "execution_time": 0.0023288726806640625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role: 'Product Team'}]->(pt:Team),\n      (p2:Person)-[:MEMBER_OF {role: 'Engineering'}]->(et:Team),\n      PATH(p1)-[r]-(*)-[:WORKS_AT|ALLOCATED_TO|-{relations}]->(p2)\nWHERE toLower(pt.name) CONTAINS 'product' AND toLower(et.name) CONTAINS 'engineering'\nRETURN p1, et, r.type \nLIMIT 50",
            "generation_time": 4.51838231086731,
            "execution_time": 0.0015513896942138672,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '=' line: 3, column: 11, offset: 141 errCtx:       PATH(p1)-[r]-(*)-[:WORKS_AT|ALLOCATED_TO|-{relations}]->(p2) errCtxOffset: 10",
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(m:Person)<-[:REPORTS_TO]-(p2:Person)\nWHERE p1.id <> p2.id AND p1.name = toLower(p2.name)\nRETURN DISTINCT p1, m",
            "generation_time": 17.765511512756348,
            "execution_time": 0.007997274398803711,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "WITH 'Team' as teamType\nMATCH (t:Team)-[:MEMBER_OF]->(p:Person)\nWHERE EXISTS(p.skills) AND NOT EXISTS(t.sharedSkills)\nWITH collect(DISTINCT t.name) AS uniqueTeams, collect(DISTINCT p.skills) AS uniqueSkills\nMATCH ()-[r:HAS_SKILL]->(s:Skill)\nWITH uniqueTeams, uniqueSkills, s\nOPTIONAL MATCH (t2:Team)-[:MEMBER_OF]->(p2:Person)\nWHERE EXISTS(s IN p2.skills) AND NOT EXISTS(uniqueSkills CONTAINS s)\nWITH uniqueTeams, filter(x IN uniqueSkills WHERE NOT EXISTS(y IN uniqueTeams WHERE y->AT(r).name = x)) AS exclusiveSkills\nRETURN uniqueTeams LIMIT 10",
            "generation_time": 19.059290647506714,
            "execution_time": 0.0018892288208007812,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 9, column: 78, offset: 472 errCtx: ...ls WHERE NOT EXISTS(y IN uniqueTeams WHERE y->AT(r).name = x)) AS exclusiv... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<-[:MEMBER_OF {is_lead: false}]-(team:Team)\n  WITH team, collect(p) as projects\n  MATCH (teamMember)-[:HAS_SKILL]->(requiredSkill:Skill)\n  OPTIONAL MATCH (projects)-[:REQUIRES]->(projectSkill:Skill)\n  WHERE requiredSkill.name = projectSkill.name\n  WITH team, teamMember, requiredSkill, projects, COLLECT(projectSkill.name) AS possessedSkills\n  WHERE NOT requiredSkill.name IN possessedSkills\n  RETURN team.name AS Team, teamMember.name AS Member, requiredSkill.name AS RequiredSkill, COUNT(DISTINCT projectSkill.name) AS ProjectCount\nLIMIT 10",
            "generation_time": 18.75033926963806,
            "execution_time": 0.001766204833984375,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'projectSkill' not defined",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Lead', 'Senior']\n    AND p.seniority > 3\n    WITH p.id AS person_id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone\n    LIMIT 10\nRETURN person_id, name, email, department, role, seniority, location, timezone",
            "generation_time": 17.77952480316162,
            "execution_time": 0.001834869384765625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "WITH clause projections must be aliased",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (i:Incident) WHERE i.severity = 'High' OR i.status = 'Unresolved'\n    WITH i.id AS incident_id, i.description, i.affected_regions, i.created_at, i.resolved_at\n    ORDER BY i.severity DESC, i.created_at ASC\n    LIMIT 10\n    RETURN incident_id, description, affected_regions, created_at, resolved_at",
            "generation_time": 18.21115803718567,
            "execution_time": 0.0017092227935791016,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "WITH clause projections must be aliased",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person) WHERE p.skill CONTAINS 'ai' OR EXISTS(s IN p.skills WHERE s.name CONTAINS 'ai') \n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name AS Expert, p.email, p.department, p.location",
            "generation_time": 16.189136505126953,
            "execution_time": 0.001476287841796875,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 1, column: 70, offset: 69 errCtx: ...RE p.skill CONTAINS 'ai' OR EXISTS(s IN p.skills WHERE s.name CONTAINS 'ai')  errCtxOffset: 52",
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(person)<-[:REPORTS_TO]-(manager)-[:REPORTS_TO]->(ceo)\n  WHERE p.priority = 'critical' AND person.seniority IN ['junior', 'mid']\n  WITH person, count(distinct manager) as total_reportsto, count(distinct ceo) as total_above\n  WHERE total_reportsto + total_above <= 2\n  RETURN person.name AS Person, count(person) AS BusFactorLimit",
            "generation_time": 18.29763174057007,
            "execution_time": 0.001980304718017578,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)\n  WHERE NOT EXISTS(t<-[:RESPONSIBLE_FOR]-(:Policy))\n  WITH t\n  MATCH (p:Person)-[:MEMBER_OF]->(t)\n  WHERE p.role = 'staff' OR p.role = 'intern'\n  RETURN t.name AS Team, count(p) AS UntrainedCount, collect(p.name) AS UntrainedMembers\nLIMIT 100",
            "generation_time": 17.763981819152832,
            "execution_time": 0.0016908645629882812,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 24, offset: 38 errCtx:   WHERE NOT EXISTS(t<-[:RESPONSIBLE_FOR]-(:Policy)) errCtxOffset: 23",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "WITH 'Identify knowledge silos: skills possessed by only one person in a team' AS explanation\n  UNWIND range(1, 10) AS attempt\n  WITH explanation, attempt\n  OPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(team)<-(:Team)-[:HAS_SKILL]->(skill)\n  WITH p, collect(skill.name) AS possessedSkills, team.name AS teamName\n  WHERE size(possessedSkills) = 1 AND NOT EXISTS((q:Person)-[:MEMBER_OF]->(team) AND skill IN collect(sk2:Skill))\n  RETURN p.name AS Person, teamName AS Team, possessedSkills AS Skills LIMIT 10",
            "generation_time": 18.804001569747925,
            "execution_time": 0.0021963119506835938,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 4, column: 51, offset: 205 errCtx:   OPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(team)<-(:Team)-[:HAS_SKILL]->(skill) errCtxOffset: 50",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100",
            "generation_time": 17.292370319366455,
            "execution_time": 0.00494837760925293,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p1:Person)\nWHERE p1.role CONTAINS 'data' AND p1.department CONTAINS 'team'\nWITH collect(p1) AS teamMembers\nUNWIND teamMembers AS teamMember\nMATCH (manager:Person)-[:REPORTS_TO]->(teamMember)\nWITH manager\nOPTIONAL MATCH (manager)-[:MEMBER_OF {is_lead: true}]->(dataTeam:Team)\nWITH manager, dataTeam\nMATCH (policy:Policy)-[:RESPONSIBLE_FOR]->(dataTeam)\nRETURN manager.name AS Manager, dataTeam.name AS Team, policy.name AS Policies\nLIMIT 10",
            "generation_time": 17.622703552246094,
            "execution_time": 0.0025968551635742188,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'lead' AND EXISTS(p[:MEMBER_OF {is_lead: true}]->(team:Team))\n  RETURN p.id, p.name AS TeamLead, p.email, p.department, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100",
            "generation_time": 17.59084153175354,
            "execution_time": 0.0018808841705322266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name, an identifier or '..' line: 2, column: 38, offset: 54 errCtx:   WHERE p.role = 'lead' AND EXISTS(p[:MEMBER_OF {is_lead: true}]->(team:Team)) errCtxOffset: 37",
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 13,
        "has_results": 3,
        "pattern_matches": 10,
        "avg_generation_time": 9.613150146272448,
        "avg_execution_time": 0.0022972336521855105,
        "category_scores": {
          "simple_lookups": 0.3333333333333333,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.0,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 49.07407407407407
    },
    {
      "model": "granite3.3:8b-largectx",
      "timestamp": "2025-06-22T22:47:24.160102",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email, p.department, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 1",
            "generation_time": 8.907916069030762,
            "execution_time": 0.0020520687103271484,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\n  WHERE toLower(p.department) CONTAINS 'engineering'\n  RETURN DISTINCT t.name AS Team, t.id AS ID ORDER BY t.name",
            "generation_time": 2.198289155960083,
            "execution_time": 0.004427194595336914,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 12
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.timezone, p.manager_id, p.hire_date LIMIT 100",
            "generation_time": 2.6559648513793945,
            "execution_time": 0.0017306804656982422,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10",
            "generation_time": 4.587296724319458,
            "execution_time": 0.0017549991607666016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy) \nWHERE pol.category CONTAINS 'security' AND toLower(pol.severity) = 'critical' \nAND pol.updated_at >= date('now', '-1year')\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.updated_at\nLIMIT 100",
            "generation_time": 2.7132346630096436,
            "execution_time": 0.0017147064208984375,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF]->(t)\nWITH t, size((m)) as memberCount\nWHERE memberCount > 10\nRETURN DISTINCT t.name AS Team, memberCount ORDER BY memberCount DESC LIMIT 10",
            "generation_time": 1.934621810913086,
            "execution_time": 0.0017330646514892578,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Type mismatch: expected List, String, or Null but was Node",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.department as Department, count(p) as Number_of_People\n  LIMIT 100",
            "generation_time": 1.117795705795288,
            "execution_time": 0.0015401840209960938,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (d:Department)-[:HAS_TEAM]->(t:Team)\n  RETURN COUNT(t) AS team_count, AVG(size(FILTER x IN relationships(d) WHERE TYPE(x) = 'MEMBER_OF' FILTER isBoolean(x.is_lead) = false)) AS average_team_size LIMIT 1",
            "generation_time": 2.0678579807281494,
            "execution_time": 0.0013804435729980469,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ' ': expected XOR line: 2, column: 51, offset: 93 errCtx: ...T(t) AS team_count, AVG(size(FILTER x IN relationships(d) WHERE TYPE(x) = ... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\n  OPTIONAL MATCH (p)-[:WORKS_AT]->(o:Office)\n  WITH p, toLower(o.city), p.seniority AS seniorityLevel\n  BY city, seniorityLevel\n  RETURN city AS location, collect(seniorityLevel) AS distribution ORDER BY location",
            "generation_time": 2.6903886795043945,
            "execution_time": 0.0012049674987792969,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'B': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 3, offset: 121 errCtx:   BY city, seniorityLevel errCtxOffset: 2",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (d:Person)-[:REPORTS_TO]->(p:Person)<-[:MEMBER_OF {role:'data', is_lead:true}]-(:Team)\nRETURN d.id, d.name AS person_name, p.id AS reporter_id, p.name AS reporter_name\nLIMIT 100",
            "generation_time": 2.0732221603393555,
            "execution_time": 0.0016858577728271484,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)<-(:Person)-[:ALLOCATED_TO]->(p:Project)\nWHERE p.type CONTAINS 'customer'\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.severity\nLIMIT 10",
            "generation_time": 2.083814859390259,
            "execution_time": 0.0012962818145751953,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 50, offset: 49 errCtx: ...eam)-[:RESPONSIBLE_FOR]->(pol:Policy)<-(:Person)-[:ALLOCATED_TO]->(p:Project) errCtxOffset: 42",
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:HAS_VISA]->(v:Visa)<-[:WORKS_AT]-(o:Office)<-[:ALLOCATED_TO]-(p:Project)\n  WHERE toLower(o.industry) CONTAINS 'financial'\n  RETURN e.name, e.email, e.department, e.role, e.seniority, o.city, o.country, p.name AS project_name LIMIT 10",
            "generation_time": 2.7236030101776123,
            "execution_time": 0.001972198486328125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nRETURN path\nLIMIT 100",
            "generation_time": 1.6877021789550781,
            "execution_time": 0.0011773109436035156,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (secTeam:Team {name: 'security'})<-[:MEMBER_OF {is_lead: true}]-(secMember:Person)\n      MATCH (secMember)-[:HAS_SKILL]->(skill:Skill)\n      MATCH (secMember)<-[:RESPONSIBLE_FOR]-(compliancePolicy:Policy)\n      RETURN secTeam.name AS TeamName,\n             collect(distinct secMember.name) AS Members,\n             collect(distinct skill.name) AS Skills,\n             collect(distinct compliancePolicy.name) AS Policies\nLIMIT 10",
            "generation_time": 3.1569509506225586,
            "execution_time": 0.0016350746154785156,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role: 'Product'}]->(productTeam:Team)\n      -(eEngineering:Person)-[:MEMBER_OF {role: 'Engineering'}]->(engineeringTeam:Team)\n      WHERE productTeam.name = 'Product Team' AND engineeringTeam.name = 'Engineering Team'\n      RETURN pProduct, eEngineering, productTeam.name AS Product_Team, engineeringTeam.name AS Engineering_Team",
            "generation_time": 2.8036720752716064,
            "execution_time": 0.0013043880462646484,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 8, offset: 82 errCtx:       -(eEngineering:Person)-[:MEMBER_OF {role: 'Engineering'}]->(engineering... errCtxOffset: 7",
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)<-[:REPORTS_TO]-(p1)\nWHERE p1.id <> p2.id AND toLower(p1.name) <> toLower(p2.name)\nRETURN p1, p2",
            "generation_time": 1.9172356128692627,
            "execution_time": 0.05326366424560547,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 480
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "WITH 'Team' as teamType\n  MATCH (t:Team)\n  WHERE NOT EXISTS(\n    CASE\n      WHEN size((t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)) = 1 THEN TRUE\n      ELSE FALSE\n    END\n  )\n  WITH collect({name: t.name, uniqueSkills: apoc.coll.toSet(\n          [sk IN (t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)]\n           | toLower(s.name)])\n    }) AS teamsWithUniqueSkills\n  UNWIND teamsWithUniqueSkills AS teamData\n  WITH teamData.name AS teamName, teamData.uniqueSkills AS uniqueSkills\n  WHERE size(uniqueSkills) = apoc.coll.cardinality(teamsWithUniqueSkills) - apoc.coll.count(teamsWithUniqueSkills)\n  RETURN DISTINCT teamName ORDER BY teamName LIMIT 10",
            "generation_time": 6.164120674133301,
            "execution_time": 0.0019683837890625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '-': expected ']' line: 5, column: 49, offset: 118 errCtx: ...size((t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)) ... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<-[:MEMBER_OF]-(team:Team)\nWITH team, p\nOPTIONAL MATCH (teamMember)-[:HAS_SKILL]->(requiredSkill:Skill)\nWITH team, p, collect(requiredSkill.name) AS skillsNeeded\nMATCH (person:Person)-[:ALLOCATED_TO]->(project)<-[:MEMBER_OF]-(team)\nOPTIONAL MATCH (person)-[:HAS_SKILL]->(possessedSkill:Skill)\nWITH team, p, skillsNeeded, collect(distinct possessedSkill.name) AS skillsPossessed\nWHERE NOT skillsNeeded <:> [] AND NOT skillsNeeded <= skillsPossessed\nRETURN team.name AS Team, p.name AS Project, skillsNeeded AS SkillsNeeded, skillsPossessed AS SkillsPossessed LIMIT 10",
            "generation_time": 4.761167764663696,
            "execution_time": 0.0015716552734375,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 8, column: 25, offset: 456 errCtx: WHERE NOT skillsNeeded <:> [] AND NOT skillsNeeded <= skillsPossessed errCtxOffset: 24",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Lead']\n      OR p.seniority > 4\n    WITH p.id AS person_id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, COUNT(p.manager_id) AS managed_count\n    ORDER BY managed_count DESC, seniority DESC, hire_date ASC\n    LIMIT 10",
            "generation_time": 2.948002576828003,
            "execution_time": 0.0013358592987060547,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": false,
            "error": "Query cannot conclude with WITH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (i:Incident) \nWHERE i.severity = 'high' OR i.severity = 'critical' \nWITH collect(i) AS problematic_incidents\nUNWIND problematic_incidents AS pi\nOPTIONAL MATCH (p:Person)-[:ALLOCATED_TO]->(project)<-[:RESPONSIBLE_FOR]-(policy)-[:RESPONSIBLE_FOR]->(team)\nWHERE team.name IN [t IN collect(team) WHERE exists(pi)]\nWITH pi, collect(team) AS affected_teams\nUNWIND affected_teams WITH pi, team\nRETURN pi.severity AS incident_severity, team.name AS team_name, collect({property: key, value: val} FOR (prop,val) IN keys(team)|prop AND val IS NOT NULL) AS team_details LIMIT 10",
            "generation_time": 4.601538419723511,
            "execution_time": 0.0016179084777832031,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or AS line: 8, column: 23, offset: 379 errCtx: UNWIND affected_teams WITH pi, team errCtxOffset: 22",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.category CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name, p.email, p.department, p.location, p.timezone",
            "generation_time": 1.8349804878234863,
            "execution_time": 0.001552581787109375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(person)<-[:MEMBER_OF {role: 'critical'}]-(team)\n  WITH team.id AS project_id, collect(person.id) AS critical_team_members\n  MATCH (team_member:Person)-[:REPORTS_TO*1..]->(manager:Person)\n  WITH project_id, critical_team_members, count(distinct manager) AS bus_factor\n  RETURN project_id, bus_factor LIMIT 10",
            "generation_time": 2.9004645347595215,
            "execution_time": 0.004859209060668945,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF]->(t)\nWHERE m.role = 'Employee' AND NOT EXISTS(\n  MATCH (m)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'Compliance Training' OR toLower(s.description) CONTAINS toLower('compliance training')\n)\nRETURN t.name AS Team, count(DISTINCT m) AS EmployeesWithoutTraining, collect({name: m.name, department: m.department}) AS Members WITHOUT POLICY TRAINING\nLIMIT 10",
            "generation_time": 3.8834524154663086,
            "execution_time": 0.0017499923706054688,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 6, column: 14, offset: 166 errCtx:   MATCH (m)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'Compliance Trainin... errCtxOffset: 13",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "WITH (p:Person)-[:HAS_SKILL]->(s:Skill)\nUNWIND apoc.coll.toList(p) as person\nOPTIONAL MATCH (team:Team)-[r:MEMBER_OF]->(person) WHERE NOT r.is_lead\nWITH person, collect({skill: s.name, count: size((p)-[:HAS_SKILL]->(s))}) AS skillsPerPerson\nWHERE size(skillsPerPerson) = 1 AND toLower(skillsPerPerson[0].skill) CONTAINS toLower('unique skill')\nRETURN person.name AS Person, skillsPerPerson[0].skill AS Skill, count(skillsPerPerson) AS ExclusiveSkillCount\nLIMIT 10",
            "generation_time": 3.9660542011260986,
            "execution_time": 0.001260519027709961,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "WITH clause projections must be aliased",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100",
            "generation_time": 2.950935125350952,
            "execution_time": 0.0015616416931152344,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.id NOT IN (SELECT id FROM Person WHERE id IN (\n    MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\n    RETURN m.id\n))\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
            "generation_time": 3.1441266536712646,
            "execution_time": 0.0012485980987548828,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'd': expected IN, IS NULL or IS NOT NULL line: 2, column: 28, offset: 98 errCtx: WHERE p.id NOT IN (SELECT id FROM Person WHERE id IN ( errCtxOffset: 27",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.id, p.name, p.email, t.name AS TeamName LIMIT 100",
            "generation_time": 1.5070240497589111,
            "execution_time": 0.0045359134674072266,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 87
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 26,
        "execution_success": 13,
        "has_results": 4,
        "pattern_matches": 9,
        "avg_generation_time": 3.110423458947076,
        "avg_execution_time": 0.0038198276802345558,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 48.148148148148145
    }
  ],
  "rankings": [
    {
      "model": "granite-code:8b",
      "score": 51.85185185185185
    },
    {
      "model": "phi4:14b",
      "score": 51.85185185185185
    },
    {
      "model": "granite3.3:8b",
      "score": 49.07407407407407
    },
    {
      "model": "codeqwen:7b",
      "score": 48.148148148148145
    },
    {
      "model": "granite3.3:8b-largectx",
      "score": 48.148148148148145
    },
    {
      "model": "mistral:7b",
      "score": 45.370370370370374
    }
  ]
}