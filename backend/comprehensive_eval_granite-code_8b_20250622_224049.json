{
  "model": "granite-code:8b",
  "timestamp": "2025-06-22T22:39:54.781176",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person {role: 'cto'}) \nRETURN p.name as CTO_Name",
        "generation_time": 14.60750961303711,
        "execution_time": 0.0015480518341064453,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering'\nRETURN t\nLIMIT 100",
        "generation_time": 0.8356878757476807,
        "execution_time": 0.0018393993377685547,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.role, p.department, p.timezone, p.manager_id, p.hire_date LIMIT 10",
        "generation_time": 1.4416587352752686,
        "execution_time": 0.0018608570098876953,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'Engineer' AND toLower(p.name) CONTAINS 'senior' AND (p)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['Python', 'React'] RETURN p.name, p.email, p.department, p.role, p.location, p.timezone",
        "generation_time": 2.032851457595825,
        "execution_time": 0.003693103790283203,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 1, column: 115, offset: 114 errCtx: ...or' AND (p)-[:HAS_SKILL]->(s:Skill) WHERE s.name IN ['Python', 'React'] RE... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'security' OR pol.name CONTAINS 'critical' AND pol.updated_at >= DATE({year: 2023, month: 1, day: 1}) RETURN pol.id, pol.name, pol.severity",
        "generation_time": 1.680863857269287,
        "execution_time": 0.0014352798461914062,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'DATE'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)\nWHERE t.size > 10\nRETURN t",
        "generation_time": 0.8345489501953125,
        "execution_time": 0.001996755599975586,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person) WHERE p.department = 'X' OR p.location = 'X'\nRETURN COUNT(p), p.department\nLIMIT 10",
        "generation_time": 1.0847313404083252,
        "execution_time": 0.002204418182373047,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team) \nWITH AVG(t.size) AS avg_team_size \nRETURN avg_team_size",
        "generation_time": 0.9796092510223389,
        "execution_time": 0.0015218257904052734,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person) \nWHERE p.location IS NOT NULL\nWITH p.seniority as sen, p.location as loc\nRETURN loc, COUNT(sen) as Count\nORDER BY loc\nLIMIT 1000",
        "generation_time": 1.4258241653442383,
        "execution_time": 0.001888275146484375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 17
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email",
        "generation_time": 1.0979640483856201,
        "execution_time": 0.0016336441040039062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "Match (pol:Policy) \nWhere pol.category = 'Customer' \nOr pol.name CONTAINS 'Customer'",
        "generation_time": 0.908118486404419,
        "execution_time": 0.0012803077697753906,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person {role: 'Engineer'})\nWHERE p.department = 'Engineering' OR p.location = 'San Francisco'\nRETURN DISTINCT(p)",
        "generation_time": 1.0892443656921387,
        "execution_time": 0.0016901493072509766,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH (ceo:Person {name: 'CEO'})\nCALL apoc.path.subgraphAll(ceo, {minLevel: 0, maxLevel: 10}) yield nodes, relationships\nUNWIND nodes as node\nRETURN node.name as name, node.role as role, relationships as connections\nLIMIT 10",
        "generation_time": 2.9102578163146973,
        "execution_time": 0.0014693737030029297,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Procedure `apoc.path.subgraphAll` is not registered",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.department = 'Security' AND pol.category = 'Compliance' OR pol.name CONTAINS 'compliance'\nRETURN p.name, t.name, pol.name, pol.category\nLIMIT 10",
        "generation_time": 1.9205207824707031,
        "execution_time": 0.0012378692626953125,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'pol' not defined",
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (t:Team {name: 'product'})<-[:MEMBER_OF]-(p:Person)\nRETURN p.name, p.email, t.name\nLIMIT 10",
        "generation_time": 1.1534032821655273,
        "execution_time": 0.001392364501953125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO*]-(p2:Person)\nWHERE p1.id = p2.id\nRETURN p1.name, p2.name\nLIMIT 10",
        "generation_time": 2.094247341156006,
        "execution_time": 0.007372617721557617,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t1:Team)\nWHERE NOT ((t1)-[:MEMBER_OF]->(:Person))\nWITH t1\nMATCH (p1:Person)-[:MEMBER_OF]->(t1)\nOPTIONAL MATCH (p2:Person)-[:MEMBER_OF]->(t2)\nWHERE t2.name IS NOT NULL AND t1.name <> t2.name\nRETURN t1.name, collect(DISTINCT p1.name) AS team_members\nORDER BY COUNT(p1) DESC\nLIMIT 5",
        "generation_time": 2.8000681400299072,
        "execution_time": 0.5197651386260986,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 5
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\n-[:ALLOCATED_TO]->(project:Project)\nWHERE NOT (p)-[:HAS_SKILL]->(project:Project)\nRETURN p.name, project.name\nLIMIT 10\n\n\nThis query will return the names of team members who are not allocated to a specific project and do not possess any skills required by that project. The LIMIT clause is used to restrict the number of results returned to 10 for better performance. You can modify the query as needed based on your specific requirements.",
        "generation_time": 3.169482469558716,
        "execution_time": 0.0015540122985839844,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'T': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 8, column: 1, offset: 189 errCtx: This query will return the names of team members who are not allocated to a s... errCtxOffset: 0",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person) WHERE p.is_lead = true OR p.role CONTAINS 'important' RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
        "generation_time": 1.7156460285186768,
        "execution_time": 0.001691579818725586,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'Problematic Areas' OR pol.name CONTAINS 'Problematic Areas' RETURN pol",
        "generation_time": 0.9849104881286621,
        "execution_time": 0.0014865398406982422,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
        "generation_time": 0.8258287906646729,
        "execution_time": 0.0013585090637207031,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": false,
        "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity) WHERE pol.category = 'critical' OR pol.name CONTAINS 'critical' RETURN entity, COUNT(*) AS bus_factor",
        "generation_time": 1.244983196258545,
        "execution_time": 0.0016336441040039062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team) WHERE NOT t: compliant WITH t MATCH (pol:Policy) WHERE pol.category = 'compliance' AND pol.type = 'training' CALL apoc.path.subgraph(t, pol, {minLevel:1, maxLevel:2}) yield nodes, relationships WITH nodes[0] as team, nodes[1] as policy RETURN team, policy",
        "generation_time": 2.0050764083862305,
        "execution_time": 0.0014750957489013672,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Procedure `apoc.path.subgraph` is not registered",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE NOT (p)-[:HAS_SKILL]->(:Skill)\nRETURN p.name, p.email\nLIMIT 10",
        "generation_time": 1.5153083801269531,
        "execution_time": 0.013660430908203125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) CONTAINS 'john' OR toLower(p.name) CONTAINS 'jon' RETURN p.id, p.name, p.email",
        "generation_time": 1.2795541286468506,
        "execution_time": 0.0021271705627441406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 36
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (t:Team {name: 'Data'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name AS Team_Name, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
        "generation_time": 1.9863972663879395,
        "execution_time": 0.0016562938690185547,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)",
        "generation_time": 0.9143843650817871,
        "execution_time": 0.0013043880462646484,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 24,
    "execution_success": 18,
    "has_results": 5,
    "pattern_matches": 9,
    "avg_generation_time": 2.0199511492693865,
    "avg_execution_time": 0.021547299844247324,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.3333333333333333,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 51.85185185185185
}