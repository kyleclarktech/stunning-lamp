{
  "model": "codeqwen:7b",
  "timestamp": "2025-06-22T22:38:43.554859",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(lead) WHERE lead.role = 'CTO' RETURN p.name, lead.name",
        "generation_time": 8.963774681091309,
        "execution_time": 0.004525661468505859,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person) WHERE t.department = 'engineering' RETURN DISTINCT t",
        "generation_time": 0.925757884979248,
        "execution_time": 0.0016086101531982422,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.city = 'Berlin'\nRETURN p",
        "generation_time": 0.8681819438934326,
        "execution_time": 0.0017566680908203125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'Engineer' AND p.seniority >= 3 AND 'Python' IN p.skills AND 'React' IN p.skills\nRETURN p.name, p.email, p.department, p.role, p.location",
        "generation_time": 1.5504438877105713,
        "execution_time": 0.0016629695892333984,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (p:Policy)\nWHERE p.category = 'Critical Security' AND p.updated_at >= datetime({year: 2022})\nRETURN p.name, p.description, p.severity\nORDER BY p.severity DESC",
        "generation_time": 3.8143985271453857,
        "execution_time": 0.0014939308166503906,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'datetime'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(:Person)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nRETURN t.name",
        "generation_time": 1.0584304332733154,
        "execution_time": 0.0016551017761230469,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nWITH p.department as dept, count(*) as cnt\nRETURN dept, cnt\nORDER BY cnt DESC",
        "generation_time": 0.9894647598266602,
        "execution_time": 0.0018591880798339844,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team)\nRETURN AVG(size((t)<-[:MEMBER_OF])) as Average_team_size\nLIMIT 1",
        "generation_time": 0.9127352237701416,
        "execution_time": 0.0014994144439697266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ')': expected '-' line: 2, column: 34, offset: 48 errCtx: RETURN AVG(size((t)<-[:MEMBER_OF])) as Average_team_size errCtxOffset: 33",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nWITH p.seniority as seniority, p.location as location\nRETURN location, count(DISTINCT seniority) as seniority_count\nORDER BY location",
        "generation_time": 1.1377007961273193,
        "execution_time": 0.002074003219604492,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 17
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)\nWHERE p2.department = 'Data'\nRETURN p1, p2",
        "generation_time": 1.494856834411621,
        "execution_time": 0.0015370845794677734,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWHERE pol.category = 'customer' OR pol.name CONTAINS 'customer'\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description",
        "generation_time": 1.5894930362701416,
        "execution_time": 0.0017466545104980469,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {category: 'engineering'})-[:MEMBER_OF]->(t:Team)<-[:WORKS_AT]-(c:Client {industry: 'financial'})\nRETURN p.name AS engineer, c.name AS client",
        "generation_time": 1.6219916343688965,
        "execution_time": 0.001940011978149414,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH (junior_dev:Person {role: 'Developer', seniority: 'Junior'})-[:REPORTS_TO]->(manager)\n\nWHILE manager IS NOT NULL AND manager.role <> 'CEO'\n\nMERGE (new:Path)-[:CHAIN]->(manager)\n\nSET new.position = size((junior_dev)<-[:REPORTS_TO]-()<-[:MEMBER_OF {is_lead: true}]->()) + 1\n, manager.level = new.position\n\nSET junior_dev.id = toLower(junior_dev.name)\n, manager.id = toLower(manager.name)\n\nSET new.junior_dev = junior_dev.id\n, new.manager = manager.id\n, new.level = manager.level\n\nSET new.path = collect([new.junior_dev, new.manager])\n\nSET new.ceo = (manager.role = 'CEO')\n\nSET new.path = reduce(paths = [], node IN new.path | paths + [node.name])\n\nWHERE new.ceo\nRETURN new.path",
        "generation_time": 5.096910715103149,
        "execution_time": 0.001569986343383789,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'I': expected WHERE line: 3, column: 3, offset: 95 errCtx: WHILE manager IS NOT NULL AND manager.role <> 'CEO' errCtxOffset: 2",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (s:SecurityTeam)-[:RESPONSIBLE_FOR]->(p:Policy)\nRETURN s, p",
        "generation_time": 1.3091309070587158,
        "execution_time": 0.001992940902709961,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (pt:Team {name: 'Product'})-[r:COLLABORATES_WITH]->(et:Team {name: 'Engineering'})\nRETURN pt.name AS Product_Team, et.name AS Engineering_Team, r.description AS Collaboration_Description",
        "generation_time": 3.67160964012146,
        "execution_time": 0.0021407604217529297,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "WITH [1] as start_level\nMATCH (p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE p1 = p2 AND start_level < 10 // Set a limit for levels of reporting\nRETURN p1, p2, p2.name AS reports_to",
        "generation_time": 5.2831151485443115,
        "execution_time": 0.0016162395477294922,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "WITH [t IN ['Team1', 'Team2']] AS teams\nMATCH (p:Person)-[:MEMBER_OF]->(team)\nWHERE team.name IN teams\nAND NOT any(s in p.skills where any(ss in s.skills where ss IN [s for s In COLLECT(t)[0].members | s.skill]))\nRETURN DISTINCT team.name, p.name, p.skills",
        "generation_time": 4.568305492401123,
        "execution_time": 0.0014963150024414062,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'f': expected IN, '=', '.', '(', AND, OR, XOR, NOT, '=~', '<>', '+', '-', '*', '/', '%', '^', CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ']' line: 4, column: 67, offset: 169 errCtx: ...re any(ss in s.skills where ss IN [s for s In COLLECT(t)[0].members | s.sk... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)\nWITH project.id as pid, [p.name, p.email, p.role] as personInfo, collect(DISTINCT toLower(p.skills)) AS teamSkills\n\nMATCH (p2:Person)-[:MEMBER_OF]->(team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy)\nWITH pid, teamSkills, [p2.name, p2.email, p2.role] AS policyInfo, collect(DISTINCT toLower(p2.skills)) AS policySkills\n\nUNWIND policyInfo as info\nWHERE NOT ALL (info[2] in teamSkills OR toLower(info[0]) IN ['lead', 'manager'])\n\nRETURN pid, DISTINCT policySkills - teamSkills",
        "generation_time": 6.423109769821167,
        "execution_time": 0.0017306804656982422,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 8, column: 2, offset: 395 errCtx: WHERE NOT ALL (info[2] in teamSkills OR toLower(info[0]) IN ['lead', 'manager... errCtxOffset: 1",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.hire_date",
        "generation_time": 0.9720227718353271,
        "execution_time": 0.0016880035400390625,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": false,
        "error": "'p' not defined",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy) WHERE p.severity = 'High' OR p.category IN ['Operational', 'Compliance']\nWITH t, collect(DISTINCT p) as policies\n\nCALL {\n   WITH policies\n   UNWIND policies as policy\n   MATCH (policy)<-[:RESPONSIBLE_FOR]-(entity:Person|Group|Project|Client|Office)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN entity\n}\n\nWITH collect(DISTINCT entity) as affected_entities\n\nCALL {\n   WITH affected_entities\n   UNWIND affected_entities as entity\n   MATCH (entity)-[:ALLOCATED_TO]->(p:Project)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN p\n}\n\nWITH collect(DISTINCT p) as affected_projects\n\nCALL {\n   WITH affected_projects, affected_entities\n   UNWIND affected_projects as project\n   MATCH (project)-[:HAS_SKILL]->(s:Skill) WHERE s.category = 'Operational' OR s.name CONTAINS 'operational'\n   RETURN project\n}\n\nRETURN DISTINCT affected_entities, affected_projects",
        "generation_time": 6.711174249649048,
        "execution_time": 0.0016357898712158203,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '|': expected a label, '{', a parameter or ')' line: 7, column: 53, offset: 265 errCtx: ...y)<-[:RESPONSIBLE_FOR]-(entity:Person|Group|Project|Client|Office)-[:HAS_S... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name = 'AI' RETURN p.name",
        "generation_time": 0.9054274559020996,
        "execution_time": 0.0015606880187988281,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project) WHERE project.priority = 'Critical' AND project.status IN ['In Progress', 'On Hold']\nWITH count(distinct p) AS total_people, count(DISTINCT project) AS critical_projects\nRETURN total_people / (critical_projects * 0.5) as bus_factor",
        "generation_time": 1.9421939849853516,
        "execution_time": 0.0019073486328125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "Match (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)\nwhere not exists((p)<-[:HAS_SKILL]-(s:Skill))\n\nReturn t, p",
        "generation_time": 1.1209955215454102,
        "execution_time": 0.0015101432800292969,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(p)<-[:HAS_SKILL]-(s:Skill)'",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s), (p2:Person)-[:HAS_SKILL]->(s)\n\nWHERE p1.id <> p2.id AND NOT (p1)-[:MEMBER_OF]->(:Team)<-[:MEMBER_OF]-(:Team WHERE id = p2.id)\n\nRETURN s, collect(DISTINCT p1.name + ': ' + p1.role + ', ' + p2.name + ': ' + p2.role) AS KnowledgeSilo\n\nLIMIT 10",
        "generation_time": 2.6514334678649902,
        "execution_time": 0.0015454292297363281,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected a label, '{', a parameter or ')' line: 3, column: 78, offset: 145 errCtx: ....id AND NOT (p1)-[:MEMBER_OF]->(:Team)<-[:MEMBER_OF]-(:Team WHERE id = p2.id) errCtxOffset: 63",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.name =~ '(?i)(john|jon)'\nRETURN p.id, p.name, p.email",
        "generation_time": 0.9971978664398193,
        "execution_time": 0.0017364025115966797,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "FalkorDB does not currently support =~",
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (t:Team {name: 'Data Team'})\nDETACH DELETE t",
        "generation_time": 3.6627469062805176,
        "execution_time": 0.0018758773803710938,
        "syntax_valid": false,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN t.name, p.name",
        "generation_time": 0.930370569229126,
        "execution_time": 0.004662036895751953,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 87
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 24,
    "execution_success": 16,
    "has_results": 4,
    "pattern_matches": 8,
    "avg_generation_time": 2.6360360781351724,
    "avg_execution_time": 0.0019269607685230396,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.3333333333333333,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 48.148148148148145
}