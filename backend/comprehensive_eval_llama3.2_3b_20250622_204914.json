{
  "model": "llama3.2:3b",
  "timestamp": "2025-06-22T20:48:48.183934",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE lower(p.role) = 'cto' OR lower(p.department) = 'cto' RETURN p.id, p.name, p.email",
        "generation_time": 4.90495491027832,
        "execution_time": 0.0014748573303222656,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.id, t.name, t.focus",
        "generation_time": 0.3955554962158203,
        "execution_time": 0.0016436576843261719,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.id, p.name, p.email, o.name AS location",
        "generation_time": 0.5361001491546631,
        "execution_time": 0.002383708953857422,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)-[:HAS_SKILL]->(skill:Skill)\nWHERE p.role = 'Senior Engineer'\nAND skill.name IN ['Python', 'React']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority",
        "generation_time": 0.8555722236633301,
        "execution_time": 0.0020055770874023438,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (p:Policy)-[:UPDATED_IN {year: 2024}]-(entity)\nWHERE p.severity = 'CRITICAL'\nRETURN entity.id, p.name, p.description, p.severity",
        "generation_time": 0.5964455604553223,
        "execution_time": 0.0016939640045166016,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: false}]->(p:Person)\nWITH t, COUNT(p) as memberCount\nWHERE memberCount > 10\nRETURN t.name, memberCount",
        "generation_time": 0.6413404941558838,
        "execution_time": 0.0019385814666748047,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person) WHERE LOWER(p.department) IN ['X', 'Y', 'Z']\nRETURN p.id, p.name, p.department, COUNT(DISTINCT p.id) as num_employees",
        "generation_time": 0.6077520847320557,
        "execution_time": 0.0014286041259765625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'LOWER'",
        "result_count": 0
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team)\n  LOAD RECURSION t.team_members\nWITH COLLECT(t.team_members) as team_members_list\nUNWIND team_members_list AS member\nWITH member, COUNT(member) as count\nRETURN department, AVG(count) as average_team_size",
        "generation_time": 0.7418308258056641,
        "execution_time": 0.001590728759765625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'R': expected LOAD CSV line: 2, column: 8, offset: 22 errCtx:   LOAD RECURSION t.team_members errCtxOffset: 7",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office)\nWITH p, o, COUNT(p.seniority) AS seniority_count, COLLECT(DISTINCT o.region) AS locations\nRETURN o.name, COUNT(seniority_count) AS total_seniority_count, seniority_count, LOCATE(locations, 'senior') + LOCATE(locations, 'mid-level') + LOCATE(locations, 'junior') AS seniority_distribution, LOCATE(locations, 'senior') AS senior_percentage,\nLCASE(seniority) IN ['senior', 'mid-level', 'junior'] AS senior_level\nORDER BY senior_percentage DESC LIMIT 10",
        "generation_time": 1.671534776687622,
        "execution_time": 0.0017161369323730469,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'LOCATE'",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager)\nWHERE manager IN MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-()\nRETURN p.id, p.name, p.email, t.name AS department, t.role",
        "generation_time": 0.783785343170166,
        "execution_time": 0.0014257431030273438,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 50, offset: 91 errCtx: WHERE manager IN MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-() errCtxOffset: 49",
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy), (t)-[:ALLOCATED_TO]->(p:Person)\nWHERE t.focus = 'Customer Project' AND p.role = 'Project Manager'\nRETURN pol.id, pol.name, pol.category, pol.description",
        "generation_time": 0.7767717838287354,
        "execution_time": 0.002085447311401367,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project), (proj)<-[r:WORKS_WITH]-(client:Client)\nWHERE lower(proj.type) CONTAINS 'financial' AND lower(p.role) CONTAINS 'engineer'\nRETURN p.id, p.name, p.email, p.department, p.role",
        "generation_time": 0.8765945434570312,
        "execution_time": 0.00128173828125,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH p=(person:Person)-[:REPORTS_TO*]-(manager)\nWHERE lower(person.role) = 'junior developer' OR lower(person.name) = 'ceo'\nRETURN p, manager",
        "generation_time": 0.593055009841919,
        "execution_time": 0.0013973712921142578,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (s:Team {name: 'Security'})-[:RESPONSIBLE_FOR]->(pol:Policy)\nOPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(t:Team) WHERE t.name = 'Security'\nRETURN s.name, pol.id, pol.name, pol.category",
        "generation_time": 0.795170783996582,
        "execution_time": 0.002002716064453125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (t:Team {name: 'Product'})-[:MEMBER_OF {role: true}]->(p:Person)\nOPTIONAL MATCH (e:Person {role: 'Engineer'})\nRETURN t.name, p.name, e.name, t.focus, e.role, t.department, p.department",
        "generation_time": 0.8179042339324951,
        "execution_time": 0.0018837451934814453,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH p=(p:Person)-[r1]->()-[r2]->(p) WHERE r1.isLead OR r2.isLead RETURN p.id, p.name, p.email, p.role, p.manager_id, r1.role, r2.role",
        "generation_time": 0.7177515029907227,
        "execution_time": 0.02120375633239746,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person)<-[:HAS_SKILL]-(:Skill)\nWHERE NOT EXISTS (\n  MATCH (ot:Team)-[:MEMBER_OF]->(pt:Person)<-[:HAS_SKILL]-(:Skill)\n  WHERE ot <> t AND pt <> p\n)",
        "generation_time": 0.8588840961456299,
        "execution_time": 0.0014548301696777344,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 20, offset: 101 errCtx:   MATCH (ot:Team)-[:MEMBER_OF]->(pt:Person)<-[:HAS_SKILL]-(:Skill) errCtxOffset: 19",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (t:Project)-[:NEEDS]->(s:Skill),\n     (p:Person)-[:ALLOCATED_TO]->(tp:Team),\n     (tp:Team)-[:MEMBER_OF {is_lead: true}]-(pp:Person)\nWHERE t.status = 'Ongoing' OR t.status = 'Closed'\nAND s.name NOT IN (\n  SELECT distinct(s1.name) \n  FROM (p)-[:HAS_SKILL]->(s1)\n  JOIN (tp)-[:ALLOCATED_TO]->(s2) \n  WHERE pp.name = p.name AND tp.id = s2.team_id\n)\nRETURN t.name AS project_name, s.name AS skill_name, pp.name AS team_member_name",
        "generation_time": 1.7272040843963623,
        "execution_time": 0.0014982223510742188,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'd': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 6, column: 10, offset: 218 errCtx:   SELECT distinct(s1.name)  errCtxOffset: 9",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person) WHERE lower(p.name) OR lower(p.email) OR lower(p.role) OR lower(p.seniority) RETURN p.id, p.name, p.email, p.role, p.seniority",
        "generation_time": 0.6554479598999023,
        "execution_time": 0.0014221668243408203,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'lower'",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(senior) WHERE senior.seniority = 'Problematic' OR (p.department, p.location) IN ['HR', 'Risk Management'] RETURN p.name, p.email, p.department, p.location",
        "generation_time": 0.7373397350311279,
        "execution_time": 0.0014307498931884766,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ',': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or ')' line: 1, column: 97, offset: 96 errCtx: ...rity = 'Problematic' OR (p.department, p.location) IN ['HR', 'Risk Managem... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(skill:Skill) WHERE toLower(skill.name) CONTAINS 'ai' RETURN p.id, p.name, p.email, p.role, p.department",
        "generation_time": 0.603060245513916,
        "execution_time": 0.005001544952392578,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 45
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)\nWHERE project.type = 'Critical'\nWITH collect(DISTINCT p) as team_members\nWITH size(team_members) as total_members, count(distinct(p) - [p]) as critical_members\nRETURN total_members, critical_members",
        "generation_time": 0.974729061126709,
        "execution_time": 0.0015444755554199219,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'p' not defined",
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t, col = collect(DISTINCT pol.category) + ' ', col = toLower(col)\nWHERE NOT any(c in elements(col) where exists((pol)<-[:RESPONSIBLE_FOR]-(:Person)))\nRETURN t.name, col, COLLECT(DISTINCT p.name)",
        "generation_time": 0.9936304092407227,
        "execution_time": 0.0015211105346679688,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'col' not defined",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {role: true}]->(p:Person)\nWHERE t.id NOT IN (\n  MATCH (t:Team)-[:MEMBER_OF]->(p:Person)\n  RETURN p.id\n) AND size((p:Person)-[:HAS_SKILL]->())=1",
        "generation_time": 0.8815910816192627,
        "execution_time": 0.0015156269073486328,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 19, offset: 91 errCtx:   MATCH (t:Team)-[:MEMBER_OF]->(p:Person) errCtxOffset: 18",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\nWHERE lower(p.name) CONTAINS 'john' OR lower(p.name) CONTAINS 'jon'\nRETURN p; LIMIT 100",
        "generation_time": 0.5111105442047119,
        "execution_time": 0.003629446029663086,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Error: query with more than one statement is not supported.",
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {role: 'data'}]->(t:Team)<-[:RESPONSIBLE_FOR]-(pol:Policy), (r:Group)<-[:RESPONSIBLE_FOR]-(pol)\nOPTIONAL MATCH (p)-[r]-()\nWITH DISTINCT p, t\nWHERE NOT p.member_of = []\nRETURN p.name, t.name, pol.name, r.type",
        "generation_time": 1.0843620300292969,
        "execution_time": 0.0016531944274902344,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "The alias 'r' was specified for both a node and a relationship.",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team {name: 'Find team leads'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.id, p.name, t.id, t.name",
        "generation_time": 0.6096367835998535,
        "execution_time": 0.0020034313201904297,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 26,
    "execution_success": 11,
    "has_results": 1,
    "pattern_matches": 8,
    "avg_generation_time": 0.9610783612286603,
    "avg_execution_time": 0.0025863382551405164,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 42.59259259259259
}