{
  "model": "granite3.3:8b",
  "timestamp": "2025-06-22T22:43:04.541732",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role =~ /cto/ RETURN p.name, p.email, p.department, p.location, p.seniority, p.manager_id, p.hire_date LIMIT 1",
        "generation_time": 15.09735894203186,
        "execution_time": 0.0013580322265625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '/': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 1, column: 34, offset: 33 errCtx: MATCH (p:Person) WHERE p.role =~ /cto/ RETURN p.name, p.email, p.department, ... errCtxOffset: 33",
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWHERE toLower(p.department) CONTAINS 'engineering'\nRETURN DISTINCT t.name AS Team, t.id AS TeamID\nLIMIT 100",
        "generation_time": 1.4824650287628174,
        "execution_time": 0.0020995140075683594,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 12
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin' RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100",
        "generation_time": 2.0552725791931152,
        "execution_time": 0.0026733875274658203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10",
        "generation_time": 2.7279908657073975,
        "execution_time": 0.001984834671020508,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.severity = 'critical' AND toLower(pol.category) CONTAINS 'security' \nAND pol.updated_at >= date('now','-1year')\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.severity, pol.updated_at\nLIMIT 100",
        "generation_time": 2.0817251205444336,
        "execution_time": 0.0013837814331054688,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nRETURN t.name, count(distinct (:Person)-[:MEMBER_OF]->(t))\nLIMIT 100",
        "generation_time": 1.462524652481079,
        "execution_time": 0.0013785362243652344,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.department as Department, count(p) as Number_of_People\n  LIMIT 10",
        "generation_time": 0.9805805683135986,
        "execution_time": 0.0016603469848632812,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (d:Department)\n  OPTIONAL MATCH (t:Team)-[:MEMBER_OF]->(p:Person)\n  WITH d, size(collect(t)) AS teamSize\n  RETURN d.name AS Department, avg(teamSize) AS AverageTeamSize LIMIT 10",
        "generation_time": 1.5908312797546387,
        "execution_time": 0.0023293495178222656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.location AS Location, collect(p.seniority) AS SeniorityLevels\n  ORDER BY Location\n  LIMIT 20",
        "generation_time": 1.1326911449432373,
        "execution_time": 0.004380226135253906,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 17
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person {department: 'Data'}))\n  RETURN reporter.id, reporter.name, reporter.email, reporter.role, reporter.seniority, reporter.location, reporter.timezone, reporter.manager_id, reporter.hire_date\n  LIMIT 100",
        "generation_time": 2.307985305786133,
        "execution_time": 0.001646280288696289,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected a label line: 1, column: 43, offset: 42 errCtx: MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person {department: 'Data'})) errCtxOffset: 42",
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)<-[:ALLOCATED_TO]-(p2:Person)\n  WHERE p2.role = 'customer project'\n  RETURN DISTINCT p.id, p.name, p.category, p.description, p.severity\n  LIMIT 10",
        "generation_time": 1.8836252689361572,
        "execution_time": 0.0016863346099853516,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:HAS_SKILL]->(s:Skill {name: 'engineering'})<-[:WORKS_AT]-(:Office)-[:SERVES]->(c:Client {industry: 'financial'})\nRETURN DISTINCT e.id, e.name, e.email, e.department, e.role, e.seniority, e.location, e.timezone, e.manager_id, e.hire_date \nLIMIT 100",
        "generation_time": 2.5857255458831787,
        "execution_time": 0.0021457672119140625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'Junior Developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDevelopers, collect(ceo) AS ceoNode\nUNWIND juniorDevelopers AS dev\nWITH dev, shortestPath(path) AS reportingChain\nRETURN * ORDER BY length(reportingChain) DESC\nLIMIT 10",
        "generation_time": 2.7442219257354736,
        "execution_time": 0.0014519691467285156,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (s:Team {name: 'security'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)-[:RESPONSIBLE_FOR*]->(pol:Policy)\nRETURN p.name AS member, pol.name AS policy, type(pol)\nLIMIT 100",
        "generation_time": 1.7771821022033691,
        "execution_time": 0.0023288726806640625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role: 'Product Team'}]->(pt:Team),\n      (p2:Person)-[:MEMBER_OF {role: 'Engineering'}]->(et:Team),\n      PATH(p1)-[r]-(*)-[:WORKS_AT|ALLOCATED_TO|-{relations}]->(p2)\nWHERE toLower(pt.name) CONTAINS 'product' AND toLower(et.name) CONTAINS 'engineering'\nRETURN p1, et, r.type \nLIMIT 50",
        "generation_time": 4.51838231086731,
        "execution_time": 0.0015513896942138672,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '=' line: 3, column: 11, offset: 141 errCtx:       PATH(p1)-[r]-(*)-[:WORKS_AT|ALLOCATED_TO|-{relations}]->(p2) errCtxOffset: 10",
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(m:Person)<-[:REPORTS_TO]-(p2:Person)\nWHERE p1.id <> p2.id AND p1.name = toLower(p2.name)\nRETURN DISTINCT p1, m",
        "generation_time": 17.765511512756348,
        "execution_time": 0.007997274398803711,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "WITH 'Team' as teamType\nMATCH (t:Team)-[:MEMBER_OF]->(p:Person)\nWHERE EXISTS(p.skills) AND NOT EXISTS(t.sharedSkills)\nWITH collect(DISTINCT t.name) AS uniqueTeams, collect(DISTINCT p.skills) AS uniqueSkills\nMATCH ()-[r:HAS_SKILL]->(s:Skill)\nWITH uniqueTeams, uniqueSkills, s\nOPTIONAL MATCH (t2:Team)-[:MEMBER_OF]->(p2:Person)\nWHERE EXISTS(s IN p2.skills) AND NOT EXISTS(uniqueSkills CONTAINS s)\nWITH uniqueTeams, filter(x IN uniqueSkills WHERE NOT EXISTS(y IN uniqueTeams WHERE y->AT(r).name = x)) AS exclusiveSkills\nRETURN uniqueTeams LIMIT 10",
        "generation_time": 19.059290647506714,
        "execution_time": 0.0018892288208007812,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 9, column: 78, offset: 472 errCtx: ...ls WHERE NOT EXISTS(y IN uniqueTeams WHERE y->AT(r).name = x)) AS exclusiv... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<-[:MEMBER_OF {is_lead: false}]-(team:Team)\n  WITH team, collect(p) as projects\n  MATCH (teamMember)-[:HAS_SKILL]->(requiredSkill:Skill)\n  OPTIONAL MATCH (projects)-[:REQUIRES]->(projectSkill:Skill)\n  WHERE requiredSkill.name = projectSkill.name\n  WITH team, teamMember, requiredSkill, projects, COLLECT(projectSkill.name) AS possessedSkills\n  WHERE NOT requiredSkill.name IN possessedSkills\n  RETURN team.name AS Team, teamMember.name AS Member, requiredSkill.name AS RequiredSkill, COUNT(DISTINCT projectSkill.name) AS ProjectCount\nLIMIT 10",
        "generation_time": 18.75033926963806,
        "execution_time": 0.001766204833984375,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'projectSkill' not defined",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Lead', 'Senior']\n    AND p.seniority > 3\n    WITH p.id AS person_id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone\n    LIMIT 10\nRETURN person_id, name, email, department, role, seniority, location, timezone",
        "generation_time": 17.77952480316162,
        "execution_time": 0.001834869384765625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "WITH clause projections must be aliased",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (i:Incident) WHERE i.severity = 'High' OR i.status = 'Unresolved'\n    WITH i.id AS incident_id, i.description, i.affected_regions, i.created_at, i.resolved_at\n    ORDER BY i.severity DESC, i.created_at ASC\n    LIMIT 10\n    RETURN incident_id, description, affected_regions, created_at, resolved_at",
        "generation_time": 18.21115803718567,
        "execution_time": 0.0017092227935791016,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "WITH clause projections must be aliased",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person) WHERE p.skill CONTAINS 'ai' OR EXISTS(s IN p.skills WHERE s.name CONTAINS 'ai') \n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name AS Expert, p.email, p.department, p.location",
        "generation_time": 16.189136505126953,
        "execution_time": 0.001476287841796875,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 1, column: 70, offset: 69 errCtx: ...RE p.skill CONTAINS 'ai' OR EXISTS(s IN p.skills WHERE s.name CONTAINS 'ai')  errCtxOffset: 52",
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(person)<-[:REPORTS_TO]-(manager)-[:REPORTS_TO]->(ceo)\n  WHERE p.priority = 'critical' AND person.seniority IN ['junior', 'mid']\n  WITH person, count(distinct manager) as total_reportsto, count(distinct ceo) as total_above\n  WHERE total_reportsto + total_above <= 2\n  RETURN person.name AS Person, count(person) AS BusFactorLimit",
        "generation_time": 18.29763174057007,
        "execution_time": 0.001980304718017578,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)\n  WHERE NOT EXISTS(t<-[:RESPONSIBLE_FOR]-(:Policy))\n  WITH t\n  MATCH (p:Person)-[:MEMBER_OF]->(t)\n  WHERE p.role = 'staff' OR p.role = 'intern'\n  RETURN t.name AS Team, count(p) AS UntrainedCount, collect(p.name) AS UntrainedMembers\nLIMIT 100",
        "generation_time": 17.763981819152832,
        "execution_time": 0.0016908645629882812,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 24, offset: 38 errCtx:   WHERE NOT EXISTS(t<-[:RESPONSIBLE_FOR]-(:Policy)) errCtxOffset: 23",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "WITH 'Identify knowledge silos: skills possessed by only one person in a team' AS explanation\n  UNWIND range(1, 10) AS attempt\n  WITH explanation, attempt\n  OPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(team)<-(:Team)-[:HAS_SKILL]->(skill)\n  WITH p, collect(skill.name) AS possessedSkills, team.name AS teamName\n  WHERE size(possessedSkills) = 1 AND NOT EXISTS((q:Person)-[:MEMBER_OF]->(team) AND skill IN collect(sk2:Skill))\n  RETURN p.name AS Person, teamName AS Team, possessedSkills AS Skills LIMIT 10",
        "generation_time": 18.804001569747925,
        "execution_time": 0.0021963119506835938,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 4, column: 51, offset: 205 errCtx:   OPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(team)<-(:Team)-[:HAS_SKILL]->(skill) errCtxOffset: 50",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100",
        "generation_time": 17.292370319366455,
        "execution_time": 0.00494837760925293,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (p1:Person)\nWHERE p1.role CONTAINS 'data' AND p1.department CONTAINS 'team'\nWITH collect(p1) AS teamMembers\nUNWIND teamMembers AS teamMember\nMATCH (manager:Person)-[:REPORTS_TO]->(teamMember)\nWITH manager\nOPTIONAL MATCH (manager)-[:MEMBER_OF {is_lead: true}]->(dataTeam:Team)\nWITH manager, dataTeam\nMATCH (policy:Policy)-[:RESPONSIBLE_FOR]->(dataTeam)\nRETURN manager.name AS Manager, dataTeam.name AS Team, policy.name AS Policies\nLIMIT 10",
        "generation_time": 17.622703552246094,
        "execution_time": 0.0025968551635742188,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'lead' AND EXISTS(p[:MEMBER_OF {is_lead: true}]->(team:Team))\n  RETURN p.id, p.name AS TeamLead, p.email, p.department, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100",
        "generation_time": 17.59084153175354,
        "execution_time": 0.0018808841705322266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name, an identifier or '..' line: 2, column: 38, offset: 54 errCtx:   WHERE p.role = 'lead' AND EXISTS(p[:MEMBER_OF {is_lead: true}]->(team:Team)) errCtxOffset: 37",
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 13,
    "has_results": 3,
    "pattern_matches": 10,
    "avg_generation_time": 9.613150146272448,
    "avg_execution_time": 0.0022972336521855105,
    "category_scores": {
      "simple_lookups": 0.3333333333333333,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.0,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 49.07407407407407
}