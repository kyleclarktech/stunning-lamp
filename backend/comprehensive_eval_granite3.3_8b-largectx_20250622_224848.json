{
  "model": "granite3.3:8b-largectx",
  "timestamp": "2025-06-22T22:47:24.160102",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email, p.department, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 1",
        "generation_time": 8.907916069030762,
        "execution_time": 0.0020520687103271484,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\n  WHERE toLower(p.department) CONTAINS 'engineering'\n  RETURN DISTINCT t.name AS Team, t.id AS ID ORDER BY t.name",
        "generation_time": 2.198289155960083,
        "execution_time": 0.004427194595336914,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 12
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.timezone, p.manager_id, p.hire_date LIMIT 100",
        "generation_time": 2.6559648513793945,
        "execution_time": 0.0017306804656982422,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10",
        "generation_time": 4.587296724319458,
        "execution_time": 0.0017549991607666016,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy) \nWHERE pol.category CONTAINS 'security' AND toLower(pol.severity) = 'critical' \nAND pol.updated_at >= date('now', '-1year')\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.updated_at\nLIMIT 100",
        "generation_time": 2.7132346630096436,
        "execution_time": 0.0017147064208984375,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF]->(t)\nWITH t, size((m)) as memberCount\nWHERE memberCount > 10\nRETURN DISTINCT t.name AS Team, memberCount ORDER BY memberCount DESC LIMIT 10",
        "generation_time": 1.934621810913086,
        "execution_time": 0.0017330646514892578,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Type mismatch: expected List, String, or Null but was Node",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.department as Department, count(p) as Number_of_People\n  LIMIT 100",
        "generation_time": 1.117795705795288,
        "execution_time": 0.0015401840209960938,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (d:Department)-[:HAS_TEAM]->(t:Team)\n  RETURN COUNT(t) AS team_count, AVG(size(FILTER x IN relationships(d) WHERE TYPE(x) = 'MEMBER_OF' FILTER isBoolean(x.is_lead) = false)) AS average_team_size LIMIT 1",
        "generation_time": 2.0678579807281494,
        "execution_time": 0.0013804435729980469,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ' ': expected XOR line: 2, column: 51, offset: 93 errCtx: ...T(t) AS team_count, AVG(size(FILTER x IN relationships(d) WHERE TYPE(x) = ... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\n  OPTIONAL MATCH (p)-[:WORKS_AT]->(o:Office)\n  WITH p, toLower(o.city), p.seniority AS seniorityLevel\n  BY city, seniorityLevel\n  RETURN city AS location, collect(seniorityLevel) AS distribution ORDER BY location",
        "generation_time": 2.6903886795043945,
        "execution_time": 0.0012049674987792969,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'B': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 3, offset: 121 errCtx:   BY city, seniorityLevel errCtxOffset: 2",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (d:Person)-[:REPORTS_TO]->(p:Person)<-[:MEMBER_OF {role:'data', is_lead:true}]-(:Team)\nRETURN d.id, d.name AS person_name, p.id AS reporter_id, p.name AS reporter_name\nLIMIT 100",
        "generation_time": 2.0732221603393555,
        "execution_time": 0.0016858577728271484,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)<-(:Person)-[:ALLOCATED_TO]->(p:Project)\nWHERE p.type CONTAINS 'customer'\nRETURN distinct pol.id, pol.name, pol.category, pol.description, pol.severity\nLIMIT 10",
        "generation_time": 2.083814859390259,
        "execution_time": 0.0012962818145751953,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 50, offset: 49 errCtx: ...eam)-[:RESPONSIBLE_FOR]->(pol:Policy)<-(:Person)-[:ALLOCATED_TO]->(p:Project) errCtxOffset: 42",
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:HAS_VISA]->(v:Visa)<-[:WORKS_AT]-(o:Office)<-[:ALLOCATED_TO]-(p:Project)\n  WHERE toLower(o.industry) CONTAINS 'financial'\n  RETURN e.name, e.email, e.department, e.role, e.seniority, o.city, o.country, p.name AS project_name LIMIT 10",
        "generation_time": 2.7236030101776123,
        "execution_time": 0.001972198486328125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nRETURN path\nLIMIT 100",
        "generation_time": 1.6877021789550781,
        "execution_time": 0.0011773109436035156,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (secTeam:Team {name: 'security'})<-[:MEMBER_OF {is_lead: true}]-(secMember:Person)\n      MATCH (secMember)-[:HAS_SKILL]->(skill:Skill)\n      MATCH (secMember)<-[:RESPONSIBLE_FOR]-(compliancePolicy:Policy)\n      RETURN secTeam.name AS TeamName,\n             collect(distinct secMember.name) AS Members,\n             collect(distinct skill.name) AS Skills,\n             collect(distinct compliancePolicy.name) AS Policies\nLIMIT 10",
        "generation_time": 3.1569509506225586,
        "execution_time": 0.0016350746154785156,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role: 'Product'}]->(productTeam:Team)\n      -(eEngineering:Person)-[:MEMBER_OF {role: 'Engineering'}]->(engineeringTeam:Team)\n      WHERE productTeam.name = 'Product Team' AND engineeringTeam.name = 'Engineering Team'\n      RETURN pProduct, eEngineering, productTeam.name AS Product_Team, engineeringTeam.name AS Engineering_Team",
        "generation_time": 2.8036720752716064,
        "execution_time": 0.0013043880462646484,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 8, offset: 82 errCtx:       -(eEngineering:Person)-[:MEMBER_OF {role: 'Engineering'}]->(engineering... errCtxOffset: 7",
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)<-[:REPORTS_TO]-(p1)\nWHERE p1.id <> p2.id AND toLower(p1.name) <> toLower(p2.name)\nRETURN p1, p2",
        "generation_time": 1.9172356128692627,
        "execution_time": 0.05326366424560547,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 480
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "WITH 'Team' as teamType\n  MATCH (t:Team)\n  WHERE NOT EXISTS(\n    CASE\n      WHEN size((t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)) = 1 THEN TRUE\n      ELSE FALSE\n    END\n  )\n  WITH collect({name: t.name, uniqueSkills: apoc.coll.toSet(\n          [sk IN (t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)]\n           | toLower(s.name)])\n    }) AS teamsWithUniqueSkills\n  UNWIND teamsWithUniqueSkills AS teamData\n  WITH teamData.name AS teamName, teamData.uniqueSkills AS uniqueSkills\n  WHERE size(uniqueSkills) = apoc.coll.cardinality(teamsWithUniqueSkills) - apoc.coll.count(teamsWithUniqueSkills)\n  RETURN DISTINCT teamName ORDER BY teamName LIMIT 10",
        "generation_time": 6.164120674133301,
        "execution_time": 0.0019683837890625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '-': expected ']' line: 5, column: 49, offset: 118 errCtx: ...size((t)<-[:MEMBER_OF {is_lead: true}-(p:Person)-[:HAS_SKILL]->(s:Skill)) ... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<-[:MEMBER_OF]-(team:Team)\nWITH team, p\nOPTIONAL MATCH (teamMember)-[:HAS_SKILL]->(requiredSkill:Skill)\nWITH team, p, collect(requiredSkill.name) AS skillsNeeded\nMATCH (person:Person)-[:ALLOCATED_TO]->(project)<-[:MEMBER_OF]-(team)\nOPTIONAL MATCH (person)-[:HAS_SKILL]->(possessedSkill:Skill)\nWITH team, p, skillsNeeded, collect(distinct possessedSkill.name) AS skillsPossessed\nWHERE NOT skillsNeeded <:> [] AND NOT skillsNeeded <= skillsPossessed\nRETURN team.name AS Team, p.name AS Project, skillsNeeded AS SkillsNeeded, skillsPossessed AS SkillsPossessed LIMIT 10",
        "generation_time": 4.761167764663696,
        "execution_time": 0.0015716552734375,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 8, column: 25, offset: 456 errCtx: WHERE NOT skillsNeeded <:> [] AND NOT skillsNeeded <= skillsPossessed errCtxOffset: 24",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Lead']\n      OR p.seniority > 4\n    WITH p.id AS person_id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, COUNT(p.manager_id) AS managed_count\n    ORDER BY managed_count DESC, seniority DESC, hire_date ASC\n    LIMIT 10",
        "generation_time": 2.948002576828003,
        "execution_time": 0.0013358592987060547,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": false,
        "error": "Query cannot conclude with WITH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (i:Incident) \nWHERE i.severity = 'high' OR i.severity = 'critical' \nWITH collect(i) AS problematic_incidents\nUNWIND problematic_incidents AS pi\nOPTIONAL MATCH (p:Person)-[:ALLOCATED_TO]->(project)<-[:RESPONSIBLE_FOR]-(policy)-[:RESPONSIBLE_FOR]->(team)\nWHERE team.name IN [t IN collect(team) WHERE exists(pi)]\nWITH pi, collect(team) AS affected_teams\nUNWIND affected_teams WITH pi, team\nRETURN pi.severity AS incident_severity, team.name AS team_name, collect({property: key, value: val} FOR (prop,val) IN keys(team)|prop AND val IS NOT NULL) AS team_details LIMIT 10",
        "generation_time": 4.601538419723511,
        "execution_time": 0.0016179084777832031,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or AS line: 8, column: 23, offset: 379 errCtx: UNWIND affected_teams WITH pi, team errCtxOffset: 22",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.category CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name, p.email, p.department, p.location, p.timezone",
        "generation_time": 1.8349804878234863,
        "execution_time": 0.001552581787109375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(person)<-[:MEMBER_OF {role: 'critical'}]-(team)\n  WITH team.id AS project_id, collect(person.id) AS critical_team_members\n  MATCH (team_member:Person)-[:REPORTS_TO*1..]->(manager:Person)\n  WITH project_id, critical_team_members, count(distinct manager) AS bus_factor\n  RETURN project_id, bus_factor LIMIT 10",
        "generation_time": 2.9004645347595215,
        "execution_time": 0.004859209060668945,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF]->(t)\nWHERE m.role = 'Employee' AND NOT EXISTS(\n  MATCH (m)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'Compliance Training' OR toLower(s.description) CONTAINS toLower('compliance training')\n)\nRETURN t.name AS Team, count(DISTINCT m) AS EmployeesWithoutTraining, collect({name: m.name, department: m.department}) AS Members WITHOUT POLICY TRAINING\nLIMIT 10",
        "generation_time": 3.8834524154663086,
        "execution_time": 0.0017499923706054688,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 6, column: 14, offset: 166 errCtx:   MATCH (m)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'Compliance Trainin... errCtxOffset: 13",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "WITH (p:Person)-[:HAS_SKILL]->(s:Skill)\nUNWIND apoc.coll.toList(p) as person\nOPTIONAL MATCH (team:Team)-[r:MEMBER_OF]->(person) WHERE NOT r.is_lead\nWITH person, collect({skill: s.name, count: size((p)-[:HAS_SKILL]->(s))}) AS skillsPerPerson\nWHERE size(skillsPerPerson) = 1 AND toLower(skillsPerPerson[0].skill) CONTAINS toLower('unique skill')\nRETURN person.name AS Person, skillsPerPerson[0].skill AS Skill, count(skillsPerPerson) AS ExclusiveSkillCount\nLIMIT 10",
        "generation_time": 3.9660542011260986,
        "execution_time": 0.001260519027709961,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "WITH clause projections must be aliased",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100",
        "generation_time": 2.950935125350952,
        "execution_time": 0.0015616416931152344,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.id NOT IN (SELECT id FROM Person WHERE id IN (\n    MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\n    RETURN m.id\n))\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
        "generation_time": 3.1441266536712646,
        "execution_time": 0.0012485980987548828,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'd': expected IN, IS NULL or IS NOT NULL line: 2, column: 28, offset: 98 errCtx: WHERE p.id NOT IN (SELECT id FROM Person WHERE id IN ( errCtxOffset: 27",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.id, p.name, p.email, t.name AS TeamName LIMIT 100",
        "generation_time": 1.5070240497589111,
        "execution_time": 0.0045359134674072266,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 87
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 26,
    "execution_success": 13,
    "has_results": 4,
    "pattern_matches": 9,
    "avg_generation_time": 3.110423458947076,
    "avg_execution_time": 0.0038198276802345558,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 48.148148148148145
}