{
  "evaluation_date": "2025-06-22T21:52:00.693788",
  "models_evaluated": [
    "mistral:7b",
    "codeqwen:7b",
    "granite-code:8b",
    "phi4:14b",
    "granite3.3:8b",
    "granite3.3:8b-largectx"
  ],
  "total_test_queries": 27,
  "results": [
    {
      "model": "mistral:7b",
      "timestamp": "2025-06-22T21:43:43.077199",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email",
            "generation_time": 7.686687231063843,
            "execution_time": 0.002262115478515625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.name",
            "generation_time": 0.7416253089904785,
            "execution_time": 0.001997232437133789,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.department, p.role, p.seniority",
            "generation_time": 1.0875256061553955,
            "execution_time": 0.003560781478881836,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 29
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'Engineer' AND p.seniority = 'Senior'\nAND (p)-[:HAS_SKILL]->(sk:Skill {name: 'Python'})\nAND (p)-[:HAS_SKILL]->(sk2:Skill {name: 'React'})\nRETURN p.name, p.email, sk.name, sk2.name",
            "generation_time": 2.1647348403930664,
            "execution_time": 0.0016214847564697266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias 'p'",
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (p:Policy)\nWHERE p.category = 'Security' AND p.severity = 'Critical' AND YEAR(p.updated_at) = YEAR(date())\nRETURN p.name, p.category, p.description, p.updated_at",
            "generation_time": 1.5371379852294922,
            "execution_time": 0.0013492107391357422,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'YEAR'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWHERE count(p) > 10\nRETURN t.name, count(p)",
            "generation_time": 1.2838685512542725,
            "execution_time": 0.0015358924865722656,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Invalid use of aggregating function 'count'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.department <> ''\nWITH DISTINCT p.department as dep, COUNT(p) as count\nRETURN dep, count",
            "generation_time": 1.2016184329986572,
            "execution_time": 0.0019540786743164062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (dep:Department)-[:MEMBER_OF*]->(team:Team)\nWITH COUNT(DISTINCT team.id) as teamCount, dep.name AS departmentName\nRETURN departmentName, AVG(COUNT(DISTINCT team.id)) as avgTeamSize;",
            "generation_time": 1.667440414428711,
            "execution_time": 0.0014455318450927734,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'team' not defined",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.location IS NOT NULL\nWITH p.location AS location, p.seniority AS seniority\nGROUP BY location, seniority\nORDER BY COUNT(*) DESC\nRETURN location, seniority, COUNT(*)",
            "generation_time": 1.4925823211669922,
            "execution_time": 0.0015053749084472656,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'G': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 1, offset: 100 errCtx: GROUP BY location, seniority errCtxOffset: 0",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (dataTeam: Team {department: 'Data'})<-[:REPORTS_TO*1..]-(p:Person)\nRETURN DISTINCT p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10;",
            "generation_time": 2.1555593013763428,
            "execution_time": 0.0017397403717041016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project) WHERE proj.type = 'customer'\nOPTIONAL MATCH (proj)-[:RESPONSIBLE_FOR]->(pol:Policy)\nRETURN DISTINCT pol.name, pol.category, pol.description, pol.severity",
            "generation_time": 1.7907650470733643,
            "execution_time": 0.0017426013946533203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:WORKS_WITH]->(cli:Client)\nWHERE p.role = 'Engineer' AND cli.industry CONTAINS 'financial'\nRETURN DISTINCT p.name, p.email",
            "generation_time": 1.657585859298706,
            "execution_time": 0.002293109893798828,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH p=(j:Person {seniority:'Junior'})-[:REPORTS_TO*]->(ceo:Person {role:'CEO'})\nRETURN distinct(p) ORDER BY length(p)-1;",
            "generation_time": 1.345952033996582,
            "execution_time": 0.0017292499542236328,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (team:Team {name: 'Security'})-[:RESPONSIBLE_FOR]->(policy:Policy)\nRETURN DISTINCT policy.id AS PolicyID, policy.name AS PolicyName, policy.category AS Category, policy.description AS Description\nLIMIT 10",
            "generation_time": 1.5741124153137207,
            "execution_time": 0.001575469970703125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person {department:'Product'})-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]-(team:Team)-[:MEMBER_OF {role:'Engineer', is_lead: false}]->(p2:Person)\nRETURN p1, proj, team, p2;",
            "generation_time": 1.926908016204834,
            "execution_time": 0.0018687248229980469,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH p=(person1)-[:REPORTS_TO]->(person2) WHERE id(person1) <> id(person2) AND id(person2) = id(person1:Person) RETURN person1.name, person1.email, person2.name, person2.email",
            "generation_time": 1.5901851654052734,
            "execution_time": 0.001669168472290039,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Type mismatch: expected Node, Edge, or Null but was Boolean",
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nMATCH (t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill)\nWHERE NOT (t1)-[:MEMBER_OF]->(p2) AND s1 <> s2\nRETURN t1.name, collect(distinct s1.name) as skills1, count(DISTINCT p1) as teamSize1, t2.name, collect(distinct s2.name) as skills2, count(DISTINCT p2) as teamSize2\nORDER BY count(DISTINCT p1) DESC, count(DISTINCT p2) DESC LIMIT 10;",
            "generation_time": 4.058222532272339,
            "execution_time": 1.009082317352295,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Query timed out",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(pm:Person)<-[:HAS_SKILL]-(sk:Skill),\n       (proj_skills:Skill)-[:REQUIRED_BY]->(p)\nWHERE NOT (pm)-[:HAS_SKILL]->(proj_skills)\nRETURN sk.name AS SkillNeeded, count(distinct pm.email) as TeamMembersCount, COALESCE(count((pm)-[:HAS_SKILL]->(sk)), 0) as TeamMembersWithSkill\nORDER BY TeamMembersCount - TeamMembersWithSkill DESC\nLIMIT 10;",
            "generation_time": 3.1144864559173584,
            "execution_time": 0.0021047592163085938,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person) WHERE p.seniority > 2 OR p.role IN ['Manager', 'Director'] OR p.department = 'Executive' RETURN p.name, p.email, p.seniority, p.role, p.department ORDER BY p.seniority DESC LIMIT 10",
            "generation_time": 1.80586576461792,
            "execution_time": 0.0017232894897460938,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'problematic'\nWITH DISTINCT p.department AS department, COUNT(DISTINCT p) as count\nORDER BY count DESC\nRETURN department, count",
            "generation_time": 1.6572065353393555,
            "execution_time": 0.0018079280853271484,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.role CONTAINS 'AI' OR ANY(skill in p.skills WHERE skill.name = 'AI')\nRETURN p.name, p.email",
            "generation_time": 1.334409475326538,
            "execution_time": 0.0018625259399414062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(criticalProject:Project {priority: 'critical'})<-[:MEMBER_OF {is_lead: false}]-(team:Team)\nWITH team, count(DISTINCT p) AS numberOfPeople\nOPTIONAL MATCH (p)-[:REPORTS_TO]->(manager)\nWITH team, numberOfPeople, COUNT(DISTINCT manager) AS numberOfManagers\nRETURN team.name as CriticalProject, numberOfPeople as NumberOfTeamMembers, numberOfManagers as NumberOfManagers, numberOfManagers / numberOfPeople as BusFactor\nORDER BY numberOfPeople DESC LIMIT 5",
            "generation_time": 3.450801372528076,
            "execution_time": 0.0020017623901367188,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)<-[:RESPONSIBLE_FOR]-(p:Policy)\nWHERE p.type = 'Training' AND NOT (t)-[:MEMBER_OF {role:'Trainer'}->(g:Group))\nWITH t, collect(DISTINCT p.name) as required_policies\nMATCH (t)-[:RESPONSIBLE_FOR]->(c:Compliance)\nRETURN t.name AS team_name, required_policies, c.type AS compliance_type\nLIMIT 10;",
            "generation_time": 2.8482162952423096,
            "execution_time": 0.0014159679412841797,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '-': expected ']' line: 2, column: 67, offset: 112 errCtx: WHERE p.type = 'Training' AND NOT (t)-[:MEMBER_OF {role:'Trainer'}->(g:Group)) errCtxOffset: 66",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role:'teamMember'}]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n       (p1)-[:HAS_SKILL]->(s) WHERE count((p2)-[:HAS_SKILL]->(s)) = 1\nRETURN p1.name, s.name, count(p1) as count\nLIMIT 10;",
            "generation_time": 2.2388973236083984,
            "execution_time": 0.001363992691040039,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Invalid use of aggregating function 'count'",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
            "generation_time": 1.821345567703247,
            "execution_time": 0.0017719268798828125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Data'\nOPTIONAL MATCH (p)-[:MEMBER_OF {role: 'X'}]->(t:Team) WITH COUNT(DISTINCT p) as total_data_team_members, COUNT(DISTINCT t) as total_teams\nWHERE total_data_team_members = total_teams AND NOT (p)-[:MEMBER_OF {role: 'X'}]->()\nRETURN p.name, p.email, p.role, p.seniority, p.location, t.name as team_name;",
            "generation_time": 3.0978593826293945,
            "execution_time": 0.0016956329345703125,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'p' not defined",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name, t.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
            "generation_time": 1.869084358215332,
            "execution_time": 0.0052700042724609375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 17,
        "has_results": 3,
        "pattern_matches": 8,
        "avg_generation_time": 2.1555808738425926,
        "avg_execution_time": 0.03925740277325666,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 50.92592592592593
    },
    {
      "model": "codeqwen:7b",
      "timestamp": "2025-06-22T21:44:42.341716",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person {role: 'CTO'}) RETURN p.name AS Name, p.email AS Email, p.department AS Department, p.location AS Location, p.timezone AS Timezone, p.hire_date AS HireDate;",
            "generation_time": 10.074345588684082,
            "execution_time": 0.0030384063720703125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'Engineering' RETURN t.name",
            "generation_time": 0.745464563369751,
            "execution_time": 0.0021216869354248047,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 4
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "Match (o:Office) where o.name = 'Berlin'\nMatch (p:Person)-[:WORKS_AT]->(o)\nReturn p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone",
            "generation_time": 1.6699097156524658,
            "execution_time": 0.002572774887084961,
            "syntax_valid": false,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE s.name IN ['Python', 'React'] AND p.role = 'Engineer' AND p.seniority = 'Senior'\nRETURN p.name, p.email",
            "generation_time": 1.613337755203247,
            "execution_time": 0.0018901824951171875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (p:Policy)-[:RESPONSIBLE_FOR]->(t:Team)-[:IS_CRITICAL]->()\nWHERE p.updated_at >= datetime({year: 2021})\nRETURN p, t",
            "generation_time": 1.4923300743103027,
            "execution_time": 0.0014755725860595703,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'datetime'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team) WHERE size([(p:Person)-[:MEMBER_OF]->(t)]) > 10 RETURN t, [(p:Person)-[:MEMBER_OF]->(t)] AS teamMembers",
            "generation_time": 1.3517484664916992,
            "execution_time": 0.0017232894897460938,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(p:Person)-[:MEMBER_OF]->(t)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nRETURN t.department, count(*) as total_employees\nORDER BY total_employees DESC",
            "generation_time": 1.22701096534729,
            "execution_time": 0.0021522045135498047,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 11
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team)\nRETURN avg(size([p IN t.members | p])) AS AvgTeamSize",
            "generation_time": 0.8734855651855469,
            "execution_time": 0.001981973648071289,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person) WITH p.location AS location, p.seniority AS seniority\nCALL apoc.agg.collect(seniority)\nRETURN location, collect(DISTINCT size(seniority)) AS distribution\n\nExplanation: \nThis query first retrieves the 'location' and 'seniority' properties for each person in the graph. It then uses a call to apoc.agg.collect() to group these values by location and count the number of people with each unique seniority level for each location. The result is returned as a map where the keys are locations and the values are lists containing the distribution of seniority levels within each location.",
            "generation_time": 3.315382242202759,
            "execution_time": 0.001886129379272461,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'E': expected ',', ORDER BY, SKIP, LIMIT, ';', call clause or a clause line: 5, column: 1, offset: 172 errCtx: Explanation:  errCtxOffset: 0",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager:Person)<-[:MEMBER_OF {role: 'Data Team Lead'}]-(t:Team)\nRETURN p.name, p.email, t.name, manager.name",
            "generation_time": 1.4629487991333008,
            "execution_time": 0.0017495155334472656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWHERE t.focus = 'customer'\nWITH COLLECT(DISTINCT p) AS team_leads\nCALL {\n  WITH team_leads\n  UNION\n  WITH team_leads\n  MATCH (g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy)\n  WHERE g IN team_leads\n  RETURN COLLECT(DISTINCT pol) AS policies\n}\nRETURN DISTINCT policies",
            "generation_time": 2.8314034938812256,
            "execution_time": 0.0014271736145019531,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Found 1 UNION clauses but only 1 RETURN clauses.",
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:MEMBER_OF]->(t:Team)\nWHERE t.department = 'Finance' AND e.role IN ['Engineer', 'Technical Leader']\nRETURN e, t",
            "generation_time": 1.3069648742675781,
            "execution_time": 0.0018112659454345703,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH (jdev:Person {role: 'Junior Developer'})\nMATCH path = shortestPath((jdev)-[:REPORTS_TO*]->(ceo:Person {role: 'CEO'}))\nRETURN nodes(path) AS reporting_chain;",
            "generation_time": 5.033296585083008,
            "execution_time": 0.0014772415161132812,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "SELECT \n  p1.name AS 'Security Team Member', \n  p2.name AS 'Compliance Policy Holder'\nFROM \n  Person p1, Person p2\nWHERE \n  (p1)-[:MEMBER_OF]->(:Team {name: 'security'}) AND \n  (p2)-[:HAS_SKILL]->(:Skill {category: 'compliance', type: 'policy'})\n\nThis query retrieves the names of security team members and their corresponding compliance policy holders by matching people who are members of the 'security' team and have the 'compliance' skill with type 'policy'.",
            "generation_time": 2.9775290489196777,
            "execution_time": 0.0014815330505371094,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT  errCtxOffset: 2",
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(team1:Team {name: 'product'})<-[:REPORTS_TO]-(lead1:Person),\n      (p2:Person)-[:MEMBER_OF]->(team2:Team {name: 'engineering'})<-[:REPORTS_TO]-(lead2:Person)\nWHERE team1.department = team2.department\nRETURN lead1.name AS Product_Lead, lead2.name AS Engineering_Lead",
            "generation_time": 4.782034635543823,
            "execution_time": 0.0017592906951904297,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (a)-[r*]->(b) WHERE a = b RETURN DISTINCT r",
            "generation_time": 0.7254774570465088,
            "execution_time": 1.0018720626831055,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Query timed out",
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nWHERE NOT EXISTS ((t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill))\nRETURN t1.name AS Team, COUNT(DISTINCT s1.id) AS Unique_Skills\nORDER BY Unique_Skills DESC",
            "generation_time": 4.975361108779907,
            "execution_time": 0.0017158985137939453,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill)'",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "SELECT DISTINCT p.id AS person_id, s.name AS skill_name\nFROM Person p\nJOIN Allocation a ON p.id = a.person_id\nJOIN Projects prj ON a.project_id = prj.id\nLEFT JOIN Skills sk ON sk.project_id = prj.id\nWHERE sk.id IS NULL",
            "generation_time": 1.9518423080444336,
            "execution_time": 0.001519918441772461,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT DISTINCT p.id AS person_id, s.name AS skill_name errCtxOffset: 2",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.role IN ['Manager', 'Lead', 'Senior Manager'] OR p.department IN ['Marketing', 'Finance', 'HR', 'IT', 'Sales', 'Operations', 'Customer Support']\nRETURN p.name, p.email, p.department, p.role",
            "generation_time": 1.8059499263763428,
            "execution_time": 0.004950761795043945,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 105
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (i:Incident) WHERE i.severity > 3 AND i.status = 'Open' RETURN i.name, i.description, i.affected_regions, i.created_at;",
            "generation_time": 2.8007442951202393,
            "execution_time": 0.0018138885498046875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)\nWHERE any(s IN [:TEAM, :GROUP] WHERE s.department = 'Artificial Intelligence' OR s.focus CONTAINS 'AI') AND p.email <> ''\nRETURN DISTINCT p.name AS person_name, p.email AS email",
            "generation_time": 1.6826844215393066,
            "execution_time": 0.0017139911651611328,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 17, offset: 33 errCtx: WHERE any(s IN [:TEAM, :GROUP] WHERE s.department = 'Artificial Intelligence'... errCtxOffset: 16",
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Project)\nWHERE p.type = 'critical' AND p.priority > 5\nWITH collect(p) as critical_projects\nUNWIND critical_projects as cp\nMATCH (p:Person)-[:ALLOCATED_TO]->(cp)\nRETURN COUNT(DISTINCT p), COUNT(DISTINCT p)/SIZE(critical_projects)",
            "generation_time": 5.5343708992004395,
            "execution_time": 0.002154111862182617,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol)\nWITH t, pol\nWHERE NOT (t)-->(pol)\nUNION ALL\nMATCH (p:Person)-[:MEMBER_OF]->(g:Group)\n-[:RESPONSIBLE_FOR]->(pol)\nWHERE NOT p-->(g)-[:HAS_SKILL]->(:Skill)-[:CATALOGUE_OF]->(pol)\nRETURN DISTINCT t, g, p",
            "generation_time": 5.091428756713867,
            "execution_time": 0.002242565155029297,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '>': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 7, column: 14, offset: 166 errCtx: WHERE NOT p-->(g)-[:HAS_SKILL]->(:Skill)-[:CATALOGUE_OF]->(pol) errCtxOffset: 13",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "SELECT p1.name, s1.name FROM Person p1 JOIN Skill s1 ON p1.id = s1.person_id LEFT JOIN (SELECT p2.id FROM Person p2 JOIN Skill s2 ON p2.id = s2.person_id WHERE p2.department IS NULL) AS p3 ON p1.id = p3.id WHERE p3.id IS NULL",
            "generation_time": 1.9441633224487305,
            "execution_time": 0.0014688968658447266,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT p1.name, s1.name FROM Person p1 JOIN Skill s1 ON p1.id = s1.person_id ... errCtxOffset: 2",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person) WHERE LOWER(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone",
            "generation_time": 1.4792656898498535,
            "execution_time": 0.0016751289367675781,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'LOWER'",
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (t:Team {name: 'data'})<-[:MEMBER_OF]->(p:Person)\nWITH p\nCALL apoc.create.relationship('team', 'DEPARTED', {}, p) YIELD rel\nRETURN rel",
            "generation_time": 1.3725175857543945,
            "execution_time": 0.0014829635620117188,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Procedure `apoc.create.relationship` is not registered",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name AS lead_of\nORDER BY lead_of\nLIMIT 10",
            "generation_time": 3.250568389892578,
            "execution_time": 0.0046045780181884766,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 23,
        "execution_success": 13,
        "has_results": 6,
        "pattern_matches": 9,
        "avg_generation_time": 2.717465427186754,
        "avg_execution_time": 0.03910233356334545,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.0,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 47.22222222222222
    },
    {
      "model": "granite-code:8b",
      "timestamp": "2025-06-22T21:45:56.770914",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (ctos:Person {role:\"cto\"}) \nRETURN ctos",
            "generation_time": 14.948424816131592,
            "execution_time": 0.0016350746154785156,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team {department: 'engineering'})\nRETURN t",
            "generation_time": 0.6287136077880859,
            "execution_time": 0.00164031982421875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Berlin' OR p.location = 'Berlin' RETURN p.name, p.email, p.role, p.seniority, p.timezone, p.manager_id, p.hire_date LIMIT 10",
            "generation_time": 1.6574163436889648,
            "execution_time": 0.001953601837158203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person {role: 'ENGINEER', seniority: 'SENIOR'})\nWHERE toLower(p.name) CONTAINS 'python' AND toLower(p.name) CONTAINS 'react'\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
            "generation_time": 2.3953278064727783,
            "execution_time": 0.001996755599975586,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.category = 'security' \nAND pol.severity = 'critical'\nAND pol.updated_at >= date('2023-01-01')\nAND pol.updated_at <= date('2023-12-31')\nRETURN pol\nLIMIT 1000",
            "generation_time": 1.9618804454803467,
            "execution_time": 0.001495361328125,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team) WHERE t.name = 'X' AND size((t)-[:MEMBER_OF]-(p:Person)) > 10 RETURN t.id, t.name",
            "generation_time": 1.1931612491607666,
            "execution_time": 0.0014843940734863281,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t)-[:MEMBER_OF]-(p:Person)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.department IS NOT NULL\nWITH p.department, COUNT(p) AS num_people\nRETURN department, num_people",
            "generation_time": 1.0663800239562988,
            "execution_time": 0.0014066696166992188,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "WITH clause projections must be aliased",
            "result_count": 0
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team)\nRETURN AVG(size(t)) AS avg_team_size",
            "generation_time": 0.7710928916931152,
            "execution_time": 0.0013604164123535156,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Type mismatch: expected List, String, or Null but was Node",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority IS NOT NULL AND p.location IS NOT NULL\nWITH p.seniority, p.location\nORDER BY p.seniority\nRETURN p.location as Location, COUNT(p) AS NumberOfEmployees",
            "generation_time": 1.5462157726287842,
            "execution_time": 0.0013544559478759766,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "WITH clause projections must be aliased",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (t:Team {name: 'Data Team'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.id, p.name, p.email\nLIMIT 10",
            "generation_time": 1.315248727798462,
            "execution_time": 0.0016698837280273438,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity) WHERE pol.category = 'Customer' OR pol.name CONTAINS 'Customer' RETURN pol, entity LIMIT 100",
            "generation_time": 1.2535414695739746,
            "execution_time": 0.005589962005615234,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "Match (p:Person) \nWhere p.department = 'Engineering' \nAnd lower(p.name) CONTAINS 'financial' \nReturn p.name, p.email Limit 10",
            "generation_time": 1.2940714359283447,
            "execution_time": 0.001508951187133789,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH (ceo:Person {role:'CEO'})<-[:REPORTS_TO*]-(junior:Person {role:'Junior Developer'}) \nRETURN ceo.name, junior.name;",
            "generation_time": 1.4735267162322998,
            "execution_time": 0.0015583038330078125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:RESPONSIBLE_FOR]-(pol:Policy)\nRETURN pol",
            "generation_time": 1.0889875888824463,
            "execution_time": 0.0017206668853759766,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (t:Team {name: 'Product'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE p.department = 'Engineering'\nRETURN DISTINCT p.name, p.email\nLIMIT 10",
            "generation_time": 1.4992475509643555,
            "execution_time": 0.001926422119140625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH\n  (personA:Person {name: 'Alice'})-[:REPORTS_TO*1..]->(personB:Person)\nWHERE\n  personA.id = personB.id\nRETURN\n  personA,\n  personB",
            "generation_time": 1.4251916408538818,
            "execution_time": 0.0017125606536865234,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (teamA:Team)\nWHERE NOT EXISTS {\n  MATCH (teamB:Team)\n  WHERE teamA <> teamB\n  AND ALL(member IN teamA.members | NOT member IN teamB.members)\n}\nRETURN teamA.name AS TeamName, teamA.id AS TeamID",
            "generation_time": 1.743001937866211,
            "execution_time": 0.0013391971588134766,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 3, column: 9, offset: 46 errCtx:   MATCH (teamB:Team) errCtxOffset: 8",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project {name: 'X'})\n-[:ALLOCATED_TO]->(t:Team)\nWHERE NOT (t)-[:HAS_SKILL]->(s:Skill)\nRETURN t.name, s.name AS skill_gap",
            "generation_time": 1.503288745880127,
            "execution_time": 0.0014004707336425781,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias 's'",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person) WHERE p.role IN ('Manager', 'Senior Engineer') OR p.seniority > 5 RETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
            "generation_time": 1.9300692081451416,
            "execution_time": 0.0015723705291748047,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or ')' line: 1, column: 44, offset: 43 errCtx: ...(p:Person) WHERE p.role IN ('Manager', 'Senior Engineer') OR p.seniority >... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
            "generation_time": 0.84891676902771,
            "execution_time": 0.0014393329620361328,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": false,
            "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category = 'X' OR pol.name CONTAINS 'X'",
            "generation_time": 0.8440017700195312,
            "execution_time": 0.0015382766723632812,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": false,
            "error": "Query cannot conclude with MATCH (must be a RETURN clause, an update clause, a procedure call or a non-returning subquery)",
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH(p:Project {type: 'critical'})<-[:ALLOCATED_TO]-(m:Person) \nWITH COUNT(DISTINCT m.name) AS BusFactor \nRETURN BusFactor",
            "generation_time": 1.2310552597045898,
            "execution_time": 0.0015926361083984375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (pol:Policy {name: 'required_policy_training'})\nOPTIONAL MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol)\nWHERE t IS NULL\nRETURN t.name, t.department\nLIMIT 10",
            "generation_time": 1.447702169418335,
            "execution_time": 0.0015954971313476562,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p1:Person)\nOPTIONAL MATCH (t:Team)-[:MEMBER_OF]-(p2:Person)\nWHERE p1 <> p2\nWITH p1, COLLECT(DISTINCT p2.name) AS skillsilo\nRETURN p1.name, skillsilo\nLIMIT 10\n\n\nThis query will return the name of the team lead and the names of the individuals who do not have the same skills as the lead. It uses OPTIONAL MATCH to find individuals who are not team leads, and then uses COLLECT to create a list of the skills possessed by each individual. Finally, it returns only those individuals who do not share the same skills as the lead.",
            "generation_time": 3.8976547718048096,
            "execution_time": 0.0013952255249023438,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'T': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 9, column: 1, offset: 218 errCtx: This query will return the name of the team lead and the names of the individ... errCtxOffset: 0",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person) \nWHERE p.name CONTAINS 'John' OR p.name CONTAINS 'Jon' \nRETURN p",
            "generation_time": 1.0015497207641602,
            "execution_time": 0.0060884952545166016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 36
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name AS person_name, t.name AS team_name, p.email AS person_email\nLIMIT 10",
            "generation_time": 1.554410457611084,
            "execution_time": 0.0016868114471435547,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team {name: 'X'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email\nLIMIT 10",
            "generation_time": 1.2243895530700684,
            "execution_time": 0.0015704631805419922,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 24,
        "execution_success": 15,
        "has_results": 4,
        "pattern_matches": 6,
        "avg_generation_time": 1.9534988315017134,
        "avg_execution_time": 0.0018975028285273799,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.0,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 45.37037037037037
    },
    {
      "model": "phi4:14b",
      "timestamp": "2025-06-22T21:46:49.568034",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person {role: 'CTO'})\nRETURN p.id AS id, p.name AS name, p.email AS email, p.department AS department, p.location AS location\nLIMIT 1;",
            "generation_time": 26.870379209518433,
            "execution_time": 0.002990245819091797,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) \nWHERE toLower(t.department) = 'engineering' \nRETURN t.id, t.name\nLIMIT 1000",
            "generation_time": 1.7649166584014893,
            "execution_time": 0.001880645751953125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 4
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.id, p.name, p.email, p.department, p.role, p.location\nLIMIT 1000",
            "generation_time": 2.3057103157043457,
            "execution_time": 0.0024569034576416016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill {name: 'Python'}),\n      (p)-[:HAS_SKILL]->(s2:Skill {name: 'React'})\nWHERE p.role = 'Engineer' AND toLower(p.seniority) = 'senior'\nRETURN DISTINCT p.id, p.name, p.email, collect(s1.name) AS skills\nLIMIT 100",
            "generation_time": 3.8762130737304688,
            "execution_time": 0.0019402503967285156,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy {severity: 'critical'})\nWHERE pol.category = 'security'\nAND pol.updated_at >= date('2023-01-01')\nRETURN pol.id AS policy_id, pol.name AS policy_name, pol.description AS policy_description, pol.updated_at AS updated_date\nORDER BY pol.updated_at DESC",
            "generation_time": 3.0491700172424316,
            "execution_time": 0.0015742778778076172,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWITH t, COUNT(p) AS memberCount\nWHERE memberCount > 10\nRETURN t.name AS TeamName, memberCount\nORDER BY memberCount DESC;",
            "generation_time": 2.7324349880218506,
            "execution_time": 0.0027048587799072266,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 26
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nWITH p.department AS dept, COUNT(p) AS num_people\nRETURN DISTINCT toLower(dept) AS department, num_people\nORDER BY num_people DESC;",
            "generation_time": 2.130910873413086,
            "execution_time": 0.001973390579223633,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWITH t.department AS department, COUNT(p) AS teamSize\nRETURN AVG(teamSize) AS averageTeamSize",
            "generation_time": 2.1466903686523438,
            "execution_time": 0.0019826889038085938,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nWITH p.seniority AS seniority, p.location AS location\nWHERE seniority IS NOT NULL AND location IS NOT NULL\nRETURN toLower(location) AS location, toLower(seniority) AS seniority, COUNT(*) AS count\nORDER BY location, seniority\nLIMIT 1000;",
            "generation_time": 3.256255865097046,
            "execution_time": 0.004765033721923828,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 84
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (manager:Person)-[:REPORTS_TO]->(reporter:Person),\n      (dataTeamMember:Person)-[:MEMBER_OF {role: 'member'}]->(:Team {name: 'Data'})\nWHERE manager.id = dataTeamMember.id \nRETURN reporter.name, reporter.email, reporter.department, reporter.role, reporter.seniority\nLIMIT 1000",
            "generation_time": 3.54351806640625,
            "execution_time": 0.0031938552856445312,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy), \n      (person:Person)-[:MEMBER_OF]->(team),\n      (person)-[:ALLOCATED_TO]->(project:Project)\nWHERE project.type = 'Customer'\nRETURN DISTINCT policy.id AS PolicyID, policy.name AS PolicyName, policy.description AS Description",
            "generation_time": 3.326108455657959,
            "execution_time": 0.0021779537200927734,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:ALLOCATED_TO]->(p:Project)<-[:ALLOCATED_TO]-(c:Client)\nWHERE e.role = 'Engineer' AND toLower(c.industry) = 'financial'\nRETURN DISTINCT e.id, e.name, e.email, e.department, e.location \nLIMIT 100",
            "generation_time": 3.138731002807617,
            "execution_time": 0.0019598007202148438,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = (ceo:Person)-[:REPORTS_TO*]->(dev:Person)\nWHERE ceo.role CONTAINS 'CEO' AND dev.seniority CONTAINS 'Junior'\nRETURN path, [node IN nodes(path) | node.name] AS reportingChain\nORDER BY length(path) ASC LIMIT 1",
            "generation_time": 3.142113208770752,
            "execution_time": 0.001934051513671875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (securityTeam:Team {name: 'Security'})<-[:MEMBER_OF]-(person:Person)-[:MEMBER_OF]->(team:Team),\n      (compliance:Compliance)<-[:RESPONSIBLE_FOR]-(responsibleEntity)\nWHERE team = securityTeam OR responsibleEntity IN [group IN person.memberOf WHERE type(group) = 'Group']\nRETURN DISTINCT securityTeam, compliance, responsibleEntity, person\nORDER BY securityPerson.name ASC\nLIMIT 100",
            "generation_time": 4.3151116371154785,
            "execution_time": 0.0013992786407470703,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'securityPerson' not defined",
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (prodTeam:Team {name: 'Product'}),\n      (engDept:Department {name: 'Engineering'}),\n      (person:Person)-[:MEMBER_OF]->(team)\nWHERE toLower(team.name) = toLower(prodTeam.name)\n  AND person.department = engDept.name\nWITH prodTeam, team, person\nMATCH (person)-[r]-()\nRETURN DISTINCT person.id AS PersonID,\n                person.name AS PersonName,\n                collect(DISTINCT type(r)) AS Connections,\n                collect(DISTINCT startNode(r).name) AS RelatedEntities\nORDER BY person.name\nLIMIT 50",
            "generation_time": 5.550397634506226,
            "execution_time": 0.0029859542846679688,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH path=(p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE id(p1) = id(p2) AND length(path) > 1\nRETURN DISTINCT p1.name AS PersonName, p1.email AS Email, \n                [node in nodes(path)[1..-1] | node.name] AS ReportingChain\nLIMIT 100",
            "generation_time": 3.65950083732605,
            "execution_time": 0.0021004676818847656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-[:HAS_SKILL]-(p2:Person),\n      (p1)-[:MEMBER_OF]->(t1:Team),\n      (p2)-[:MEMBER_OF]->(t2:Team)\nWHERE t1 <> t2\nWITH s, t1, COUNT(DISTINCT p2) AS other_count\nWHERE other_count = 0\nRETURN DISTINCT t1.name AS TeamName, COLLECT(s.name) AS UniqueSkills LIMIT 25;",
            "generation_time": 4.926423788070679,
            "execution_time": 0.13634228706359863,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project),\n      (proj)<-[:HAS_SKILL]-(requiredSkill:Skill),\n      (p)-[:HAS_SKILL]->(ownedSkill:Skill)\nWHERE NOT toLower(requiredSkill.name) = toLower(ownedSkill.name)\nWITH requiredSkill, proj, COUNT(p) AS missingCount\nORDER BY missingCount DESC\nRETURN proj.id AS project_id,\n       proj.name AS project_name,\n       requiredSkill.id AS skill_id,\n       requiredSkill.name AS skill_name,\n       missingCount\nLIMIT 10;",
            "generation_time": 6.04594087600708,
            "execution_time": 0.0019450187683105469,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager),\n      (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p)\nWHERE p.seniority IN ['Senior', 'Manager', 'Director'] OR p.role IN ['Lead']\nRETURN DISTINCT p.name AS Name, p.role AS Role, p.department AS Department, manager.name AS ManagerName\nLIMIT 100",
            "generation_time": 3.775721549987793,
            "execution_time": 0.0025687217712402344,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 20
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (i:Incident {severity: 'High', status: 'Open'})\nWITH i\nOPTIONAL MATCH (p:Person)-[:ALLOCATED_TO]->(prj:Project)<-[:ALLOCATED_TO]-(other:Person)\nWHERE prj.status = 'Delayed' OR prj.budget > prj.budget * 1.5\nWITH collect(distinct p) AS affected_people, i, prj\nOPTIONAL MATCH (p)-[:MEMBER_OF]->(t:Team), (t)<-[:MEMBER_OF]-(other)\nWHERE t.focus = 'Critical'\nWITH affected_people, i, prj, collect(distinct t) AS critical_teams\nOPTIONAL MATCH (g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy {severity: 'High'})\nRETURN \n    i.id AS incident_id,\n    i.description AS incident_description,\n    i.affected_regions AS regions,\n    size(affected_people) AS num_affected_people,\n    collect(DISTINCT p.name) AS affected_persons_names,\n    collect(DISTINCT prj.name) AS projects_with_issues,\n    critical_teams AS teams_involved,\n    pol.name AS high_severity_policies\nLIMIT 10",
            "generation_time": 10.195039987564087,
            "execution_time": 0.0017015933990478516,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'p' not defined",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name, p.email, p.department, p.role LIMIT 10",
            "generation_time": 2.0990383625030518,
            "execution_time": 0.001951456069946289,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (proj:Project {priority: 'critical'})<-[:ALLOCATED_TO]-(person:Person)\nWITH proj, person, COUNT(DISTINCT person) AS totalPeopleInProj\nMATCH path = (p1:Person)-[:ALLOCATED_TO]->(proj)<-[:ALLOCATED_TO]-(p2:Person)\nWHERE p1 <> p2\nWITH proj, COLLECT(p1) AS people, COLLECT(p2) AS pairedPeople\nUNWIND pairedPeople AS pair\nWITH proj, people, [x IN people WHERE NOT x IN pair | 1] AS singletons\nORDER BY SIZE(singletons) DESC\nRETURN proj.name AS ProjectName, LENGTH(SINGLE(singletons)) AS BusFactor\nLIMIT 1",
            "generation_time": 6.532413959503174,
            "execution_time": 0.001950979232788086,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'SINGLE'",
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t, pol, COLLECT(DISTINCT p) AS teamMembers\nWHERE NOT EXISTS {\n  MATCH (tm:Person)-[:HAS_SKILL {category: 'Training'}]->()\n  WHERE tm IN teamMembers AND toLower(pol.name) CONTAINS toLower('required')\n}\nRETURN DISTINCT t.id AS TeamID, t.name AS TeamName, pol.id AS PolicyID, pol.name AS PolicyName\nLIMIT 100;",
            "generation_time": 7.977476358413696,
            "execution_time": 0.0014636516571044922,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 9, offset: 148 errCtx:   MATCH (tm:Person)-[:HAS_SKILL {category: 'Training'}]->() errCtxOffset: 8",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n      (p1)-[:HAS_SKILL]->(s:Skill)\nWHERE p1 <> p2 AND NOT (p2)-[:HAS_SKILL]->(s)\nWITH t.name AS teamName, s.name AS skillName, p1\nRETURN DISTINCT t.name AS Team, s.name AS Skill, COLLECT(DISTINCT p1.name) AS UniqueIndividual\nORDER BY t.name, s.name;",
            "generation_time": 4.84447169303894,
            "execution_time": 0.0014994144439697266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'t' not defined",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\nWHERE toLower(p.name) IN ['john', 'jon']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100;",
            "generation_time": 2.8702824115753174,
            "execution_time": 0.0017333030700683594,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (team:Team {name: 'data'})\nOPTIONAL MATCH (member:Person)-[:MEMBER_OF]->(team)\nWITH COUNT(member) AS numMembers\nWHERE numMembers = 0\n\n// Check for projects with no allocated members from the data team\nMATCH (project:Project)<-[:ALLOCATED_TO]-(p:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN project.name AS ProjectName, COLLECT(DISTINCT p.name) AS CurrentMembers\n\nUNION ALL\n\n// Check for policies without responsible members from the data team\nMATCH (policy:Policy)<-[:RESPONSIBLE_FOR]-(entity)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN policy.name AS PolicyName, COLLECT(DISTINCT entity.name) AS ResponsibleMembers\n\nUNION ALL\n\n// Check for on-call schedules with no data team members\nMATCH (schedule:Schedule)<-[:ON_CALL]-(p:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN schedule.id AS ScheduleID, COLLECT(DISTINCT p.name) AS OnCallMembers\n\nUNION ALL\n\n// List current members of the data team for reference\nMATCH (member:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN member.name AS MemberName, team.name AS TeamName LIMIT 10",
            "generation_time": 11.830228328704834,
            "execution_time": 0.0015761852264404297,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "All sub queries in a UNION must have the same column names.",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.name AS TeamLeadName, t.name AS TeamName, p.department AS Department, p.role AS Role\nORDER BY p.name\nLIMIT 100",
            "generation_time": 2.7378854751586914,
            "execution_time": 0.003114461898803711,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 87
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 20,
        "has_results": 7,
        "pattern_matches": 8,
        "avg_generation_time": 5.134929074181451,
        "avg_execution_time": 0.007180249249493635,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.3333333333333333,
          "ambiguous_requests": 0.6666666666666666,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 57.407407407407405
    },
    {
      "model": "granite3.3:8b",
      "timestamp": "2025-06-22T21:49:08.406689",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role CONTAINS 'cto' \n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 1",
            "generation_time": 16.117371797561646,
            "execution_time": 0.0017266273498535156,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (p:Team)\n  WHERE TOLOWER(p.department) CONTAINS 'engineering'\n  RETURN p.id, p.name, p.department, p.focus, LIMIT 100",
            "generation_time": 1.3063321113586426,
            "execution_time": 0.0014445781707763672,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '1': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, AS, ',', ORDER BY, SKIP, LIMIT, ';', call clause or a clause line: 3, column: 53, offset: 120 errCtx:   RETURN p.id, p.name, p.department, p.focus, LIMIT 100 errCtxOffset: 52",
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE toLower(o.name) CONTAINS 'berlin' RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, o.name, o.city, o.country LIMIT 10",
            "generation_time": 1.9832448959350586,
            "execution_time": 0.0018124580383300781,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\n  WHERE p.role CONTAINS 'engineer' AND p.seniority = 'senior'\n  WITH p\n  MATCH (p)-[:HAS_SKILL]->(s:Skill)\n  WHERE s.name IN ['Python', 'React']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100;",
            "generation_time": 3.17498517036438,
            "execution_time": 0.0019783973693847656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy) \nWHERE pol.severity = 'critical' AND pol.category CONTAINS 'security' \nAND pol.updated >= date('now', '-1year')\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description, pol.updated \nLIMIT 100;",
            "generation_time": 1.9816336631774902,
            "execution_time": 0.0016379356384277344,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nWITH t, size((t)<-[:MEMBER_OF]-(:Person)) AS team_size\nRETURN DISTINCT t.name AS Team, team_size AS MemberCount LIMIT 100",
            "generation_time": 1.8473179340362549,
            "execution_time": 0.0014848709106445312,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.department AS Department, count(p) AS Number_of_People\n  LIMIT 100;",
            "generation_time": 1.0393524169921875,
            "execution_time": 0.0017189979553222656,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (d:Department)-[:HAS_TEAM]->(t:Team)\n  WITH d, size(filters(t)) as team_size\n  RETURN d.name AS Department, avg(team_size) AS AverageTeamSize LIMIT 10;",
            "generation_time": 1.5387482643127441,
            "execution_time": 0.0014123916625976562,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'filters'",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.location, collect(p.seniority) AS seniority_levels\n  ORDER BY seniority_levels DESC\n  LIMIT 10;",
            "generation_time": 1.2573790550231934,
            "execution_time": 0.002624034881591797,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\n  WHERE m.department CONTAINS 'data'\n  RETURN DISTINCT p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, m.id, m.name, m.email, m.department, m.role, m.seniority, m.location, m.timezone LIMIT 100",
            "generation_time": 2.659040927886963,
            "execution_time": 0.0017964839935302734,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)<-[:ALLOCATED_TO]-(p2:Project)\nWHERE p2.type CONTAINS 'customer'\nRETURN DISTINCT t.name AS Team, p.name AS Policy, p.category AS Category\nLIMIT 10;",
            "generation_time": 1.9107582569122314,
            "execution_time": 0.0015919208526611328,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:REPORTS_TO]->(p:Person)-[:WORKS_AT]->(o:Office)\n            <-[:ALLOWNED_BY] - (c:Client)\n  WHERE c.industry CONTAINS 'financial' AND e.role = 'engineer'\n  RETURN DISTINCT e.name, e.email, o.city, c.name AS client_name LIMIT 10;",
            "generation_time": 2.3840153217315674,
            "execution_time": 0.0023262500762939453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDevs, ceo\nOPTIONAL MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\nWHERE p IN juniorDevs AND m <> ceo\nWITH collect(p) AS developers, ceo, collect(m) AS managers\nRETURN ceo,collect(p) AS juniorDevelopers, collect(m) AS reportingChain \nLIMIT 10",
            "generation_time": 3.501835823059082,
            "execution_time": 0.0014214515686035156,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (secTeam:Team)-[:RESPONSIBLE_FOR]->(policy:Policy)<-[:MEMBER_OF {role: 'Security'}]-(member:Person)\nRETURN distinct secTeam.name AS Team, policy.name AS Policy, member.name AS Member;",
            "generation_time": 1.642915964126587,
            "execution_time": 0.0014984607696533203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role:'Product', department:'Product'}]->(pProductTeam:Team),\n      (pEngineering:Person)-[:MEMBER_OF {role:'Engineering', department:'Engineering'}]->(pEngineeringTeam:Team)\n      WHERE toLower(pProductTeam.name) CONTAINS 'product' AND toLower(pEngineeringTeam.name) CONTAINS 'engineering'\n      OPTIONAL MATCH (pProduct)-[:ALLOCATED_TO]->(pProject:Project)<-[:RESPONSIBLE_FOR]-(pPolicy:Policy),\n                   (pEngineering)-[:ALLOCATED_TO]->(pProject)<-[:RESPONSIBLE_FOR]-(pPolicy)\n      RETURN pProduct.name AS Product_Member_Name,\n             pEngineering.name AS Engineering_Member_Name,\n             pProductTeam.name AS Product_Team_Name,\n             pEngineeringTeam.name AS Engineering_Team_Name,\n             pProject.name AS Project_Name,\n             pPolicy.name AS Policy_Name\n      LIMIT 10;",
            "generation_time": 5.599105358123779,
            "execution_time": 0.001965045928955078,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(intermediate:Person)-[:REPORTS_TO]->(p2:Person)\nWHERE p1.id <> p2.id AND toLower(p1.name) = toLower(p2.name)\nRETURN p1, intermediate, p2 LIMIT 100",
            "generation_time": 1.9588642120361328,
            "execution_time": 0.0028765201568603516,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "WITH 'Team' as label\nMATCH (t1:label {name: 'Team'}), \n      (p1:Person)-[:MEMBER_OF {is_lead: true}]->(t1),\n      (p2:Person)-[:MEMBER_OF {is_lead: true}]->(other_team:Team) where t1 <> other_team\nWITH collect({team: t1, skills: apoc.proc.listFilter(apoc.acl.skillsOf(p1))}) as unique_teams,\n     collect({team: other_team, skills: apoc.proc.listFilter(apoc.acl.skillsOf(p2))}) as shared_teams\nUNWIND unique_teams AS ut\nWITH ut.team as uniqueTeam, apoc.mapOperation(ut.skills, 'toList', 'distinct') as uniqueSkills\nOPTIONAL MATCH (pt:Person)-[:MEMBER_OF]->(uniqueTeam)\nWITH uniqueTeam, collect(pt.id) as membersOfUniqueTeam\nMATCH (member:Person)-[:HAS_SKILL]->(s:Skill)\nWITH uniqueTeam, membersOfUniqueTeam, apoc.mapOperation(membersOfUniqueTeam, 'listToSet', 'unique') as distinctMemberIds, \n     collect({skill: s.name, count: size(filter(values(?member) IN APPLY [m IN apoc.colls.setMembers(distinctMemberIds, m) | apoc.acl.hasSkill(m, s.name)]) > 0)}) as skillCheck\nUNWIND skillCheck FOR skill IN skills\nWHERE NOT ANY(sc IN skill CHECK sc.count > 1)\nRETURN uniqueTeam.name AS Team_with_unique_skills ORDER BY Team_with_unique_skills LIMIT 10;",
            "generation_time": 9.367991209030151,
            "execution_time": 0.0018773078918457031,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '?': expected DISTINCT, '*', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name, an identifier or ')' line: 13, column: 56, offset: 849 errCtx: ...l: s.name, count: size(filter(values(?member) IN APPLY [m IN apoc.colls.se... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<--(:Team)\nWITH p, collect(teamMember.id) AS allocatedMembers\nMATCH (p)-[:REQUIRES]->(requiredSkill:Skill)\nOPTIONAL MATCH (teamMember)-[:HAS_SKILL]->(possessedSkill:Skill)\nWHERE NOT (possessedSkill.id IN requiredSkill.id) AND teamMember.id NOT IN [x IN range(0, size(allocatedMembers)-1) | allocatedMembers[x]]\nRETURN p.name AS project, requiredSkill.name AS skill_needed, collect(teamMember.name) AS team_members_without_skill\nORDER BY p.name; LIMIT 100",
            "generation_time": 3.9493415355682373,
            "execution_time": 0.0017197132110595703,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Senior']\n    WITH p ORDER BY p.seniority DESC\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority LIMIT 10;",
            "generation_time": 1.8770806789398193,
            "execution_time": 0.001856088638305664,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (p:Person)-[:HAS_VISA]->(v:Visa) WHERE v.type = 'Problematic'\n    RETURN DISTINCT p.name AS Person, v.name AS VisaType, p.department AS Department, p.location AS Location LIMIT 20;",
            "generation_time": 1.6810219287872314,
            "execution_time": 0.001605987548828125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name, p.email, p.department, p.location, p.timezone",
            "generation_time": 1.721473217010498,
            "execution_time": 0.002613067626953125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Project {status:'critical'})-[:ALLOCATED_TO]->(person)<--(:Person)\n  WITH person, count(distinct person) AS team_size\n  MATCH (p)-[:ALLOCATED_TO]->(allocated_to)\n  WHERE allocated_to <> person AND allocated_to:Person\n  WITH person, team_size, count(distinct allocated_to) AS remaining_team\n  RETURN person.name AS Person, remaining_team - 1 AS BusFactor\n  LIMIT 100",
            "generation_time": 2.7687573432922363,
            "execution_time": 0.0025832653045654297,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF {is_lead: true}]->(t)\nWITH t, COLLECT(m) AS teamMembers\nWHERE size(teamMembers) > 0 AND NOT ANY(member IN teamMembers WHERE EXISTS((member)-[:HAS_SKILL]->(skill:Skill) AND skill.name CONTAINS 'policy' AND toLower(skill.category) = toLower('required training')))\nRETURN t.name AS Team, COUNT(teamMembers) AS MemberCount, COLLECT(DISTINCT member IN teamMembers WHERE NOT EXISTS((member)-[:HAS_SKILL]->(skill:Skill) AND skill.name CONTAINS 'policy' AND toLower(skill.category) = toLower('required training'))) AS UntrainedMembers\nORDER BY Team DESC\nLIMIT 10;",
            "generation_time": 4.9326698780059814,
            "execution_time": 0.0015919208526611328,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 7, column: 98, offset: 464 errCtx: ...LLECT(DISTINCT member IN teamMembers WHERE NOT EXISTS((member)-[:HAS_SKILL... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "WITH 'Skill' as skill_type\nMATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-(:Person) p2\nWHERE toLower(p1.id) <> toLower(p2.id)\nWITH count(distinct p1) as unique_holders, collect(s.name) as skills\nWHERE unique_holders = 1\nRETURN distinct skills[0] AS silo_skill, p2.id AS held_by, p1.name AS team_member\nLIMIT 100;",
            "generation_time": 2.975055694580078,
            "execution_time": 0.001504659652709961,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 44, offset: 70 errCtx: MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-(:Person) p2 errCtxOffset: 43",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100;",
            "generation_time": 2.21254563331604,
            "execution_time": 0.0020813941955566406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (d:Team)-[r:MEMBER_OF {role:'data'}]->(p:Person)\nWHERE NOT (p)-[:REPORTS_TO]->() \nWITH d, COUNT(p) AS teamMembersCount\nRETURN d.name AS Team, teamMembersCount AS MembersCount\nORDER BY teamMembersCount DESC\nLIMIT 10;",
            "generation_time": 2.10937237739563,
            "execution_time": 0.008333206176757812,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]->(p:Person)\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100;",
            "generation_time": 2.147043466567993,
            "execution_time": 0.0018711090087890625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 18,
        "has_results": 3,
        "pattern_matches": 7,
        "avg_generation_time": 3.1720464494493275,
        "avg_execution_time": 0.0021094127937599464,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.6666666666666666
        }
      },
      "overall_score": 50.92592592592592
    },
    {
      "model": "granite3.3:8b-largectx",
      "timestamp": "2025-06-22T21:50:34.110470",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email, p.department, p.seniority, p.location, p.timezone LIMIT 1;",
            "generation_time": 7.849029779434204,
            "execution_time": 0.0017657279968261719,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\n  WHERE p.department = 'engineering'\n  RETURN DISTINCT t.name AS TeamName, t.id AS TeamID",
            "generation_time": 1.2521703243255615,
            "execution_time": 0.0016243457794189453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100;",
            "generation_time": 2.1267526149749756,
            "execution_time": 0.0020329952239990234,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  WITH p\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date, p.skills\n  LIMIT 10;",
            "generation_time": 2.928525447845459,
            "execution_time": 0.001760244369506836,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.severity = 'critical' \nAND toLower(pol.updated_at) CONTAINS toLower('this year')\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description, pol.updated_at\nLIMIT 100;",
            "generation_time": 1.8291432857513428,
            "execution_time": 0.0017116069793701172,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nWITH t, size((t)<-[:MEMBER_OF]-(:Person)) as memberCount\nRETURN t.name AS Team, memberCount AS MemberCount LIMIT 100",
            "generation_time": 1.7376461029052734,
            "execution_time": 0.0014996528625488281,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\n  RETURN p.department AS Department, count(p) AS Number_of_People\n  LIMIT 100;",
            "generation_time": 1.017413854598999,
            "execution_time": 0.0017402172088623047,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (d:Department) \nOPTIONAL MATCH (t:Team)-(:MEMBER_OF)->(p:Person) \nWHERE NOT t IS NULL \nWITH d, COUNT(DISTINCT p.id) AS teamSize \nRETURN d.name AS Department, avg(teamSize) AS AverageTeamSize LIMIT 10;",
            "generation_time": 1.9163548946380615,
            "execution_time": 0.0016825199127197266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 25, offset: 46 errCtx: OPTIONAL MATCH (t:Team)-(:MEMBER_OF)->(p:Person)  errCtxOffset: 24",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\n  OPTIONAL MATCH (p)-[:WORKS_AT]->(o:Office)\n  RETURN o.city AS Location, collect(p.seniority) AS SeniorityLevels\n  LIMIT 10;",
            "generation_time": 1.4553847312927246,
            "execution_time": 0.007233619689941406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person))\n  WHERE reporter.department CONTAINS 'data'\n  WITH reporter, COLLECT(p) AS reportees\n  RETURN reporter.name AS Manager, reportees\nLIMIT 100;",
            "generation_time": 1.609879732131958,
            "execution_time": 0.001344442367553711,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected a label line: 1, column: 43, offset: 42 errCtx: MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person)) errCtxOffset: 42",
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:MEMBER_OF {role, is_lead}]-(team:Team)\n  WITH team, proj\n  MATCH (team)-[:RESPONSIBLE_FOR]->(policy:Policy)\n  RETURN distinct policy.id, policy.name, policy.category, policy.severity\n  LIMIT 10;",
            "generation_time": 2.322847604751587,
            "execution_time": 0.0014886856079101562,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected ':' line: 1, column: 68, offset: 67 errCtx: ...on)-[:ALLOCATED_TO]->(proj:Project)<-[:MEMBER_OF {role, is_lead}]-(team:Team) errCtxOffset: 57",
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (e:Person)-[:REPORTS_TO]->(p:Person)<-[:WORKS_AT]-(c:Client) \n  WHERE e.role = 'engineer' AND toLower(c.industry) CONTAINS 'financial'\n  RETURN e.name, e.email, p.name AS manager_name, c.name AS client_name LIMIT 10;",
            "generation_time": 2.2996301651000977,
            "execution_time": 0.0017151832580566406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDev, collect(ceo) AS ceo\nRETURN juniorDev, ceo ORDER BY length(path) DESC LIMIT 10",
            "generation_time": 2.337524175643921,
            "execution_time": 0.0037832260131835938,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (secTeam:Team {name: 'security'})<-[:MEMBER_OF {role, is_lead: true}]-(p:Person)\n      MATCH (p)-[:HAS_SKILL]->(s:Skill)\n      MATCH (p)-[:ALLOCATED_TO]->(proj:Project)\n      MATCH (p)-[:WORKS_AT]->(office:Office)\n      MATCH (p)-[:ON_CALL]->(schedule:Schedule)\n      MATCH (p)-[:HAS_VISA]->(visa:Visa)\n      MATCH (secTeam)-[:RESPONSIBLE_FOR]->(policy:Policy)\n      RETURN secTeam, policy, p, s, proj, office, schedule, visa LIMIT 100;",
            "generation_time": 3.905379295349121,
            "execution_time": 0.0014841556549072266,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected ':' line: 1, column: 59, offset: 58 errCtx: ...cTeam:Team {name: 'security'})<-[:MEMBER_OF {role, is_lead: true}]-(p:Person) errCtxOffset: 52",
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role:'Product'}]->(productTeam:Team)\n    MERGE (pEngineering:Person)-[:MEMBER_OF {role:'Engineering'}]->(engineeringTeam:Team)\n    WHERE productTeam.name = 'Product' AND engineeringTeam.name = 'Engineering'\n    WITH pProduct, pEngineering\n    UNWIND relationships(pProduct) AS relProduct\n    UNWIND relationships(pEngineering) AS relEngineering\n    WHERE relProduct IS NOT NULL AND relEngineering IS NOT NULL\n    WITH pProduct, pEngineering, collect(type(relProduct)) AS productRels, collect(type(relEngineering)) AS engineeringRels\n    OPTIONAL MATCH (productRels[0].node)-[:WORKS_AT]->(office:Office)\n    WITH pProduct, pEngineering, productRels[0].node.name as officeName, engineeringRels[0].node.name as engineeringName, collect(type(relProduct)) AS productRels, collect(type(relEngineering)) AS engineeringRels\n    OPTIONAL MATCH (productRels[-1].node)-[:WORKS_AT]->(office2:Office)\n    WITH pProduct, pEngineering, officeName, engineeringName, productRels, engineeringRels,\n      collect(case when type(relProduct) = 'MEMBER_OF' and relProduct.role = 'Product Lead' then relProduct.node else NULL end) AS productLeads,\n      collect(case when type(relEngineering) = 'MEMBER_OF' and relEngineering.role = 'Engineering Lead' then relEngineering.node else NULL end) AS engineeringLeads\n    RETURN pProduct.name AS ProductTeamMember, pEngineering.name AS EngineeringTeamMember, officeName AS OfficeLocation, engineeringName AS EngineeringTeamName, productLeads AS ProductLeads, engineeringLeads AS EngineeringLeads LIMIT 100",
            "generation_time": 9.834799528121948,
            "execution_time": 0.0016558170318603516,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 6, offset: 169 errCtx:     WHERE productTeam.name = 'Product' AND engineeringTeam.name = 'Engineering' errCtxOffset: 5",
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)<-[:REPORTS_TO]-(p3:Person)\nWHERE p1.id <> p2.id AND p2.id <> p3.id AND p1.id = p3.id\nRETURN DISTINCT p1.name AS Reporter, p2.name AS Subordinate, p3.name AS UltimateSubordinate",
            "generation_time": 2.44797945022583,
            "execution_time": 0.012592792510986328,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 480
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "WITH (team_skills = apoc.coll.mapMerge(apoc.coll.withOpt('id', apoc.map.fromList(collect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id)))\n                       , 'skills'        )\n      , all_teams_skills = apoc.coll.mapMerge(apoc.coll.withOpt('id', apoc.map.fromList(collect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id)))\n                                          , 'all_team_skills' )\n      )\n      CALL apoc.proc.listAllTeams() YIELD id, name\n      WITH collect(id) AS team_ids, all_teams_skills, team_skills\n\n      UNWIND team_ids as tid\n      CALL apoc.proc.getTeamMembersWithUniqueSkills(tid, 'Team')\n      YIELD member_id, skills\n      WITH tid, collect(member_id) AS members_with_unique_skills, all_teams_skills\n\n      OPTIONAL MATCH (t:Team {id: tid})-[:MEMBER_OF]->(p:Person)\n      WHERE p.id IN members_with_unique_skills\n      WITH t, members_with_unique_skills, all_teams_skills\n\n      UNWIND members_with_unique_skills AS mem\n      MATCH (s:Skill)-[:HAS_SKILL]->(person:Person)<-[:MEMBER_OF]-(team:Team)\n      WHERE person.id = mem AND team.id = t.id\n      WITH t, all_teams_skills, collect(distinct s.name) AS unique_skills\n\n      OPTIONAL MATCH (other_team:Team)-[:MEMBER_OF]->(other_person:Person)<-[:HAS_SKILL]-(other_skill:Skill)\n      WHERE other_person.id NOT IN members_with_unique_skills AND other_skill.id IN all_teams_skills AND other_team.id <> t.id\n\n      WITH t, unique_skills, apoc.coll.containsAll(all_teams_skills, unique_skills) AS is_exclusive\n\n      WHERE is_exclusive AND size(members_with_unique_skills) > 0\n      RETURN t.name AS team_with_unique_member_skills ORDER BY t.name LIMIT 10;",
            "generation_time": 12.369371175765991,
            "execution_time": 0.002020597457885742,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '|': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 1, column: 144, offset: 143 errCtx: ...ect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id))) errCtxOffset: 61",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p:Project)<--(a:Person)-[:ALLOCATED_TO]->(allocated)\nWITH p, collect(a.id) as allocated_team_members\nMATCH (requiredSkill:Skill) WHERE (p)-[:REQUIRED_FOR]->(requiredSkill)\nOPTIONAL MATCH (teamMember:Person)-[:HAS_SKILL]->(skill:Skill)<-[:MEMBER_OF]-(team:Team) WHERE team.id IN allocated_team_members AND skill.id = requiredSkill.id\nWITH p, requiredSkill, collect(teamMember.name) as possessed_skills\nWHERE NOT (teamMember.name) IN [x IN apoc.coll.contains(possessed_skills) WHERE x IS NULL]\nRETURN p.name AS Project, requiredSkill.name AS SkillNeeded, COUNT(DISTINCT teamMember.name) AS AllocatedTeamMembersWithoutSkill, collect(teamMember.name) AS TeamMembersWithoutSkill ORDER BY p.name LIMIT 10;",
            "generation_time": 5.2626612186431885,
            "execution_time": 0.0014786720275878906,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'apoc.coll.contains'",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Executive', 'Senior Manager', 'Manager']\n    WITH p ORDER BY p.seniority DESC\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority LIMIT 10;",
            "generation_time": 1.8463406562805176,
            "execution_time": 0.0018036365509033203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (p:Person)-[:HAS_VISA]->(v:Visa) WHERE v.type = 'Problematic'\n    WITH p\n    MATCH (p)-[:WORKS_AT]->(o:Office)\n    WITH p, o\n    MATCH (p)-[:MEMBER_OF]->(t:Team)\n    RETURN DISTINCT p.name AS Person, t.name AS Team, o.city AS City, v.type AS VisaType LIMIT 10;",
            "generation_time": 2.567124843597412,
            "execution_time": 0.0013127326965332031,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'v' not defined",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name AS PersonToTalk, p.email AS Email",
            "generation_time": 1.5885190963745117,
            "execution_time": 0.0051097869873046875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(a:Person)<-[:REPORTS_TO]-(:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE p.priority = 'critical' AND s.type IN ['essential', 'critical']\nWITH a, COUNT(DISTINCT a) AS critical_allocations\nRETURN critical_allocations > 1 AS has_bus_factor, critical_allocations AS bus_factor_count LIMIT 1",
            "generation_time": 2.6378841400146484,
            "execution_time": 0.0022249221801757812,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t\nMATCH (p:Person)-[:MEMBER_OF {role, is_lead: true}]->(t)\nOPTIONAL MATCH (pol:Policy)-[:REQUIRED_TRAINING]->(p)\nWHERE pol IS NULL AND p.role = 'Leader'\nRETURN DISTINCT t.name AS Team, p.name AS Leader, p.email AS Email\nLIMIT 10",
            "generation_time": 2.7295188903808594,
            "execution_time": 0.0013644695281982422,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected ':' line: 4, column: 35, offset: 103 errCtx: MATCH (p:Person)-[:MEMBER_OF {role, is_lead: true}]->(t) errCtxOffset: 34",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "WITH 'team' AS teamType\n  MATCH (t:Team {name: teamType})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\n  WITH p, count(distinct t.name) as teamCount\n  WHERE size((MATCH (pp:Person)-[:HAS_SKILL]->(s:Skill))) = 1 AND NOT EXISTS(\n    MATCH (otherP:Person)-[:HAS_SKILL]->(sameS:Skill) WHERE otherP.id <> p.id AND sameS.name = s.name\n  )\n  WITH p, teamCount\n  WHERE teamCount > 1\n  RETURN p.name AS Person, collect(s.name) AS Skills, teamCount ORDER BY teamCount DESC LIMIT 10;",
            "generation_time": 3.9506571292877197,
            "execution_time": 0.001447439193725586,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 4, column: 34, offset: 178 errCtx:   WHERE size((MATCH (pp:Person)-[:HAS_SKILL]->(s:Skill))) = 1 AND NOT EXISTS( errCtxOffset: 33",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10;",
            "generation_time": 1.953653335571289,
            "execution_time": 0.0016689300537109375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (d:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE d.name CONTAINS 'data'\nOPTIONAL MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity)<-[:REPORTS_TO] - (p:Person)\nRETURN p.name AS Manager, collect(entity) AS PoliciesManaged, count(distinct p) AS TeamSize LIMIT 10",
            "generation_time": 2.4489006996154785,
            "execution_time": 0.001859426498413086,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person) WHERE p.role = 'lead' OR p.role CONTAINS 'lead'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
            "generation_time": 2.289196729660034,
            "execution_time": 0.0018525123596191406,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 15,
        "has_results": 3,
        "pattern_matches": 6,
        "avg_generation_time": 3.204232922306767,
        "avg_execution_time": 0.002491050296359592,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 47.22222222222222
    }
  ],
  "rankings": [
    {
      "model": "phi4:14b",
      "score": 57.407407407407405
    },
    {
      "model": "mistral:7b",
      "score": 50.92592592592593
    },
    {
      "model": "granite3.3:8b",
      "score": 50.92592592592592
    },
    {
      "model": "codeqwen:7b",
      "score": 47.22222222222222
    },
    {
      "model": "granite3.3:8b-largectx",
      "score": 47.22222222222222
    },
    {
      "model": "granite-code:8b",
      "score": 45.37037037037037
    }
  ]
}