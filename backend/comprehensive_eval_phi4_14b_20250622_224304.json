{
  "model": "phi4:14b",
  "timestamp": "2025-06-22T22:40:49.902972",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE toLower(p.role) = 'cto'\nRETURN p.id AS id, p.name AS name, p.email AS email, p.department AS department, p.location AS location LIMIT 1",
        "generation_time": 26.718915700912476,
        "execution_time": 0.002503633499145508,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE toLower(t.department) = 'engineering'\nRETURN t.id AS TeamID, t.name AS TeamName, t.focus AS Focus\nLIMIT 1000",
        "generation_time": 2.0397191047668457,
        "execution_time": 0.0017447471618652344,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 4
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office)\nWHERE toLower(o.city) = 'berlin'\nRETURN p.id AS EmployeeID, p.name AS Name, p.email AS Email, p.department AS Department, p.role AS Role, p.seniority AS Seniority\nLIMIT 100",
        "generation_time": 3.046898603439331,
        "execution_time": 0.0027627944946289062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill), \n      (p)-[:HAS_SKILL]->(s2:Skill)\nWHERE p.role = 'Engineer' \n  AND p.seniority = 'Senior'\n  AND toLower(s1.name) = 'python'\n  AND toLower(s2.name) = 'react'\nRETURN DISTINCT p.id, p.name, p.email, p.department, p.location\nLIMIT 100",
        "generation_time": 4.154339551925659,
        "execution_time": 0.0017161369323730469,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (policy:Policy)\nWHERE policy.category = 'security' \n  AND toLower(policy.name) CONTAINS 'critical'\n  AND date(policy.updated_at) >= date('2023-01-01')\nRETURN policy.id, policy.name, policy.description, policy.severity, policy.updated_at\nLIMIT 100",
        "generation_time": 3.006998300552368,
        "execution_time": 0.0017943382263183594,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWITH t, COUNT(p) AS memberCount\nWHERE memberCount > 10\nRETURN t.name AS TeamName, t.department AS Department, memberCount\nORDER BY memberCount DESC",
        "generation_time": 3.3858699798583984,
        "execution_time": 0.002464771270751953,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 26
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nRETURN p.department AS Department, COUNT(p) AS NumberOfPeople\nWHERE toLower(p.department) <> ''\nGROUP BY toLower(p.department)\nORDER BY NumberOfPeople DESC",
        "generation_time": 2.0660054683685303,
        "execution_time": 0.0013744831085205078,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 2, offset: 80 errCtx: WHERE toLower(p.department) <> '' errCtxOffset: 1",
        "result_count": 0
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWITH t.department AS department, COUNT(p) AS teamSize\nRETURN AVG(teamSize) AS averageTeamSize",
        "generation_time": 2.0351781845092773,
        "execution_time": 0.002056121826171875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nRETURN p.location AS Location, p.seniority AS Seniority, COUNT(p) AS Count\nWHERE toLower(p.location) <> ''\nGROUP BY p.location, p.seniority\nORDER BY p.location ASC, p.seniority ASC",
        "generation_time": 2.746821165084839,
        "execution_time": 0.0018291473388671875,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 2, offset: 93 errCtx: WHERE toLower(p.location) <> '' errCtxOffset: 1",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (reporter:Person)-[:REPORTS_TO]->(manager:Person),\n      (manager)-[:MEMBER_OF {role: 'member'}]-(dataTeam:Team {name: \"Data\"})\nRETURN reporter.id, reporter.name, reporter.email, manager.id AS manager_id, manager.name AS manager_name\nLIMIT 1000",
        "generation_time": 3.1599862575531006,
        "execution_time": 0.0017583370208740234,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy),\n      (person:Person)-[:MEMBER_OF {role: 'member'}]->(team),\n      (person)-[:ALLOCATED_TO]->(project:Project)\nRETURN DISTINCT policy.id, policy.name, policy.category, policy.description\nLIMIT 100",
        "generation_time": 3.1106362342834473,
        "execution_time": 0.0028259754180908203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:ALLOCS_PROJECT]-(c:Client {industry: 'financial'})\nWHERE p.role = 'engineer'\nRETURN DISTINCT p.name, p.email, p.department, c.name AS client_name, proj.name AS project_name\nLIMIT 100",
        "generation_time": 3.073709011077881,
        "execution_time": 0.0019073486328125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path=(junior:Person {seniority: 'Junior Developer'})-[:REPORTS_TO*]->(ceo:Person {role: 'CEO'})\nRETURN path\nLIMIT 100",
        "generation_time": 3.586229085922241,
        "execution_time": 0.0020661354064941406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (t:Team {name: 'Security'})<-[:RESPONSIBLE_FOR]-(p:Policy)\nRETURN t.name AS TeamName, p.name AS PolicyName, p.description AS PolicyDescription, p.category AS Category, p.severity AS Severity\nLIMIT 100",
        "generation_time": 2.6780478954315186,
        "execution_time": 0.0016477108001708984,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (prodTeam:Team {name: 'Product'}),\n      (engPerson:Person)-[:MEMBER_OF]->(engTeam:Team {name: 'Engineering'}),\n      (prodMember:Person)-[:MEMBER_OF]-(prodTeam),\n      (prodMember)-[:ALLOCATED_TO|:ON_CALL|:REPORTS_TO]->(proj:Project)<-[:ALLOCATED_TO|:ON_CALL|:REPORTS_TO]-(engPerson)\nRETURN prodMember.name AS Product_Member, engPerson.name AS Engineering_Member, proj.name AS Project\nLIMIT 10",
        "generation_time": 4.948955297470093,
        "execution_time": 0.0017364025115966797,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH path=(p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE p1.id = p2.id AND LENGTH(path) > 1\nRETURN DISTINCT p1.id AS person_id, \n               COLLECT(p1.name) AS names,\n               COLLECT(p1.email) AS emails,\n               COLLECT(length(path)) AS path_lengths\nLIMIT 100",
        "generation_time": 4.307037830352783,
        "execution_time": 0.002048015594482422,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-[:HAS_SKILL]-(p2:Person),\n      (p1)-[:MEMBER_OF]->(t1:Team),\n      (p2)-[:MEMBER_OF]->(t2:Team)\nWHERE p1 <> p2 AND t1 <> t2\nWITH s, COLLECT(DISTINCT t1) AS teams_with_s1, COLLECT(DISTINCT t2) AS teams_with_s2\nWHERE SIZE(teams_with_s2) = 1\nWITH s.name AS skill_name, teams_with_s1[0] AS unique_team\nRETURN DISTINCT unique_team.id AS team_id, unique_team.name AS team_name, unique_team.department AS department, COLLECT(skill_name) AS unique_skills\nLIMIT 100",
        "generation_time": 6.768206357955933,
        "execution_time": 1.0024664402008057,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Query timed out",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)<-[:ALLOCATED_TO]-(person:Person)-[:HAS_SKILL]->(ps:Skill),\n      (p)-[:REQUIRES {skill: id}]->(reqs:Skill)\nWHERE NOT (person)-[:HAS_SKILL]->(reqs)\nRETURN p.name AS ProjectName, collect(DISTINCT reqs.name) AS RequiredSkills, \n       collect(DISTINCT ps.name) AS PossessedSkills",
        "generation_time": 3.991192102432251,
        "execution_time": 0.001711130142211914,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'id' not defined",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority IN ['senior', 'executive'] OR \n      EXISTS((t:Team)<-[:MEMBER_OF {is_lead: true}]-(p)) OR \n      EXISTS((g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'high')\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.manager_id\nORDER BY p.seniority DESC, p.role\nLIMIT 100",
        "generation_time": 4.7322306632995605,
        "execution_time": 0.0013232231140136719,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected '<', '-', '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 4, column: 57, offset: 183 errCtx: ...XISTS((g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'high') errCtxOffset: 52",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (inc:Incident {severity: 'high', status: 'open'})\nRETURN inc.id AS IncidentID, inc.description AS Description, inc.affected_regions AS AffectedRegions, inc.created_at AS CreatedAt\nORDER BY inc.created_at ASC\nLIMIT 10",
        "generation_time": 10.388505458831787,
        "execution_time": 0.001697540283203125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name AS Name, p.email AS Email, p.department AS Department, \n       COLLECT(DISTINCT s.name) AS Skills\nLIMIT 5",
        "generation_time": 4.644266843795776,
        "execution_time": 0.002398252487182617,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project {priority: 'Critical'})\nWITH proj, p, COUNT(p) AS totalPeopleInProj\nWHERE NOT EXISTS {\n    MATCH (other:Person)-[r:ALLOCATED_TO]->(proj)\n    WHERE other <> p AND r IS NOT NULL\n}\nRETURN proj.name AS ProjectName, \n       totalPeopleInProj - 1 AS BusFactor, \n       [p.name | ' '] AS CriticalPersons\nLIMIT 10",
        "generation_time": 5.957176446914673,
        "execution_time": 0.0014896392822265625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 11, offset: 145 errCtx:     MATCH (other:Person)-[r:ALLOCATED_TO]->(proj) errCtxOffset: 10",
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t, p\nWHERE NOT EXISTS {\n    MATCH (mem:Person)-[:MEMBER_OF]-(t)\n    WHERE mem.id IN (\n        SELECT m2.id FROM (\n            MATCH (m1:Person)-[:HAS_SKILL]->(:Skill)<-[:RESPONSIBLE_FOR]-(p)\n            RETURN DISTINCT m1.id\n        ) AS m2\n    )\n}\nRETURN t.name AS TeamName, collect(p.name) AS ResponsiblePolicies\nLIMIT 10",
        "generation_time": 4.814473628997803,
        "execution_time": 0.0014607906341552734,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 11, offset: 85 errCtx:     MATCH (mem:Person)-[:MEMBER_OF]-(t) errCtxOffset: 10",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n      (p1)-[:HAS_SKILL]->(s:Skill)\nWHERE p1 <> p2 \n  AND NOT EXISTS { MATCH (p2)-[:HAS_SKILL]->(s) }\nRETURN t.name AS Team, s.name AS UniqueSkill, COLLECT(DISTINCT p1.name) AS PersonsWithUniqueSkill\nORDER BY t.name, s.name",
        "generation_time": 4.434514045715332,
        "execution_time": 0.0014793872833251953,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 26, offset: 144 errCtx:   AND NOT EXISTS { MATCH (p2)-[:HAS_SKILL]->(s) } errCtxOffset: 25",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\nWHERE toLower(p.name) = 'john' OR toLower(p.name) = 'jon'\nRETURN p.id AS person_id, p.name AS full_name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
        "generation_time": 4.100346803665161,
        "execution_time": 0.0019142627716064453,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (person:Person)-[:MEMBER_OF]->(team:Team {name: 'Data'})\nWITH person, team\nOPTIONAL MATCH (team)<-[:RESPONSIBLE_FOR]-(policy:Policy)\nWITH policy, COUNT(DISTINCT person) AS teamSize, team\nWHERE NOT EXISTS((team)<-[:MEMBER_OF]-(:Person))\nRETURN \n    CASE WHEN teamSize = 0 THEN 'Team is already empty'\n         ELSE 'All members of the Data team are gone' END AS Status,\n    COLLECT(policy.id) AS UnassignedPolicies",
        "generation_time": 6.796862840652466,
        "execution_time": 0.0018420219421386719,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.name AS TeamLeadName, t.name AS TeamName\nLIMIT 100",
        "generation_time": 2.89151668548584,
        "execution_time": 0.0027434825897216797,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 87
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 18,
    "has_results": 4,
    "pattern_matches": 7,
    "avg_generation_time": 4.947579242565014,
    "avg_execution_time": 0.038991195184213144,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 51.85185185185185
}