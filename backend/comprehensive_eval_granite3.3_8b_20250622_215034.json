{
  "model": "granite3.3:8b",
  "timestamp": "2025-06-22T21:49:08.406689",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role CONTAINS 'cto' \n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 1",
        "generation_time": 16.117371797561646,
        "execution_time": 0.0017266273498535156,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (p:Team)\n  WHERE TOLOWER(p.department) CONTAINS 'engineering'\n  RETURN p.id, p.name, p.department, p.focus, LIMIT 100",
        "generation_time": 1.3063321113586426,
        "execution_time": 0.0014445781707763672,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '1': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, AS, ',', ORDER BY, SKIP, LIMIT, ';', call clause or a clause line: 3, column: 53, offset: 120 errCtx:   RETURN p.id, p.name, p.department, p.focus, LIMIT 100 errCtxOffset: 52",
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE toLower(o.name) CONTAINS 'berlin' RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, o.name, o.city, o.country LIMIT 10",
        "generation_time": 1.9832448959350586,
        "execution_time": 0.0018124580383300781,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\n  WHERE p.role CONTAINS 'engineer' AND p.seniority = 'senior'\n  WITH p\n  MATCH (p)-[:HAS_SKILL]->(s:Skill)\n  WHERE s.name IN ['Python', 'React']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100;",
        "generation_time": 3.17498517036438,
        "execution_time": 0.0019783973693847656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy) \nWHERE pol.severity = 'critical' AND pol.category CONTAINS 'security' \nAND pol.updated >= date('now', '-1year')\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description, pol.updated \nLIMIT 100;",
        "generation_time": 1.9816336631774902,
        "execution_time": 0.0016379356384277344,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nWITH t, size((t)<-[:MEMBER_OF]-(:Person)) AS team_size\nRETURN DISTINCT t.name AS Team, team_size AS MemberCount LIMIT 100",
        "generation_time": 1.8473179340362549,
        "execution_time": 0.0014848709106445312,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.department AS Department, count(p) AS Number_of_People\n  LIMIT 100;",
        "generation_time": 1.0393524169921875,
        "execution_time": 0.0017189979553222656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (d:Department)-[:HAS_TEAM]->(t:Team)\n  WITH d, size(filters(t)) as team_size\n  RETURN d.name AS Department, avg(team_size) AS AverageTeamSize LIMIT 10;",
        "generation_time": 1.5387482643127441,
        "execution_time": 0.0014123916625976562,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'filters'",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.location, collect(p.seniority) AS seniority_levels\n  ORDER BY seniority_levels DESC\n  LIMIT 10;",
        "generation_time": 1.2573790550231934,
        "execution_time": 0.002624034881591797,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\n  WHERE m.department CONTAINS 'data'\n  RETURN DISTINCT p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, m.id, m.name, m.email, m.department, m.role, m.seniority, m.location, m.timezone LIMIT 100",
        "generation_time": 2.659040927886963,
        "execution_time": 0.0017964839935302734,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(p:Policy)<-[:ALLOCATED_TO]-(p2:Project)\nWHERE p2.type CONTAINS 'customer'\nRETURN DISTINCT t.name AS Team, p.name AS Policy, p.category AS Category\nLIMIT 10;",
        "generation_time": 1.9107582569122314,
        "execution_time": 0.0015919208526611328,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:REPORTS_TO]->(p:Person)-[:WORKS_AT]->(o:Office)\n            <-[:ALLOWNED_BY] - (c:Client)\n  WHERE c.industry CONTAINS 'financial' AND e.role = 'engineer'\n  RETURN DISTINCT e.name, e.email, o.city, c.name AS client_name LIMIT 10;",
        "generation_time": 2.3840153217315674,
        "execution_time": 0.0023262500762939453,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDevs, ceo\nOPTIONAL MATCH (p:Person)-[:REPORTS_TO]->(m:Person)\nWHERE p IN juniorDevs AND m <> ceo\nWITH collect(p) AS developers, ceo, collect(m) AS managers\nRETURN ceo,collect(p) AS juniorDevelopers, collect(m) AS reportingChain \nLIMIT 10",
        "generation_time": 3.501835823059082,
        "execution_time": 0.0014214515686035156,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (secTeam:Team)-[:RESPONSIBLE_FOR]->(policy:Policy)<-[:MEMBER_OF {role: 'Security'}]-(member:Person)\nRETURN distinct secTeam.name AS Team, policy.name AS Policy, member.name AS Member;",
        "generation_time": 1.642915964126587,
        "execution_time": 0.0014984607696533203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role:'Product', department:'Product'}]->(pProductTeam:Team),\n      (pEngineering:Person)-[:MEMBER_OF {role:'Engineering', department:'Engineering'}]->(pEngineeringTeam:Team)\n      WHERE toLower(pProductTeam.name) CONTAINS 'product' AND toLower(pEngineeringTeam.name) CONTAINS 'engineering'\n      OPTIONAL MATCH (pProduct)-[:ALLOCATED_TO]->(pProject:Project)<-[:RESPONSIBLE_FOR]-(pPolicy:Policy),\n                   (pEngineering)-[:ALLOCATED_TO]->(pProject)<-[:RESPONSIBLE_FOR]-(pPolicy)\n      RETURN pProduct.name AS Product_Member_Name,\n             pEngineering.name AS Engineering_Member_Name,\n             pProductTeam.name AS Product_Team_Name,\n             pEngineeringTeam.name AS Engineering_Team_Name,\n             pProject.name AS Project_Name,\n             pPolicy.name AS Policy_Name\n      LIMIT 10;",
        "generation_time": 5.599105358123779,
        "execution_time": 0.001965045928955078,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(intermediate:Person)-[:REPORTS_TO]->(p2:Person)\nWHERE p1.id <> p2.id AND toLower(p1.name) = toLower(p2.name)\nRETURN p1, intermediate, p2 LIMIT 100",
        "generation_time": 1.9588642120361328,
        "execution_time": 0.0028765201568603516,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "WITH 'Team' as label\nMATCH (t1:label {name: 'Team'}), \n      (p1:Person)-[:MEMBER_OF {is_lead: true}]->(t1),\n      (p2:Person)-[:MEMBER_OF {is_lead: true}]->(other_team:Team) where t1 <> other_team\nWITH collect({team: t1, skills: apoc.proc.listFilter(apoc.acl.skillsOf(p1))}) as unique_teams,\n     collect({team: other_team, skills: apoc.proc.listFilter(apoc.acl.skillsOf(p2))}) as shared_teams\nUNWIND unique_teams AS ut\nWITH ut.team as uniqueTeam, apoc.mapOperation(ut.skills, 'toList', 'distinct') as uniqueSkills\nOPTIONAL MATCH (pt:Person)-[:MEMBER_OF]->(uniqueTeam)\nWITH uniqueTeam, collect(pt.id) as membersOfUniqueTeam\nMATCH (member:Person)-[:HAS_SKILL]->(s:Skill)\nWITH uniqueTeam, membersOfUniqueTeam, apoc.mapOperation(membersOfUniqueTeam, 'listToSet', 'unique') as distinctMemberIds, \n     collect({skill: s.name, count: size(filter(values(?member) IN APPLY [m IN apoc.colls.setMembers(distinctMemberIds, m) | apoc.acl.hasSkill(m, s.name)]) > 0)}) as skillCheck\nUNWIND skillCheck FOR skill IN skills\nWHERE NOT ANY(sc IN skill CHECK sc.count > 1)\nRETURN uniqueTeam.name AS Team_with_unique_skills ORDER BY Team_with_unique_skills LIMIT 10;",
        "generation_time": 9.367991209030151,
        "execution_time": 0.0018773078918457031,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '?': expected DISTINCT, '*', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name, an identifier or ')' line: 13, column: 56, offset: 849 errCtx: ...l: s.name, count: size(filter(values(?member) IN APPLY [m IN apoc.colls.se... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(teamMember:Person)<--(:Team)\nWITH p, collect(teamMember.id) AS allocatedMembers\nMATCH (p)-[:REQUIRES]->(requiredSkill:Skill)\nOPTIONAL MATCH (teamMember)-[:HAS_SKILL]->(possessedSkill:Skill)\nWHERE NOT (possessedSkill.id IN requiredSkill.id) AND teamMember.id NOT IN [x IN range(0, size(allocatedMembers)-1) | allocatedMembers[x]]\nRETURN p.name AS project, requiredSkill.name AS skill_needed, collect(teamMember.name) AS team_members_without_skill\nORDER BY p.name; LIMIT 100",
        "generation_time": 3.9493415355682373,
        "execution_time": 0.0017197132110595703,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Error: query with more than one statement is not supported.",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Manager', 'Director', 'Executive', 'Senior']\n    WITH p ORDER BY p.seniority DESC\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority LIMIT 10;",
        "generation_time": 1.8770806789398193,
        "execution_time": 0.001856088638305664,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (p:Person)-[:HAS_VISA]->(v:Visa) WHERE v.type = 'Problematic'\n    RETURN DISTINCT p.name AS Person, v.name AS VisaType, p.department AS Department, p.location AS Location LIMIT 20;",
        "generation_time": 1.6810219287872314,
        "execution_time": 0.001605987548828125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name, p.email, p.department, p.location, p.timezone",
        "generation_time": 1.721473217010498,
        "execution_time": 0.002613067626953125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Project {status:'critical'})-[:ALLOCATED_TO]->(person)<--(:Person)\n  WITH person, count(distinct person) AS team_size\n  MATCH (p)-[:ALLOCATED_TO]->(allocated_to)\n  WHERE allocated_to <> person AND allocated_to:Person\n  WITH person, team_size, count(distinct allocated_to) AS remaining_team\n  RETURN person.name AS Person, remaining_team - 1 AS BusFactor\n  LIMIT 100",
        "generation_time": 2.7687573432922363,
        "execution_time": 0.0025832653045654297,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(p:Policy)\nWITH t\nOPTIONAL MATCH (m:Person)-[:MEMBER_OF {is_lead: true}]->(t)\nWITH t, COLLECT(m) AS teamMembers\nWHERE size(teamMembers) > 0 AND NOT ANY(member IN teamMembers WHERE EXISTS((member)-[:HAS_SKILL]->(skill:Skill) AND skill.name CONTAINS 'policy' AND toLower(skill.category) = toLower('required training')))\nRETURN t.name AS Team, COUNT(teamMembers) AS MemberCount, COLLECT(DISTINCT member IN teamMembers WHERE NOT EXISTS((member)-[:HAS_SKILL]->(skill:Skill) AND skill.name CONTAINS 'policy' AND toLower(skill.category) = toLower('required training'))) AS UntrainedMembers\nORDER BY Team DESC\nLIMIT 10;",
        "generation_time": 4.9326698780059814,
        "execution_time": 0.0015919208526611328,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'W': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 7, column: 98, offset: 464 errCtx: ...LLECT(DISTINCT member IN teamMembers WHERE NOT EXISTS((member)-[:HAS_SKILL... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "WITH 'Skill' as skill_type\nMATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-(:Person) p2\nWHERE toLower(p1.id) <> toLower(p2.id)\nWITH count(distinct p1) as unique_holders, collect(s.name) as skills\nWHERE unique_holders = 1\nRETURN distinct skills[0] AS silo_skill, p2.id AS held_by, p1.name AS team_member\nLIMIT 100;",
        "generation_time": 2.975055694580078,
        "execution_time": 0.001504659652709961,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 44, offset: 70 errCtx: MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-(:Person) p2 errCtxOffset: 43",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 100;",
        "generation_time": 2.21254563331604,
        "execution_time": 0.0020813941955566406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (d:Team)-[r:MEMBER_OF {role:'data'}]->(p:Person)\nWHERE NOT (p)-[:REPORTS_TO]->() \nWITH d, COUNT(p) AS teamMembersCount\nRETURN d.name AS Team, teamMembersCount AS MembersCount\nORDER BY teamMembersCount DESC\nLIMIT 10;",
        "generation_time": 2.10937237739563,
        "execution_time": 0.008333206176757812,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]->(p:Person)\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100;",
        "generation_time": 2.147043466567993,
        "execution_time": 0.0018711090087890625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 18,
    "has_results": 3,
    "pattern_matches": 7,
    "avg_generation_time": 3.1720464494493275,
    "avg_execution_time": 0.0021094127937599464,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 50.92592592592592
}