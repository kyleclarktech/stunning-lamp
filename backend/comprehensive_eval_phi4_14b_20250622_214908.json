{
  "model": "phi4:14b",
  "timestamp": "2025-06-22T21:46:49.568034",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person {role: 'CTO'})\nRETURN p.id AS id, p.name AS name, p.email AS email, p.department AS department, p.location AS location\nLIMIT 1;",
        "generation_time": 26.870379209518433,
        "execution_time": 0.002990245819091797,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) \nWHERE toLower(t.department) = 'engineering' \nRETURN t.id, t.name\nLIMIT 1000",
        "generation_time": 1.7649166584014893,
        "execution_time": 0.001880645751953125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 4
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.id, p.name, p.email, p.department, p.role, p.location\nLIMIT 1000",
        "generation_time": 2.3057103157043457,
        "execution_time": 0.0024569034576416016,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s1:Skill {name: 'Python'}),\n      (p)-[:HAS_SKILL]->(s2:Skill {name: 'React'})\nWHERE p.role = 'Engineer' AND toLower(p.seniority) = 'senior'\nRETURN DISTINCT p.id, p.name, p.email, collect(s1.name) AS skills\nLIMIT 100",
        "generation_time": 3.8762130737304688,
        "execution_time": 0.0019402503967285156,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy {severity: 'critical'})\nWHERE pol.category = 'security'\nAND pol.updated_at >= date('2023-01-01')\nRETURN pol.id AS policy_id, pol.name AS policy_name, pol.description AS policy_description, pol.updated_at AS updated_date\nORDER BY pol.updated_at DESC",
        "generation_time": 3.0491700172424316,
        "execution_time": 0.0015742778778076172,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'date'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWITH t, COUNT(p) AS memberCount\nWHERE memberCount > 10\nRETURN t.name AS TeamName, memberCount\nORDER BY memberCount DESC;",
        "generation_time": 2.7324349880218506,
        "execution_time": 0.0027048587799072266,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 26
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nWITH p.department AS dept, COUNT(p) AS num_people\nRETURN DISTINCT toLower(dept) AS department, num_people\nORDER BY num_people DESC;",
        "generation_time": 2.130910873413086,
        "execution_time": 0.001973390579223633,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWITH t.department AS department, COUNT(p) AS teamSize\nRETURN AVG(teamSize) AS averageTeamSize",
        "generation_time": 2.1466903686523438,
        "execution_time": 0.0019826889038085938,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nWITH p.seniority AS seniority, p.location AS location\nWHERE seniority IS NOT NULL AND location IS NOT NULL\nRETURN toLower(location) AS location, toLower(seniority) AS seniority, COUNT(*) AS count\nORDER BY location, seniority\nLIMIT 1000;",
        "generation_time": 3.256255865097046,
        "execution_time": 0.004765033721923828,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 84
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (manager:Person)-[:REPORTS_TO]->(reporter:Person),\n      (dataTeamMember:Person)-[:MEMBER_OF {role: 'member'}]->(:Team {name: 'Data'})\nWHERE manager.id = dataTeamMember.id \nRETURN reporter.name, reporter.email, reporter.department, reporter.role, reporter.seniority\nLIMIT 1000",
        "generation_time": 3.54351806640625,
        "execution_time": 0.0031938552856445312,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (team:Team)-[:RESPONSIBLE_FOR]->(policy:Policy), \n      (person:Person)-[:MEMBER_OF]->(team),\n      (person)-[:ALLOCATED_TO]->(project:Project)\nWHERE project.type = 'Customer'\nRETURN DISTINCT policy.id AS PolicyID, policy.name AS PolicyName, policy.description AS Description",
        "generation_time": 3.326108455657959,
        "execution_time": 0.0021779537200927734,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:ALLOCATED_TO]->(p:Project)<-[:ALLOCATED_TO]-(c:Client)\nWHERE e.role = 'Engineer' AND toLower(c.industry) = 'financial'\nRETURN DISTINCT e.id, e.name, e.email, e.department, e.location \nLIMIT 100",
        "generation_time": 3.138731002807617,
        "execution_time": 0.0019598007202148438,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = (ceo:Person)-[:REPORTS_TO*]->(dev:Person)\nWHERE ceo.role CONTAINS 'CEO' AND dev.seniority CONTAINS 'Junior'\nRETURN path, [node IN nodes(path) | node.name] AS reportingChain\nORDER BY length(path) ASC LIMIT 1",
        "generation_time": 3.142113208770752,
        "execution_time": 0.001934051513671875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (securityTeam:Team {name: 'Security'})<-[:MEMBER_OF]-(person:Person)-[:MEMBER_OF]->(team:Team),\n      (compliance:Compliance)<-[:RESPONSIBLE_FOR]-(responsibleEntity)\nWHERE team = securityTeam OR responsibleEntity IN [group IN person.memberOf WHERE type(group) = 'Group']\nRETURN DISTINCT securityTeam, compliance, responsibleEntity, person\nORDER BY securityPerson.name ASC\nLIMIT 100",
        "generation_time": 4.3151116371154785,
        "execution_time": 0.0013992786407470703,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'securityPerson' not defined",
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (prodTeam:Team {name: 'Product'}),\n      (engDept:Department {name: 'Engineering'}),\n      (person:Person)-[:MEMBER_OF]->(team)\nWHERE toLower(team.name) = toLower(prodTeam.name)\n  AND person.department = engDept.name\nWITH prodTeam, team, person\nMATCH (person)-[r]-()\nRETURN DISTINCT person.id AS PersonID,\n                person.name AS PersonName,\n                collect(DISTINCT type(r)) AS Connections,\n                collect(DISTINCT startNode(r).name) AS RelatedEntities\nORDER BY person.name\nLIMIT 50",
        "generation_time": 5.550397634506226,
        "execution_time": 0.0029859542846679688,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH path=(p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE id(p1) = id(p2) AND length(path) > 1\nRETURN DISTINCT p1.name AS PersonName, p1.email AS Email, \n                [node in nodes(path)[1..-1] | node.name] AS ReportingChain\nLIMIT 100",
        "generation_time": 3.65950083732605,
        "execution_time": 0.0021004676818847656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)<-[:HAS_SKILL]-(p2:Person),\n      (p1)-[:MEMBER_OF]->(t1:Team),\n      (p2)-[:MEMBER_OF]->(t2:Team)\nWHERE t1 <> t2\nWITH s, t1, COUNT(DISTINCT p2) AS other_count\nWHERE other_count = 0\nRETURN DISTINCT t1.name AS TeamName, COLLECT(s.name) AS UniqueSkills LIMIT 25;",
        "generation_time": 4.926423788070679,
        "execution_time": 0.13634228706359863,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project),\n      (proj)<-[:HAS_SKILL]-(requiredSkill:Skill),\n      (p)-[:HAS_SKILL]->(ownedSkill:Skill)\nWHERE NOT toLower(requiredSkill.name) = toLower(ownedSkill.name)\nWITH requiredSkill, proj, COUNT(p) AS missingCount\nORDER BY missingCount DESC\nRETURN proj.id AS project_id,\n       proj.name AS project_name,\n       requiredSkill.id AS skill_id,\n       requiredSkill.name AS skill_name,\n       missingCount\nLIMIT 10;",
        "generation_time": 6.04594087600708,
        "execution_time": 0.0019450187683105469,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager),\n      (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p)\nWHERE p.seniority IN ['Senior', 'Manager', 'Director'] OR p.role IN ['Lead']\nRETURN DISTINCT p.name AS Name, p.role AS Role, p.department AS Department, manager.name AS ManagerName\nLIMIT 100",
        "generation_time": 3.775721549987793,
        "execution_time": 0.0025687217712402344,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 20
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (i:Incident {severity: 'High', status: 'Open'})\nWITH i\nOPTIONAL MATCH (p:Person)-[:ALLOCATED_TO]->(prj:Project)<-[:ALLOCATED_TO]-(other:Person)\nWHERE prj.status = 'Delayed' OR prj.budget > prj.budget * 1.5\nWITH collect(distinct p) AS affected_people, i, prj\nOPTIONAL MATCH (p)-[:MEMBER_OF]->(t:Team), (t)<-[:MEMBER_OF]-(other)\nWHERE t.focus = 'Critical'\nWITH affected_people, i, prj, collect(distinct t) AS critical_teams\nOPTIONAL MATCH (g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy {severity: 'High'})\nRETURN \n    i.id AS incident_id,\n    i.description AS incident_description,\n    i.affected_regions AS regions,\n    size(affected_people) AS num_affected_people,\n    collect(DISTINCT p.name) AS affected_persons_names,\n    collect(DISTINCT prj.name) AS projects_with_issues,\n    critical_teams AS teams_involved,\n    pol.name AS high_severity_policies\nLIMIT 10",
        "generation_time": 10.195039987564087,
        "execution_time": 0.0017015933990478516,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'p' not defined",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name, p.email, p.department, p.role LIMIT 10",
        "generation_time": 2.0990383625030518,
        "execution_time": 0.001951456069946289,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (proj:Project {priority: 'critical'})<-[:ALLOCATED_TO]-(person:Person)\nWITH proj, person, COUNT(DISTINCT person) AS totalPeopleInProj\nMATCH path = (p1:Person)-[:ALLOCATED_TO]->(proj)<-[:ALLOCATED_TO]-(p2:Person)\nWHERE p1 <> p2\nWITH proj, COLLECT(p1) AS people, COLLECT(p2) AS pairedPeople\nUNWIND pairedPeople AS pair\nWITH proj, people, [x IN people WHERE NOT x IN pair | 1] AS singletons\nORDER BY SIZE(singletons) DESC\nRETURN proj.name AS ProjectName, LENGTH(SINGLE(singletons)) AS BusFactor\nLIMIT 1",
        "generation_time": 6.532413959503174,
        "execution_time": 0.001950979232788086,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'SINGLE'",
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t, pol, COLLECT(DISTINCT p) AS teamMembers\nWHERE NOT EXISTS {\n  MATCH (tm:Person)-[:HAS_SKILL {category: 'Training'}]->()\n  WHERE tm IN teamMembers AND toLower(pol.name) CONTAINS toLower('required')\n}\nRETURN DISTINCT t.id AS TeamID, t.name AS TeamName, pol.id AS PolicyID, pol.name AS PolicyName\nLIMIT 100;",
        "generation_time": 7.977476358413696,
        "execution_time": 0.0014636516571044922,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected ':', ',' or '}' line: 4, column: 9, offset: 148 errCtx:   MATCH (tm:Person)-[:HAS_SKILL {category: 'Training'}]->() errCtxOffset: 8",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n      (p1)-[:HAS_SKILL]->(s:Skill)\nWHERE p1 <> p2 AND NOT (p2)-[:HAS_SKILL]->(s)\nWITH t.name AS teamName, s.name AS skillName, p1\nRETURN DISTINCT t.name AS Team, s.name AS Skill, COLLECT(DISTINCT p1.name) AS UniqueIndividual\nORDER BY t.name, s.name;",
        "generation_time": 4.84447169303894,
        "execution_time": 0.0014994144439697266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'t' not defined",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\nWHERE toLower(p.name) IN ['john', 'jon']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100;",
        "generation_time": 2.8702824115753174,
        "execution_time": 0.0017333030700683594,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (team:Team {name: 'data'})\nOPTIONAL MATCH (member:Person)-[:MEMBER_OF]->(team)\nWITH COUNT(member) AS numMembers\nWHERE numMembers = 0\n\n// Check for projects with no allocated members from the data team\nMATCH (project:Project)<-[:ALLOCATED_TO]-(p:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN project.name AS ProjectName, COLLECT(DISTINCT p.name) AS CurrentMembers\n\nUNION ALL\n\n// Check for policies without responsible members from the data team\nMATCH (policy:Policy)<-[:RESPONSIBLE_FOR]-(entity)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN policy.name AS PolicyName, COLLECT(DISTINCT entity.name) AS ResponsibleMembers\n\nUNION ALL\n\n// Check for on-call schedules with no data team members\nMATCH (schedule:Schedule)<-[:ON_CALL]-(p:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN schedule.id AS ScheduleID, COLLECT(DISTINCT p.name) AS OnCallMembers\n\nUNION ALL\n\n// List current members of the data team for reference\nMATCH (member:Person)-[:MEMBER_OF]->(team:Team {name: 'data'})\nRETURN member.name AS MemberName, team.name AS TeamName LIMIT 10",
        "generation_time": 11.830228328704834,
        "execution_time": 0.0015761852264404297,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "All sub queries in a UNION must have the same column names.",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {is_lead: true}]->(t:Team)\nRETURN p.name AS TeamLeadName, t.name AS TeamName, p.department AS Department, p.role AS Role\nORDER BY p.name\nLIMIT 100",
        "generation_time": 2.7378854751586914,
        "execution_time": 0.003114461898803711,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 87
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 20,
    "has_results": 7,
    "pattern_matches": 8,
    "avg_generation_time": 5.134929074181451,
    "avg_execution_time": 0.007180249249493635,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.3333333333333333,
      "ambiguous_requests": 0.6666666666666666,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 57.407407407407405
}