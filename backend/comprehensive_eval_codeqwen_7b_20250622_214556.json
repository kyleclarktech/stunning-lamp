{
  "model": "codeqwen:7b",
  "timestamp": "2025-06-22T21:44:42.341716",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person {role: 'CTO'}) RETURN p.name AS Name, p.email AS Email, p.department AS Department, p.location AS Location, p.timezone AS Timezone, p.hire_date AS HireDate;",
        "generation_time": 10.074345588684082,
        "execution_time": 0.0030384063720703125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE t.department = 'Engineering' RETURN t.name",
        "generation_time": 0.745464563369751,
        "execution_time": 0.0021216869354248047,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 4
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "Match (o:Office) where o.name = 'Berlin'\nMatch (p:Person)-[:WORKS_AT]->(o)\nReturn p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone",
        "generation_time": 1.6699097156524658,
        "execution_time": 0.002572774887084961,
        "syntax_valid": false,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE s.name IN ['Python', 'React'] AND p.role = 'Engineer' AND p.seniority = 'Senior'\nRETURN p.name, p.email",
        "generation_time": 1.613337755203247,
        "execution_time": 0.0018901824951171875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (p:Policy)-[:RESPONSIBLE_FOR]->(t:Team)-[:IS_CRITICAL]->()\nWHERE p.updated_at >= datetime({year: 2021})\nRETURN p, t",
        "generation_time": 1.4923300743103027,
        "execution_time": 0.0014755725860595703,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'datetime'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team) WHERE size([(p:Person)-[:MEMBER_OF]->(t)]) > 10 RETURN t, [(p:Person)-[:MEMBER_OF]->(t)] AS teamMembers",
        "generation_time": 1.3517484664916992,
        "execution_time": 0.0017232894897460938,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(p:Person)-[:MEMBER_OF]->(t)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nRETURN t.department, count(*) as total_employees\nORDER BY total_employees DESC",
        "generation_time": 1.22701096534729,
        "execution_time": 0.0021522045135498047,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 11
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (t:Team)\nRETURN avg(size([p IN t.members | p])) AS AvgTeamSize",
        "generation_time": 0.8734855651855469,
        "execution_time": 0.001981973648071289,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person) WITH p.location AS location, p.seniority AS seniority\nCALL apoc.agg.collect(seniority)\nRETURN location, collect(DISTINCT size(seniority)) AS distribution\n\nExplanation: \nThis query first retrieves the 'location' and 'seniority' properties for each person in the graph. It then uses a call to apoc.agg.collect() to group these values by location and count the number of people with each unique seniority level for each location. The result is returned as a map where the keys are locations and the values are lists containing the distribution of seniority levels within each location.",
        "generation_time": 3.315382242202759,
        "execution_time": 0.001886129379272461,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'E': expected ',', ORDER BY, SKIP, LIMIT, ';', call clause or a clause line: 5, column: 1, offset: 172 errCtx: Explanation:  errCtxOffset: 0",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager:Person)<-[:MEMBER_OF {role: 'Data Team Lead'}]-(t:Team)\nRETURN p.name, p.email, t.name, manager.name",
        "generation_time": 1.4629487991333008,
        "execution_time": 0.0017495155334472656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\nWHERE t.focus = 'customer'\nWITH COLLECT(DISTINCT p) AS team_leads\nCALL {\n  WITH team_leads\n  UNION\n  WITH team_leads\n  MATCH (g:Group)-[:RESPONSIBLE_FOR]->(pol:Policy)\n  WHERE g IN team_leads\n  RETURN COLLECT(DISTINCT pol) AS policies\n}\nRETURN DISTINCT policies",
        "generation_time": 2.8314034938812256,
        "execution_time": 0.0014271736145019531,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Found 1 UNION clauses but only 1 RETURN clauses.",
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:MEMBER_OF]->(t:Team)\nWHERE t.department = 'Finance' AND e.role IN ['Engineer', 'Technical Leader']\nRETURN e, t",
        "generation_time": 1.3069648742675781,
        "execution_time": 0.0018112659454345703,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH (jdev:Person {role: 'Junior Developer'})\nMATCH path = shortestPath((jdev)-[:REPORTS_TO*]->(ceo:Person {role: 'CEO'}))\nRETURN nodes(path) AS reporting_chain;",
        "generation_time": 5.033296585083008,
        "execution_time": 0.0014772415161132812,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "SELECT \n  p1.name AS 'Security Team Member', \n  p2.name AS 'Compliance Policy Holder'\nFROM \n  Person p1, Person p2\nWHERE \n  (p1)-[:MEMBER_OF]->(:Team {name: 'security'}) AND \n  (p2)-[:HAS_SKILL]->(:Skill {category: 'compliance', type: 'policy'})\n\nThis query retrieves the names of security team members and their corresponding compliance policy holders by matching people who are members of the 'security' team and have the 'compliance' skill with type 'policy'.",
        "generation_time": 2.9775290489196777,
        "execution_time": 0.0014815330505371094,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT  errCtxOffset: 2",
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF]->(team1:Team {name: 'product'})<-[:REPORTS_TO]-(lead1:Person),\n      (p2:Person)-[:MEMBER_OF]->(team2:Team {name: 'engineering'})<-[:REPORTS_TO]-(lead2:Person)\nWHERE team1.department = team2.department\nRETURN lead1.name AS Product_Lead, lead2.name AS Engineering_Lead",
        "generation_time": 4.782034635543823,
        "execution_time": 0.0017592906951904297,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (a)-[r*]->(b) WHERE a = b RETURN DISTINCT r",
        "generation_time": 0.7254774570465088,
        "execution_time": 1.0018720626831055,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Query timed out",
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nWHERE NOT EXISTS ((t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill))\nRETURN t1.name AS Team, COUNT(DISTINCT s1.id) AS Unique_Skills\nORDER BY Unique_Skills DESC",
        "generation_time": 4.975361108779907,
        "execution_time": 0.0017158985137939453,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill)'",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "SELECT DISTINCT p.id AS person_id, s.name AS skill_name\nFROM Person p\nJOIN Allocation a ON p.id = a.person_id\nJOIN Projects prj ON a.project_id = prj.id\nLEFT JOIN Skills sk ON sk.project_id = prj.id\nWHERE sk.id IS NULL",
        "generation_time": 1.9518423080444336,
        "execution_time": 0.001519918441772461,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT DISTINCT p.id AS person_id, s.name AS skill_name errCtxOffset: 2",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.role IN ['Manager', 'Lead', 'Senior Manager'] OR p.department IN ['Marketing', 'Finance', 'HR', 'IT', 'Sales', 'Operations', 'Customer Support']\nRETURN p.name, p.email, p.department, p.role",
        "generation_time": 1.8059499263763428,
        "execution_time": 0.004950761795043945,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 105
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (i:Incident) WHERE i.severity > 3 AND i.status = 'Open' RETURN i.name, i.description, i.affected_regions, i.created_at;",
        "generation_time": 2.8007442951202393,
        "execution_time": 0.0018138885498046875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)\nWHERE any(s IN [:TEAM, :GROUP] WHERE s.department = 'Artificial Intelligence' OR s.focus CONTAINS 'AI') AND p.email <> ''\nRETURN DISTINCT p.name AS person_name, p.email AS email",
        "generation_time": 1.6826844215393066,
        "execution_time": 0.0017139911651611328,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 17, offset: 33 errCtx: WHERE any(s IN [:TEAM, :GROUP] WHERE s.department = 'Artificial Intelligence'... errCtxOffset: 16",
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Project)\nWHERE p.type = 'critical' AND p.priority > 5\nWITH collect(p) as critical_projects\nUNWIND critical_projects as cp\nMATCH (p:Person)-[:ALLOCATED_TO]->(cp)\nRETURN COUNT(DISTINCT p), COUNT(DISTINCT p)/SIZE(critical_projects)",
        "generation_time": 5.5343708992004395,
        "execution_time": 0.002154111862182617,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol)\nWITH t, pol\nWHERE NOT (t)-->(pol)\nUNION ALL\nMATCH (p:Person)-[:MEMBER_OF]->(g:Group)\n-[:RESPONSIBLE_FOR]->(pol)\nWHERE NOT p-->(g)-[:HAS_SKILL]->(:Skill)-[:CATALOGUE_OF]->(pol)\nRETURN DISTINCT t, g, p",
        "generation_time": 5.091428756713867,
        "execution_time": 0.002242565155029297,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '>': expected NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, '(', a function name or an identifier line: 7, column: 14, offset: 166 errCtx: WHERE NOT p-->(g)-[:HAS_SKILL]->(:Skill)-[:CATALOGUE_OF]->(pol) errCtxOffset: 13",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "SELECT p1.name, s1.name FROM Person p1 JOIN Skill s1 ON p1.id = s1.person_id LEFT JOIN (SELECT p2.id FROM Person p2 JOIN Skill s2 ON p2.id = s2.person_id WHERE p2.department IS NULL) AS p3 ON p1.id = p3.id WHERE p3.id IS NULL",
        "generation_time": 1.9441633224487305,
        "execution_time": 0.0014688968658447266,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'L': expected SET line: 1, column: 3, offset: 2 errCtx: SELECT p1.name, s1.name FROM Person p1 JOIN Skill s1 ON p1.id = s1.person_id ... errCtxOffset: 2",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person) WHERE LOWER(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone",
        "generation_time": 1.4792656898498535,
        "execution_time": 0.0016751289367675781,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'LOWER'",
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (t:Team {name: 'data'})<-[:MEMBER_OF]->(p:Person)\nWITH p\nCALL apoc.create.relationship('team', 'DEPARTED', {}, p) YIELD rel\nRETURN rel",
        "generation_time": 1.3725175857543945,
        "execution_time": 0.0014829635620117188,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Procedure `apoc.create.relationship` is not registered",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name AS lead_of\nORDER BY lead_of\nLIMIT 10",
        "generation_time": 3.250568389892578,
        "execution_time": 0.0046045780181884766,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 23,
    "execution_success": 13,
    "has_results": 6,
    "pattern_matches": 9,
    "avg_generation_time": 2.717465427186754,
    "avg_execution_time": 0.03910233356334545,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.0,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 47.22222222222222
}