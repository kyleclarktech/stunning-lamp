{
  "model": "granite3.3:8b-largectx",
  "timestamp": "2025-06-22T21:50:34.110470",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email, p.department, p.seniority, p.location, p.timezone LIMIT 1;",
        "generation_time": 7.849029779434204,
        "execution_time": 0.0017657279968261719,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF]->(t:Team)\n  WHERE p.department = 'engineering'\n  RETURN DISTINCT t.name AS TeamName, t.id AS TeamID",
        "generation_time": 1.2521703243255615,
        "execution_time": 0.0016243457794189453,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office) WHERE o.name = 'Berlin'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 100;",
        "generation_time": 2.1267526149749756,
        "execution_time": 0.0020329952239990234,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\n  WHERE p.role = 'engineer' AND p.seniority = 'senior' AND toLower(p.skills) CONTAINS 'python' AND toLower(p.skills) CONTAINS 'react'\n  WITH p\n  RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date, p.skills\n  LIMIT 10;",
        "generation_time": 2.928525447845459,
        "execution_time": 0.001760244369506836,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy)\nWHERE pol.severity = 'critical' \nAND toLower(pol.updated_at) CONTAINS toLower('this year')\nRETURN DISTINCT pol.id, pol.name, pol.category, pol.description, pol.updated_at\nLIMIT 100;",
        "generation_time": 1.8291432857513428,
        "execution_time": 0.0017116069793701172,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)\nWHERE size((t)<-[:MEMBER_OF]-(:Person)) > 10\nWITH t, size((t)<-[:MEMBER_OF]-(:Person)) as memberCount\nRETURN t.name AS Team, memberCount AS MemberCount LIMIT 100",
        "generation_time": 1.7376461029052734,
        "execution_time": 0.0014996528625488281,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(t)<-[:MEMBER_OF]-(:Person)'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\n  RETURN p.department AS Department, count(p) AS Number_of_People\n  LIMIT 100;",
        "generation_time": 1.017413854598999,
        "execution_time": 0.0017402172088623047,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (d:Department) \nOPTIONAL MATCH (t:Team)-(:MEMBER_OF)->(p:Person) \nWHERE NOT t IS NULL \nWITH d, COUNT(DISTINCT p.id) AS teamSize \nRETURN d.name AS Department, avg(teamSize) AS AverageTeamSize LIMIT 10;",
        "generation_time": 1.9163548946380615,
        "execution_time": 0.0016825199127197266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 2, column: 25, offset: 46 errCtx: OPTIONAL MATCH (t:Team)-(:MEMBER_OF)->(p:Person)  errCtxOffset: 24",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\n  OPTIONAL MATCH (p)-[:WORKS_AT]->(o:Office)\n  RETURN o.city AS Location, collect(p.seniority) AS SeniorityLevels\n  LIMIT 10;",
        "generation_time": 1.4553847312927246,
        "execution_time": 0.007233619689941406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 1
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person))\n  WHERE reporter.department CONTAINS 'data'\n  WITH reporter, COLLECT(p) AS reportees\n  RETURN reporter.name AS Manager, reportees\nLIMIT 100;",
        "generation_time": 1.609879732131958,
        "execution_time": 0.001344442367553711,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected a label line: 1, column: 43, offset: 42 errCtx: MATCH (p:Person)-[:REPORTS_TO]->(reporter:(Person)) errCtxOffset: 42",
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:MEMBER_OF {role, is_lead}]-(team:Team)\n  WITH team, proj\n  MATCH (team)-[:RESPONSIBLE_FOR]->(policy:Policy)\n  RETURN distinct policy.id, policy.name, policy.category, policy.severity\n  LIMIT 10;",
        "generation_time": 2.322847604751587,
        "execution_time": 0.0014886856079101562,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ',': expected ':' line: 1, column: 68, offset: 67 errCtx: ...on)-[:ALLOCATED_TO]->(proj:Project)<-[:MEMBER_OF {role, is_lead}]-(team:Team) errCtxOffset: 57",
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (e:Person)-[:REPORTS_TO]->(p:Person)<-[:WORKS_AT]-(c:Client) \n  WHERE e.role = 'engineer' AND toLower(c.industry) CONTAINS 'financial'\n  RETURN e.name, e.email, p.name AS manager_name, c.name AS client_name LIMIT 10;",
        "generation_time": 2.2996301651000977,
        "execution_time": 0.0017151832580566406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH path = shortestPath((p:Person)-[:REPORTS_TO*]->(ceo:Person))\nWHERE p.role CONTAINS 'junior developer' AND ceo.role = 'CEO'\nWITH collect(p) AS juniorDev, collect(ceo) AS ceo\nRETURN juniorDev, ceo ORDER BY length(path) DESC LIMIT 10",
        "generation_time": 2.337524175643921,
        "execution_time": 0.0037832260131835938,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "FalkorDB currently only supports shortestPaths in WITH or RETURN clauses",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (secTeam:Team {name: 'security'})<-[:MEMBER_OF {role, is_lead: true}]-(p:Person)\n      MATCH (p)-[:HAS_SKILL]->(s:Skill)\n      MATCH (p)-[:ALLOCATED_TO]->(proj:Project)\n      MATCH (p)-[:WORKS_AT]->(office:Office)\n      MATCH (p)-[:ON_CALL]->(schedule:Schedule)\n      MATCH (p)-[:HAS_VISA]->(visa:Visa)\n      MATCH (secTeam)-[:RESPONSIBLE_FOR]->(policy:Policy)\n      RETURN secTeam, policy, p, s, proj, office, schedule, visa LIMIT 100;",
        "generation_time": 3.905379295349121,
        "execution_time": 0.0014841556549072266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ',': expected ':' line: 1, column: 59, offset: 58 errCtx: ...cTeam:Team {name: 'security'})<-[:MEMBER_OF {role, is_lead: true}]-(p:Person) errCtxOffset: 52",
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (pProduct:Person)-[:MEMBER_OF {role:'Product'}]->(productTeam:Team)\n    MERGE (pEngineering:Person)-[:MEMBER_OF {role:'Engineering'}]->(engineeringTeam:Team)\n    WHERE productTeam.name = 'Product' AND engineeringTeam.name = 'Engineering'\n    WITH pProduct, pEngineering\n    UNWIND relationships(pProduct) AS relProduct\n    UNWIND relationships(pEngineering) AS relEngineering\n    WHERE relProduct IS NOT NULL AND relEngineering IS NOT NULL\n    WITH pProduct, pEngineering, collect(type(relProduct)) AS productRels, collect(type(relEngineering)) AS engineeringRels\n    OPTIONAL MATCH (productRels[0].node)-[:WORKS_AT]->(office:Office)\n    WITH pProduct, pEngineering, productRels[0].node.name as officeName, engineeringRels[0].node.name as engineeringName, collect(type(relProduct)) AS productRels, collect(type(relEngineering)) AS engineeringRels\n    OPTIONAL MATCH (productRels[-1].node)-[:WORKS_AT]->(office2:Office)\n    WITH pProduct, pEngineering, officeName, engineeringName, productRels, engineeringRels,\n      collect(case when type(relProduct) = 'MEMBER_OF' and relProduct.role = 'Product Lead' then relProduct.node else NULL end) AS productLeads,\n      collect(case when type(relEngineering) = 'MEMBER_OF' and relEngineering.role = 'Engineering Lead' then relEngineering.node else NULL end) AS engineeringLeads\n    RETURN pProduct.name AS ProductTeamMember, pEngineering.name AS EngineeringTeamMember, officeName AS OfficeLocation, engineeringName AS EngineeringTeamName, productLeads AS ProductLeads, engineeringLeads AS EngineeringLeads LIMIT 100",
        "generation_time": 9.834799528121948,
        "execution_time": 0.0016558170318603516,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'H': expected WITH line: 3, column: 6, offset: 169 errCtx:     WHERE productTeam.name = 'Product' AND engineeringTeam.name = 'Engineering' errCtxOffset: 5",
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(p2:Person)<-[:REPORTS_TO]-(p3:Person)\nWHERE p1.id <> p2.id AND p2.id <> p3.id AND p1.id = p3.id\nRETURN DISTINCT p1.name AS Reporter, p2.name AS Subordinate, p3.name AS UltimateSubordinate",
        "generation_time": 2.44797945022583,
        "execution_time": 0.012592792510986328,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 480
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "WITH (team_skills = apoc.coll.mapMerge(apoc.coll.withOpt('id', apoc.map.fromList(collect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id)))\n                       , 'skills'        )\n      , all_teams_skills = apoc.coll.mapMerge(apoc.coll.withOpt('id', apoc.map.fromList(collect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id)))\n                                          , 'all_team_skills' )\n      )\n      CALL apoc.proc.listAllTeams() YIELD id, name\n      WITH collect(id) AS team_ids, all_teams_skills, team_skills\n\n      UNWIND team_ids as tid\n      CALL apoc.proc.getTeamMembersWithUniqueSkills(tid, 'Team')\n      YIELD member_id, skills\n      WITH tid, collect(member_id) AS members_with_unique_skills, all_teams_skills\n\n      OPTIONAL MATCH (t:Team {id: tid})-[:MEMBER_OF]->(p:Person)\n      WHERE p.id IN members_with_unique_skills\n      WITH t, members_with_unique_skills, all_teams_skills\n\n      UNWIND members_with_unique_skills AS mem\n      MATCH (s:Skill)-[:HAS_SKILL]->(person:Person)<-[:MEMBER_OF]-(team:Team)\n      WHERE person.id = mem AND team.id = t.id\n      WITH t, all_teams_skills, collect(distinct s.name) AS unique_skills\n\n      OPTIONAL MATCH (other_team:Team)-[:MEMBER_OF]->(other_person:Person)<-[:HAS_SKILL]-(other_skill:Skill)\n      WHERE other_person.id NOT IN members_with_unique_skills AND other_skill.id IN all_teams_skills AND other_team.id <> t.id\n\n      WITH t, unique_skills, apoc.coll.containsAll(all_teams_skills, unique_skills) AS is_exclusive\n\n      WHERE is_exclusive AND size(members_with_unique_skills) > 0\n      RETURN t.name AS team_with_unique_member_skills ORDER BY t.name LIMIT 10;",
        "generation_time": 12.369371175765991,
        "execution_time": 0.002020597457885742,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '|': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 1, column: 144, offset: 143 errCtx: ...ect(team in apoc.proc.call('apoc.graph.allTeams', 'Team') | team | team.id))) errCtxOffset: 61",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)<--(a:Person)-[:ALLOCATED_TO]->(allocated)\nWITH p, collect(a.id) as allocated_team_members\nMATCH (requiredSkill:Skill) WHERE (p)-[:REQUIRED_FOR]->(requiredSkill)\nOPTIONAL MATCH (teamMember:Person)-[:HAS_SKILL]->(skill:Skill)<-[:MEMBER_OF]-(team:Team) WHERE team.id IN allocated_team_members AND skill.id = requiredSkill.id\nWITH p, requiredSkill, collect(teamMember.name) as possessed_skills\nWHERE NOT (teamMember.name) IN [x IN apoc.coll.contains(possessed_skills) WHERE x IS NULL]\nRETURN p.name AS Project, requiredSkill.name AS SkillNeeded, COUNT(DISTINCT teamMember.name) AS AllocatedTeamMembersWithoutSkill, collect(teamMember.name) AS TeamMembersWithoutSkill ORDER BY p.name LIMIT 10;",
        "generation_time": 5.2626612186431885,
        "execution_time": 0.0014786720275878906,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unknown function 'apoc.coll.contains'",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\n    WHERE p.role IN ['Executive', 'Senior Manager', 'Manager']\n    WITH p ORDER BY p.seniority DESC\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority LIMIT 10;",
        "generation_time": 1.8463406562805176,
        "execution_time": 0.0018036365509033203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (p:Person)-[:HAS_VISA]->(v:Visa) WHERE v.type = 'Problematic'\n    WITH p\n    MATCH (p)-[:WORKS_AT]->(o:Office)\n    WITH p, o\n    MATCH (p)-[:MEMBER_OF]->(t:Team)\n    RETURN DISTINCT p.name AS Person, t.name AS Team, o.city AS City, v.type AS VisaType LIMIT 10;",
        "generation_time": 2.567124843597412,
        "execution_time": 0.0013127326965332031,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'v' not defined",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill) WHERE s.name CONTAINS 'AI'\n    WITH p ORDER BY p.seniority DESC LIMIT 1\n    RETURN p.name AS PersonToTalk, p.email AS Email",
        "generation_time": 1.5885190963745117,
        "execution_time": 0.0051097869873046875,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(a:Person)<-[:REPORTS_TO]-(:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE p.priority = 'critical' AND s.type IN ['essential', 'critical']\nWITH a, COUNT(DISTINCT a) AS critical_allocations\nRETURN critical_allocations > 1 AS has_bus_factor, critical_allocations AS bus_factor_count LIMIT 1",
        "generation_time": 2.6378841400146484,
        "execution_time": 0.0022249221801757812,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)\nWHERE NOT (t)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t\nMATCH (p:Person)-[:MEMBER_OF {role, is_lead: true}]->(t)\nOPTIONAL MATCH (pol:Policy)-[:REQUIRED_TRAINING]->(p)\nWHERE pol IS NULL AND p.role = 'Leader'\nRETURN DISTINCT t.name AS Team, p.name AS Leader, p.email AS Email\nLIMIT 10",
        "generation_time": 2.7295188903808594,
        "execution_time": 0.0013644695281982422,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ',': expected ':' line: 4, column: 35, offset: 103 errCtx: MATCH (p:Person)-[:MEMBER_OF {role, is_lead: true}]->(t) errCtxOffset: 34",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "WITH 'team' AS teamType\n  MATCH (t:Team {name: teamType})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\n  WITH p, count(distinct t.name) as teamCount\n  WHERE size((MATCH (pp:Person)-[:HAS_SKILL]->(s:Skill))) = 1 AND NOT EXISTS(\n    MATCH (otherP:Person)-[:HAS_SKILL]->(sameS:Skill) WHERE otherP.id <> p.id AND sameS.name = s.name\n  )\n  WITH p, teamCount\n  WHERE teamCount > 1\n  RETURN p.name AS Person, collect(s.name) AS Skills, teamCount ORDER BY teamCount DESC LIMIT 10;",
        "generation_time": 3.9506571292877197,
        "execution_time": 0.001447439193725586,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 4, column: 34, offset: 178 errCtx:   WHERE size((MATCH (pp:Person)-[:HAS_SKILL]->(s:Skill))) = 1 AND NOT EXISTS( errCtxOffset: 33",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person)\n  WHERE toLower(p.name) IN ['john', 'jon']\n  RETURN p.id, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\n  LIMIT 10;",
        "generation_time": 1.953653335571289,
        "execution_time": 0.0016689300537109375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (d:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE d.name CONTAINS 'data'\nOPTIONAL MATCH (pol:Policy)-[:RESPONSIBLE_FOR]-(entity)<-[:REPORTS_TO] - (p:Person)\nRETURN p.name AS Manager, collect(entity) AS PoliciesManaged, count(distinct p) AS TeamSize LIMIT 10",
        "generation_time": 2.4489006996154785,
        "execution_time": 0.001859426498413086,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'lead' OR p.role CONTAINS 'lead'\n    RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 100",
        "generation_time": 2.289196729660034,
        "execution_time": 0.0018525123596191406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 15,
    "has_results": 3,
    "pattern_matches": 6,
    "avg_generation_time": 3.204232922306767,
    "avg_execution_time": 0.002491050296359592,
    "category_scores": {
      "simple_lookups": 0.6666666666666666,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.3333333333333333
    }
  },
  "overall_score": 47.22222222222222
}