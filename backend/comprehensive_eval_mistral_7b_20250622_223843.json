{
  "model": "mistral:7b",
  "timestamp": "2025-06-22T22:37:42.065201",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email",
        "generation_time": 7.754110813140869,
        "execution_time": 0.002773284912109375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.name",
        "generation_time": 0.6916768550872803,
        "execution_time": 0.001993894577026367,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.department, p.role, p.seniority",
        "generation_time": 1.0076186656951904,
        "execution_time": 0.0021452903747558594,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 29
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'engineer' AND p.seniority = 'senior' AND\ntoLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'Python'}) AND\ntoLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'React'})\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date, collect(p.skills.name) ORDER BY p.name ASC LIMIT 10",
        "generation_time": 3.0095863342285156,
        "execution_time": 0.0017642974853515625,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 20, offset: 93 errCtx: toLower(p.skills)-[:HAS_SKILL]->(:Skill {name:'Python'}) AND errCtxOffset: 19",
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (pol:Policy {severity: 'critical'})-[:RESPONSIBLE_FOR]-(entity)\nWHERE toDate(pol.updated_at).date() = toDay().date()\nRETURN pol.name, pol.category, pol.description, pol.updated_at",
        "generation_time": 2.3037705421447754,
        "execution_time": 0.0013780593872070312,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ';', call clause or a clause line: 2, column: 34, offset: 103 errCtx: WHERE toDate(pol.updated_at).date() = toDay().date() errCtxOffset: 33",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWHERE count(DISTINCT p) > 10\nRETURN t.name, count(DISTINCT p)",
        "generation_time": 1.1567916870117188,
        "execution_time": 0.0014369487762451172,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Invalid use of aggregating function 'count'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.department <> ''\nWITH DISTINCT p.department AS dep, count(p) as total\nORDER BY total DESC\nRETURN dep, total",
        "generation_time": 1.1516623497009277,
        "execution_time": 0.0021882057189941406,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (dep:Department)<-[:MEMBER_OF*1..]-(team:Team)-[r:MEMBER_OF]->(persons:Person)\nWITH dep, count(persons) as count, COUNT(distinct dep) as total_depts\nRETURN avg(count) AS average_team_size, total_depts AS total_departments",
        "generation_time": 1.8189139366149902,
        "execution_time": 0.0027899742126464844,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.location <> '' AND p.seniority IS NOT NULL\nWITH p.location AS location, toLower(p.seniority) AS seniority, COUNT(*) AS count\nGROUP BY location, seniority\nORDER BY location, seniority\nLIMIT 10",
        "generation_time": 1.570383071899414,
        "execution_time": 0.0013666152954101562,
        "syntax_valid": false,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'G': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 1, offset: 150 errCtx: GROUP BY location, seniority errCtxOffset: 0",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (dataTeam:Team {department:'Data'})<-[:REPORTS_TO*1..]-(p:Person)\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
        "generation_time": 1.770749807357788,
        "execution_time": 0.0017125606536865234,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (team:Team)-[:ALLOCATED_TO]->(project:Project)-[:RESPONSIBLE_FOR]->(policy:Policy)\nRETURN DISTINCT policy.name, policy.category, policy.description",
        "generation_time": 1.1759672164916992,
        "execution_time": 0.0019481182098388672,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]->(cl:Client)\nWHERE p.role = 'Engineer' AND toLower(cl.industry) = 'financial sector'\nRETURN DISTINCT p.name, cl.name, cl.annual_value",
        "generation_time": 1.7569994926452637,
        "execution_time": 0.0017621517181396484,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH (juniorDeveloper:Person {role: 'junior developer'}), (ceo:Person {role: 'CEO'})-[:REPORTS_TO]*-(middleManager)-[:REPORTS_TO*]->(juniorDeveloper)\nRETURN middleManager.name, middleManager.email",
        "generation_time": 1.6096842288970947,
        "execution_time": 0.001313924789428711,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '*': expected '-' line: 1, column: 100, offset: 99 errCtx: ...o:Person {role: 'CEO'})-[:REPORTS_TO]*-(middleManager)-[:REPORTS_TO*]->(ju... errCtxOffset: 40",
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (securityTeam:Team {name: 'Security'}), (policy:Policy)\nWHERE securityTeam-[:RESPONSIBLE_FOR]->(policy) OR (securityTeam)-[:RESPONSIBLE_FOR]-(group:Group)-[:RESPONSIBLE_FOR]->(policy)\nRETURN DISTINCT securityTeam, policy",
        "generation_time": 1.764413833618164,
        "execution_time": 0.0021059513092041016,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 21, offset: 82 errCtx: WHERE securityTeam-[:RESPONSIBLE_FOR]->(policy) OR (securityTeam)-[:RESPONSIB... errCtxOffset: 20",
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (p1:Person {department:'Product'}), (p2:Person {department:'Engineering'})-[:MEMBER_OF]->(team)<-(:Team {name:'X'| ANY(case when 'Collaboration Team' in labels(team) then '' else ' AND labels(team) = \"Collaboration Team\" ' end)| order by size(labels(team)) desc LIMIT 1})-(p3:Person), (p1)-[:ALLOCATED_TO]->(project)<-(:Project {type:'Engineering'}), p4 IN RELATIONSHIP((p1)-[:WORKS_AT]->(office) OR (p2)-[:WORKS_AT]->(office)) WHERE id(p3) <> id(p1) AND id(p3) <> id(p2) RETURN p1, p2, team, project, office",
        "generation_time": 3.984452247619629,
        "execution_time": 0.001445770263671875,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 104, offset: 103 errCtx: ...Engineering'})-[:MEMBER_OF]->(team)<-(:Team {name:'X'| ANY(case when 'Coll... errCtxOffset: 40",
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH p=(p1:Person)-[:REPORTS_TO]->(p2:Person)-<[:REPORTS_TO]-(p3:Person)\nWHERE toLower(p1.email) = toLower(p3.email) AND id(p1) < id(p3)\nRETURN p1.name, p2.name, p3.name, p1.id, p2.id, p3.id",
        "generation_time": 2.0890700817108154,
        "execution_time": 0.0013461112976074219,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '<': expected '-' or '[' line: 1, column: 48, offset: 47 errCtx: MATCH p=(p1:Person)-[:REPORTS_TO]->(p2:Person)-<[:REPORTS_TO]-(p3:Person) errCtxOffset: 47",
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nWITH DISTINCT s1, COLLECT(ID(t1)) as t1_ids\nMATCH (t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s1)\nWHERE ID(t1) <> ALL(t2_ids IN COLLECT(ID(t2))) AND t1 <> t2\nRETURN DISTINCT t1.name as Team, s1.name as Skill",
        "generation_time": 2.867906093597412,
        "execution_time": 0.0014197826385498047,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'t1' not defined",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nOPTIONAL MATCH (p)-[:HAS_SKILL]->(skil:Skill)\nWHERE NOT EXISTS ((p)-[:HAS_SKILL]->(skil))\nWITH DISTINCT skil.name as missing_skill, collect(distinct proj.name) as affected_projects\nRETURN missing_skill, affected_projects",
        "generation_time": 2.361537456512451,
        "execution_time": 0.0017232894897460938,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias '(p)-[:HAS_SKILL]->(skil)'",
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.seniority > 2 OR p.role =~ '(Director|Manager|Team Lead)'\nRETURN p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date",
        "generation_time": 1.7255005836486816,
        "execution_time": 0.0014100074768066406,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "FalkorDB does not currently support =~",
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (g:Group), (p:Policy)\nWHERE p.severity = 'High' AND g.type = 'Department' OR g.location\nWITH collect(distinct g.name) as dept_locations, collect(distinct p.name) as policies\nCALL apoc.refactor.fromDelimitedListToMap(dept_locations, '_') AS dept_map,\n     apoc.refactor.fromDelimitedListToMap(policies, '_') AS policy_map\nUNWIND ranges(0, size(dept_map)) as idx\nWITH idx, dept_map[idx] as dept, policy_map[idx] as policy\nMATCH (p:Person) WHERE p.department = dept OR p.location = dept\nRETURN p.name, dept, collect(policy) AS policies\nORDER BY size((collections.keys(p)) intersect collections.keys(policy_map)) DESC LIMIT 5",
        "generation_time": 5.20122218132019,
        "execution_time": 0.001984119415283203,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'A': expected YIELD, WHERE, ';', call clause or a clause line: 4, column: 64, offset: 243 errCtx: CALL apoc.refactor.fromDelimitedListToMap(dept_locations, '_') AS dept_map, errCtxOffset: 63",
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(sk:Skill {name: 'AI'})\nRETURN p.name, p.email",
        "generation_time": 0.9049973487854004,
        "execution_time": 0.0018329620361328125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(pr:Project {status:'critical', priority:1})-[:MEMBER_OF {role: 'developer'}]-(teams)<-[:RESPONSIBLE_FOR]-(policies)\nWHERE NOT ()-[:MEMBER_OF]->(p)\nWITH DISTINCT teams, count(distinct p) as bus_factor\nORDER BY bus_factor ASC\nRETURN teams.name AS Team, bus_factor AS BusFactor",
        "generation_time": 2.4186227321624756,
        "execution_time": 0.0022165775299072266,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nOPTIONAL MATCH (p:Person)-[:MEMBER_OF {role: 'Trainee'}]->(t)\nWITH t, collect(DISTINCT pol) as policies\nWHERE NOT EXISTS ((p)-[:HAS_SKILL {name:'Policy Training'}]) AND size(policies) > 0\nRETURN t.name AS TeamName, polices AS Policies",
        "generation_time": 2.3074235916137695,
        "execution_time": 0.0013592243194580078,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ')': expected '-' line: 4, column: 60, offset: 211 errCtx: ...NOT EXISTS ((p)-[:HAS_SKILL {name:'Policy Training'}]) AND size(policies) > 0 errCtxOffset: 56",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role:'*'}]-(t:Team)<-[:MEMBER_OF | :REPORTS_TO*]-(p2:Person), skill:Skill WHERE count(p1)-count(p2)=1 AND p1-[:HAS_SKILL]->(skill) AND NOT EXISTS((p3:Person)-[:MEMBER_OF]->(t) WHERE p3-[:HAS_SKILL]->(skill)) RETURN DISTINCT p1.name, skill.name, p1.department, t.name",
        "generation_time": 2.698526620864868,
        "execution_time": 0.0014541149139404297,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input ':': expected '=' line: 1, column: 99, offset: 98 errCtx: ...OF | :REPORTS_TO*]-(p2:Person), skill:Skill WHERE count(p1)-count(p2)=1 AN... errCtxOffset: 40",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
        "generation_time": 1.682776927947998,
        "execution_time": 0.0016121864318847656,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Data'\nOPTIONAL MATCH (p)-[:RESPONSIBLE_FOR]->(pol:Policy), (p)-[:MEMBER_OF {role: 'Lead'}]->(team:Team), (p)-[:MEMBER_OF]->(group:Group)\nRETURN DISTINCT pol, team, group, p.name, p.email\nUNION MATCH (p:Person) WHERE p.department = 'Data' AND NOT EXISTS ((p)-[:RESPONSIBLE_FOR]->(pol)) AND NOT EXISTS ((p)-[:MEMBER_OF {role: 'Lead'}]->(team)) AND NOT EXISTS ((p)-[:MEMBER_OF]->(group))\nRETURN DISTINCT p.name, p.email",
        "generation_time": 3.6891353130340576,
        "execution_time": 0.0014994144439697266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "All sub queries in a UNION must have the same column names.",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name",
        "generation_time": 0.9619519710540771,
        "execution_time": 0.004636287689208984,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 87
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 26,
    "execution_success": 12,
    "has_results": 3,
    "pattern_matches": 8,
    "avg_generation_time": 2.2753871105335377,
    "avg_execution_time": 0.0018747824209707756,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.3333333333333333,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 45.370370370370374
}