{
  "model": "mistral:7b",
  "timestamp": "2025-06-22T21:43:43.077199",
  "categories": {
    "simple_lookups": [
      {
        "query": "Who is the CTO?",
        "generated_cypher": "MATCH (p:Person) WHERE p.role = 'CTO' RETURN p.name, p.email",
        "generation_time": 7.686687231063843,
        "execution_time": 0.002262115478515625,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "List all teams in the engineering department",
        "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.name",
        "generation_time": 0.7416253089904785,
        "execution_time": 0.001997232437133789,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find employees in the Berlin office",
        "generated_cypher": "MATCH (p:Person) WHERE p.location = 'Berlin' RETURN p.name, p.email, p.department, p.role, p.seniority",
        "generation_time": 1.0875256061553955,
        "execution_time": 0.003560781478881836,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 29
      }
    ],
    "filtered_searches": [
      {
        "query": "Show me senior engineers with Python and React skills",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.role = 'Engineer' AND p.seniority = 'Senior'\nAND (p)-[:HAS_SKILL]->(sk:Skill {name: 'Python'})\nAND (p)-[:HAS_SKILL]->(sk2:Skill {name: 'React'})\nRETURN p.name, p.email, sk.name, sk2.name",
        "generation_time": 2.1647348403930664,
        "execution_time": 0.0016214847564697266,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unable to resolve filtered alias 'p'",
        "result_count": 0
      },
      {
        "query": "Find all critical security policies updated this year",
        "generated_cypher": "MATCH (p:Policy)\nWHERE p.category = 'Security' AND p.severity = 'Critical' AND YEAR(p.updated_at) = YEAR(date())\nRETURN p.name, p.category, p.description, p.updated_at",
        "generation_time": 1.5371379852294922,
        "execution_time": 0.0013492107391357422,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Unknown function 'YEAR'",
        "result_count": 0
      },
      {
        "query": "Which teams have more than 10 members?",
        "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF]-(p:Person)\nWHERE count(p) > 10\nRETURN t.name, count(p)",
        "generation_time": 1.2838685512542725,
        "execution_time": 0.0015358924865722656,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "Invalid use of aggregating function 'count'",
        "result_count": 0
      }
    ],
    "aggregations": [
      {
        "query": "How many people work in each department?",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.department <> ''\nWITH DISTINCT p.department as dep, COUNT(p) as count\nRETURN dep, count",
        "generation_time": 1.2016184329986572,
        "execution_time": 0.0019540786743164062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 15
      },
      {
        "query": "What's the average team size across all departments?",
        "generated_cypher": "MATCH (dep:Department)-[:MEMBER_OF*]->(team:Team)\nWITH COUNT(DISTINCT team.id) as teamCount, dep.name AS departmentName\nRETURN departmentName, AVG(COUNT(DISTINCT team.id)) as avgTeamSize;",
        "generation_time": 1.667440414428711,
        "execution_time": 0.0014455318450927734,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'team' not defined",
        "result_count": 0
      },
      {
        "query": "Show the distribution of seniority levels by location",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.location IS NOT NULL\nWITH p.location AS location, p.seniority AS seniority\nGROUP BY location, seniority\nORDER BY COUNT(*) DESC\nRETURN location, seniority, COUNT(*)",
        "generation_time": 1.4925823211669922,
        "execution_time": 0.0015053749084472656,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input 'G': expected ',', ORDER BY, SKIP, LIMIT, WHERE, ';', call clause or a clause line: 4, column: 1, offset: 100 errCtx: GROUP BY location, seniority errCtxOffset: 0",
        "result_count": 0
      }
    ],
    "multi_hop_relationships": [
      {
        "query": "Find all people who report to someone in the data team",
        "generated_cypher": "MATCH (dataTeam: Team {department: 'Data'})<-[:REPORTS_TO*1..]-(p:Person)\nRETURN DISTINCT p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10;",
        "generation_time": 2.1555593013763428,
        "execution_time": 0.0017397403717041016,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Which policies affect teams working on customer projects?",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project) WHERE proj.type = 'customer'\nOPTIONAL MATCH (proj)-[:RESPONSIBLE_FOR]->(pol:Policy)\nRETURN DISTINCT pol.name, pol.category, pol.description, pol.severity",
        "generation_time": 1.7907650470733643,
        "execution_time": 0.0017426013946533203,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show me engineers who work with clients in the financial sector",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project)<-[:WORKS_WITH]->(cli:Client)\nWHERE p.role = 'Engineer' AND cli.industry CONTAINS 'financial'\nRETURN DISTINCT p.name, p.email",
        "generation_time": 1.657585859298706,
        "execution_time": 0.002293109893798828,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "path_finding": [
      {
        "query": "What's the reporting chain from junior developers to the CEO?",
        "generated_cypher": "MATCH p=(j:Person {seniority:'Junior'})-[:REPORTS_TO*]->(ceo:Person {role:'CEO'})\nRETURN distinct(p) ORDER BY length(p)-1;",
        "generation_time": 1.345952033996582,
        "execution_time": 0.0017292499542236328,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find all connections between the security team and compliance policies",
        "generated_cypher": "MATCH (team:Team {name: 'Security'})-[:RESPONSIBLE_FOR]->(policy:Policy)\nRETURN DISTINCT policy.id AS PolicyID, policy.name AS PolicyName, policy.category AS Category, policy.description AS Description\nLIMIT 10",
        "generation_time": 1.5741124153137207,
        "execution_time": 0.001575469970703125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Show how the product team collaborates with engineering",
        "generated_cypher": "MATCH (p1:Person {department:'Product'})-[:ALLOCATED_TO]->(proj:Project)<-[:RESPONSIBLE_FOR]-(team:Team)-[:MEMBER_OF {role:'Engineer', is_lead: false}]->(p2:Person)\nRETURN p1, proj, team, p2;",
        "generation_time": 1.926908016204834,
        "execution_time": 0.0018687248229980469,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "complex_patterns": [
      {
        "query": "Find circular reporting structures (people who indirectly report to themselves)",
        "generated_cypher": "MATCH p=(person1)-[:REPORTS_TO]->(person2) WHERE id(person1) <> id(person2) AND id(person2) = id(person1:Person) RETURN person1.name, person1.email, person2.name, person2.email",
        "generation_time": 1.5901851654052734,
        "execution_time": 0.001669168472290039,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Type mismatch: expected Node, Edge, or Null but was Boolean",
        "result_count": 0
      },
      {
        "query": "Which teams have members with skills that no other team has?",
        "generated_cypher": "MATCH (t1:Team)<-[:MEMBER_OF]-(p1:Person)-[:HAS_SKILL]->(s1:Skill)\nMATCH (t2:Team)<-[:MEMBER_OF]-(p2:Person)-[:HAS_SKILL]->(s2:Skill)\nWHERE NOT (t1)-[:MEMBER_OF]->(p2) AND s1 <> s2\nRETURN t1.name, collect(distinct s1.name) as skills1, count(DISTINCT p1) as teamSize1, t2.name, collect(distinct s2.name) as skills2, count(DISTINCT p2) as teamSize2\nORDER BY count(DISTINCT p1) DESC, count(DISTINCT p2) DESC LIMIT 10;",
        "generation_time": 4.058222532272339,
        "execution_time": 1.009082317352295,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Query timed out",
        "result_count": 0
      },
      {
        "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
        "generated_cypher": "MATCH (p:Project)-[:ALLOCATED_TO]->(pm:Person)<-[:HAS_SKILL]-(sk:Skill),\n       (proj_skills:Skill)-[:REQUIRED_BY]->(p)\nWHERE NOT (pm)-[:HAS_SKILL]->(proj_skills)\nRETURN sk.name AS SkillNeeded, count(distinct pm.email) as TeamMembersCount, COALESCE(count((pm)-[:HAS_SKILL]->(sk)), 0) as TeamMembersWithSkill\nORDER BY TeamMembersCount - TeamMembersWithSkill DESC\nLIMIT 10;",
        "generation_time": 3.1144864559173584,
        "execution_time": 0.0021047592163085938,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "ambiguous_requests": [
      {
        "query": "Show me the important people",
        "generated_cypher": "MATCH (p:Person) WHERE p.seniority > 2 OR p.role IN ['Manager', 'Director'] OR p.department = 'Executive' RETURN p.name, p.email, p.seniority, p.role, p.department ORDER BY p.seniority DESC LIMIT 10",
        "generation_time": 1.80586576461792,
        "execution_time": 0.0017232894897460938,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find problematic areas in the organization",
        "generated_cypher": "MATCH (p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy) WHERE pol.severity = 'problematic'\nWITH DISTINCT p.department AS department, COUNT(DISTINCT p) as count\nORDER BY count DESC\nRETURN department, count",
        "generation_time": 1.6572065353393555,
        "execution_time": 0.0018079280853271484,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Who should I talk to about AI stuff?",
        "generated_cypher": "MATCH (p:Person)\nWHERE p.role CONTAINS 'AI' OR ANY(skill in p.skills WHERE skill.name = 'AI')\nRETURN p.name, p.email",
        "generation_time": 1.334409475326538,
        "execution_time": 0.0018625259399414062,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      }
    ],
    "organizational_insights": [
      {
        "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
        "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(criticalProject:Project {priority: 'critical'})<-[:MEMBER_OF {is_lead: false}]-(team:Team)\nWITH team, count(DISTINCT p) AS numberOfPeople\nOPTIONAL MATCH (p)-[:REPORTS_TO]->(manager)\nWITH team, numberOfPeople, COUNT(DISTINCT manager) AS numberOfManagers\nRETURN team.name as CriticalProject, numberOfPeople as NumberOfTeamMembers, numberOfManagers as NumberOfManagers, numberOfManagers / numberOfPeople as BusFactor\nORDER BY numberOfPeople DESC LIMIT 5",
        "generation_time": 3.450801372528076,
        "execution_time": 0.0020017623901367188,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "Find potential compliance violations: teams without required policy training",
        "generated_cypher": "MATCH (t:Team)<-[:RESPONSIBLE_FOR]-(p:Policy)\nWHERE p.type = 'Training' AND NOT (t)-[:MEMBER_OF {role:'Trainer'}->(g:Group))\nWITH t, collect(DISTINCT p.name) as required_policies\nMATCH (t)-[:RESPONSIBLE_FOR]->(c:Compliance)\nRETURN t.name AS team_name, required_policies, c.type AS compliance_type\nLIMIT 10;",
        "generation_time": 2.8482162952423096,
        "execution_time": 0.0014159679412841797,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "errMsg: Invalid input '-': expected ']' line: 2, column: 67, offset: 112 errCtx: WHERE p.type = 'Training' AND NOT (t)-[:MEMBER_OF {role:'Trainer'}->(g:Group)) errCtxOffset: 66",
        "result_count": 0
      },
      {
        "query": "Identify knowledge silos: skills possessed by only one person in a team",
        "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role:'teamMember'}]->(t:Team)<-[:MEMBER_OF]-(p2:Person),\n       (p1)-[:HAS_SKILL]->(s) WHERE count((p2)-[:HAS_SKILL]->(s)) = 1\nRETURN p1.name, s.name, count(p1) as count\nLIMIT 10;",
        "generation_time": 2.2388973236083984,
        "execution_time": 0.001363992691040039,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "Invalid use of aggregating function 'count'",
        "result_count": 0
      }
    ],
    "edge_cases": [
      {
        "query": "Find people named John or Jon (handle name variations)",
        "generated_cypher": "MATCH (p:Person) WHERE toLower(p.name) IN ['john', 'jon'] RETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date LIMIT 10",
        "generation_time": 1.821345567703247,
        "execution_time": 0.0017719268798828125,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": false,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 0
      },
      {
        "query": "What happens if everyone in the data team leaves?",
        "generated_cypher": "MATCH (p:Person) WHERE p.department = 'Data'\nOPTIONAL MATCH (p)-[:MEMBER_OF {role: 'X'}]->(t:Team) WITH COUNT(DISTINCT p) as total_data_team_members, COUNT(DISTINCT t) as total_teams\nWHERE total_data_team_members = total_teams AND NOT (p)-[:MEMBER_OF {role: 'X'}]->()\nRETURN p.name, p.email, p.role, p.seniority, p.location, t.name as team_name;",
        "generation_time": 3.0978593826293945,
        "execution_time": 0.0016956329345703125,
        "syntax_valid": true,
        "execution_success": false,
        "has_results": false,
        "pattern_match": false,
        "complexity_appropriate": false,
        "handles_ambiguity": true,
        "error": "'p' not defined",
        "result_count": 0
      },
      {
        "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
        "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name, p.email, t.name, t.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
        "generation_time": 1.869084358215332,
        "execution_time": 0.0052700042724609375,
        "syntax_valid": true,
        "execution_success": true,
        "has_results": true,
        "pattern_match": true,
        "complexity_appropriate": true,
        "handles_ambiguity": true,
        "error": null,
        "result_count": 10
      }
    ]
  },
  "overall_metrics": {
    "total_queries": 27,
    "syntax_valid": 27,
    "execution_success": 17,
    "has_results": 3,
    "pattern_matches": 8,
    "avg_generation_time": 2.1555808738425926,
    "avg_execution_time": 0.03925740277325666,
    "category_scores": {
      "simple_lookups": 1.0,
      "filtered_searches": 0.0,
      "aggregations": 0.0,
      "multi_hop_relationships": 0.0,
      "path_finding": 0.0,
      "complex_patterns": 0.0,
      "ambiguous_requests": 0.3333333333333333,
      "organizational_insights": 0.0,
      "edge_cases": 0.6666666666666666
    }
  },
  "overall_score": 50.92592592592593
}