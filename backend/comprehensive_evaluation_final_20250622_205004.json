{
  "evaluation_date": "2025-06-22T20:50:04.819359",
  "models_evaluated": [
    "deepseek-coder:1.3b",
    "llama3.2:3b",
    "qwen2.5-coder:7b"
  ],
  "total_test_queries": 27,
  "results": [
    {
      "model": "deepseek-coder:1.3b",
      "timestamp": "2025-06-22T20:48:21.334742",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE p.name = 'Chris Test' RETURN p LIMIT 1;",
            "generation_time": 2.5214340686798096,
            "execution_time": 0.005043506622314453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t",
            "generation_time": 0.21857786178588867,
            "execution_time": 0.003191232681274414,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p1:Person) WHERE p1.location = 'Berlin' RETURN DISTINCT p1 ORDER BY p1.name LIMIT 5;",
            "generation_time": 0.300351619720459,
            "execution_time": 0.008928537368774414,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 5
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p1:Person) WHERE p1.name =~ 'Senior Engineer' AND toLower(p1.skills[*].type) CONTAINS['Python', 'React'] RETURN collect(p1);  -- assuming Python and React are skills with ids like \"SkillType-python\" or \"SkillType-react\".",
            "generation_time": 0.5344209671020508,
            "execution_time": 0.002089977264404297,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.updated_at > DATEADD(YEAR, -1)' AND CASE WHEN TOLOWER(pol.name CONTAINS 'security') THEN TRUE ELSE FALSE END OR \u2026; // continue with the rest of your query pattern if needed ...",
            "generation_time": 0.43805694580078125,
            "execution_time": 0.0019364356994628906,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)<-(p)-[:MEMBER_OF {is_lead : true}]->(q:Person) WHERE size((q)) > 10 RETURN t, count(q), collect([x for x in relationships(p)] order by type(each(relationships(p)))",
            "generation_time": 0.46138644218444824,
            "execution_time": 0.002065896987915039,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 17, offset: 16 errCtx: MATCH (t:Team)<-(p)-[:MEMBER_OF {is_lead : true}]->(q:Person) WHERE size((q))... errCtxOffset: 16",
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o) RETURN o.department AS DepartmentName , count(distinct p) as NumberOfPeopleInDepartment, sum(p.seniority + p.hire_date )  totalSeniorities GROUP BY DepartmentName ORDER BY TotalSeniorities DESC",
            "generation_time": 0.5055708885192871,
            "execution_time": 0.0017580986022949219,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 't': expected '.', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, AS, ',', ORDER BY, SKIP, LIMIT, ';', call clause or a clause line: 1, column: 157, offset: 156 errCtx: ...nt, sum(p.seniority + p.hire_date )  totalSeniorities GROUP BY DepartmentN... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (department)<-(member)-(teamMember)->() WHERE NOT member[is_lead] RETURN AVG((SIZE)((manager in NEIGHBORS(*))-[:MEMBER_OF]-'())) AS averageTeamSize; \nThis query finds all teams and their managers, then calculates the count of neighbors (i.e., those people who manage a team), which gives us an estimate for each person's \"team size\" across departments. The final result is that we get back exactly one value: this would be equivalent to average number in terms per department or company unit if there are more than 10 employees with the same count of teams managed by them (as it depends on how many people do a team work).",
            "generation_time": 0.9554145336151123,
            "execution_time": 0.0020093917846679688,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person) WHERE TOLOWER(p.name) = 'X' AND p.seniority IS NOT NULL RETURN DISTINCT p.location AS Locations, ARRAY_AGG(DISTINCT p.seniority ORDER BY p.seniority ASC LIMIT 10)[0..9] as Seniorities\nORDER BY COUNT (p) DESC;   # assuming seniority is numeric and higher values represent lower level of authority ie: \"highest\" or the least represented by a team member - with highest being most common, lowest having fewest. Here 'X' should be replaced on user request to get data for specific person",
            "generation_time": 0.8730282783508301,
            "execution_time": 0.0023636817932128906,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p1:Person)-[:REPORTS_TO]->(t2) WHERE t2.name = 'data team' RETURN p1 LIMIT 50;",
            "generation_time": 0.31786322593688965,
            "execution_time": 0.007287263870239258,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (pol:Policy) WHERE pol.category CONTAINS 'customer' OR LOWER(pol.name) CONTAINS 'projects' RETURN distinct pol ORDER BY size((p:Person)-[:RESPONSIBLE_FOR]->(pol)) DESC LIMIT 10",
            "generation_time": 0.45807909965515137,
            "execution_time": 0.002344846725463867,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'LOWER'",
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name:'Financial'})-[]-(c:Client) RETURN p, c LIMIT 10;",
            "generation_time": 0.33496689796447754,
            "execution_time": 0.0027010440826416016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "Based on your schema and relationship patterns you can generate a Neo4j based cypher queries for \"Who manages/leads X team\", \"Find X policies\",\"who's responsible for x\" ,  'People in X department or location', etc. The CYPHER query would be something like:\n1. For who manages / leads X Team, use :MEMBER_OF where is lead = true and then match the person node with MEMBER OF relationship to team nodes using (t), name of 'X' as parameter in t property will return a list containing all junior developers managing/leading teams named \"X\".\n2. For finding x policies:  use WHERE clause on pol properties where category or name contains substring from user input and then match policy node with MATCH relationship to person nodes using (p), 'x' as parameter in the condition, will return a list of Policies related considering case-insensitive matching by comparing them.\n3. For who\u2019s responsible for x:  use WHERE clause on pol properties where category or name contains substring from user input and then match policy node with RESPONSIBLE_FOR relationship to entity nodes using (pol), 'x' as parameter in the condition, will return a list of Policies that are Responsible.\n4. For people in X department / location:  use WHERE clause on person properties where departments or locations contain substring from user input and then match Person node with MEMBER OF relationship to Team nodes using (p), 'X' as parameter, will return a list of persons working under the team/department named \"X\".\n    You can adapt this pattern for other queries in similar manner.  Also note that you might need more complex query if your database schema is not normalized and has multiple levels or paths to follow from one node towards another without directly connecting them with relationship nodes as Cypher does, where the relationships are indirectly represented using path traversal (like 'parent-child' relations) for a better performance.",
            "generation_time": 2.425269603729248,
            "execution_time": 0.002626180648803711,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'B': expected ';', ':', a statement option, a query hint, call clause, a clause or a schema command line: 1, column: 1, offset: 0 errCtx: Based on your schema and relationship patterns you can generate a Neo4j based... errCtxOffset: 0",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (t:Team {name:'Security'})<-[:MEMBER_OF]-(p1)-[*]->(pol2) WHERE p1.role = 'security manager' AND ID(pol2) IN [policy in relationships(t) where toLower(policy.category)=toLower('Compliance')] RETURN collect(DISTINCT pol2), count(*)",
            "generation_time": 0.5661485195159912,
            "execution_time": 0.0029785633087158203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {is_lead : true}]->(t)<-[:MEMBER_OF]-(p2), p3, l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR t.department='Y' RETURN DISTINCT p1 as teamLeader, count(distinct p2) AS numManagedByEngineeringTeam\nEND MATCH (p:Person)-[:HAS_SKILL]->(s), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR s.category='Y' RETURN DISTINCT p as developers, count(distinct c) AS numDevelopedSkills\nEND MATCH (p:Person)-[:WORKS_AT]->(o), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR o.city='Y' RETURN DISTINCT p as teamMembers, count(distinct s) AS numRegions\nEND MATCH (p:Person)-[:ON_CALL]->(s), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR dateformat(s.start_datetime,'YY-MM')=dateformat('Y',now()) RETURN DISTINCT p as onCallPersons, count(distinct s) AS numOnCll\nEND MATCH (p:Person)-[:HAS_VISA]->(v), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR v.type='Y' RETURN DISTINCT p as visaApplicants, count(distinct s) AS numVisas\nEND MATCH (p:Person)-[:REPORTS_TO]->(r), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR r.email='Y@example..com' RETURN DISTINCT p as reportsTo, count(distinct t) AS numReports\nEND MATCH (p:Person)-[:ALLOCATED_TO]->(pr), l:(Group|Policy)] WHERE toLower(l.name) = 'X' OR pr.type='Y', status NOT IN ['Closed'] RETURN DISTINCT p as allocatedProjects, count(distinct pr) AS numAllocated\nEND MATCH (p:Person)-[:RESPONSIBLE_FOR]->((l)), l:(Team|Policy)] WHERE toLower(t.name) = 'X' OR t.focus='Y', p NOT IN ['Product Team'] RETURN DISTINCT p as responsiblePeople, count(distinct rp) AS numResponses\nEND MATCH (pr:Person)-[:WORKS_AT]->((l)), l:(Team|Policy)] WHERE toLower(t.name) = 'X' OR t.budget=Y RETURN DISTINCT pr as teams, count(distinct wp), sum(wf::numAllocated)/sum(wp:numWorstFactor)*10 AS averageAllocation\nEND MATCH (prj : Project)<-[:ALLOCATED_TO]-(rp)->(pp), l:(Team|Policy)] WHERE toLower(t.name) = 'X' OR prj.type=Y RETURN DISTINCT pp as projectPersons, count(distinct pnr:numResponses + numAllocated - 10 AS total\nEND MATCH (pr : Client), l:(Team|Policy)] WHERE toLower(t.name) = 'X' OR prj=Y RETURN DISTINCT t as clients, count((distinct wp)), sum ((total)/numClients*10 )AS averageValue\nEND MATCH (pr:Person)-[:ON_CALL]->-(s), l:(Compliance|Policy)] WHERE toLower(l.name) = 'X' OR dateformat(dateadd('day', 3, s.startdatetime ), '%Y-%m')=toDateTime({now()+24*60}) RETURN DISTINCT p as onCallPersons\nEND MATCH (c:Compliance)-[:ON_CALL]->-(s), l:(Office|Policy)] WHERE toLower(l.name) = 'X' OR dateformat((dateadd('day', 3, s.startdatetime )-24*60 ), '%Y')=toDateTime({now()+18}) RETURN DISTINCT c as complianceCenters\nEND MATCH (c:Compliance)-[:ON",
            "generation_time": 6.023797273635864,
            "execution_time": 0.0023810863494873047,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected '=' line: 1, column: 76, offset: 75 errCtx: ... : true}]->(t)<-[:MEMBER_OF]-(p2), p3, l:(Group|Policy)] WHERE toLower(l.n... errCtxOffset: 40",
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH (p1), (m)<-(r)->(p2) WHERE ID(p1) = idOfPerson AND NOT ID(p2) IN [ID(n) for n in relationships(r)]  RETURN p1, m, r , collect([id(e) foreach e in relationshipPath(r,-)] as path )",
            "generation_time": 0.5094702243804932,
            "execution_time": 0.0017955303192138672,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 18, offset: 17 errCtx: MATCH (p1), (m)<-(r)->(p2) WHERE ID(p1) = idOfPerson AND NOT ID(p2) IN [ID(n)... errCtxOffset: 17",
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (p1) WHERE ID(p1) = 'X' WITH p1 MATCH (t)-[:MEMBER_OF {role}]->(:Team), count((s)-[*]->()) AS skillCount, collect({id:(ID($0))}) as teamIds RETURN reduce(teamIds[] as set, \n   ((a, b) ->  a.concat([b]))) in [x IN nodes(p1)]-[:REPORTS_TO]->() WHERE NOT EXISTS (((t)-[r*])-(s)) AND skillCount = 0 AS result LIMIT 5;",
            "generation_time": 0.9755637645721436,
            "execution_time": 0.001936197280883789,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '}': expected ':' line: 1, column: 66, offset: 65 errCtx: ...' WITH p1 MATCH (t)-[:MEMBER_OF {role}]->(:Team), count((s)-[*]->()) AS sk... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (s:Skill) WHERE s.category = 'Project' OR NOT EXISTS ((p1)-[:HAS_SKILL]->(s)) RETURN DISTINCT p2, collect((x:Person {name: none})-[]->(:Team), 50, false)[0] as members\nUNWIND range(3) AS x LIMIT 4 OFFSET (collect ((p1)-[:HAS_SKILL]->())[78]) * floor((size()/2)) + collect ((x:Person {name : none})-[]-(s),5,false)[0] as teamMembers\nMATCH(t:(Team) WITH t ORDER BY size([ (m)-[:ALLOCATED_TO ]->(:Project )  WHERE not member(m at before node(1)) IN [276..398]] LIMIT -x OFFSET x RETURN collect((p:Person {name : none})[0]-(t) MATCH ((r:-[])-[:HAS_SKILL]-> (s)),5,false)[4]) as teamWithSkills\nUNWIND [teamMembers + member(1)] AS tm WITH reduce(member in nodes(tm) where not node(member).name = 'Person' return collect((node(0)(x))-[a:ALLOCATED_TO]->(:Project)-[:HAS_SKILL]-(s),5,false)[2]) as teamWithSkills\nMATCH (p:(Policy {severity : 1})) WITH p ORDER BY size([r:-[]<-[(t):RESPONSIBLE_FOR ] WHERE NOT EXISTS ((m)-[:ALLOCATED_TO]-(s)) IN [73..9524]) LIMIT -x OFFSET x RETURN collect((p:Person {name : none})[0]->(:Team) MATCH (r:-[]-<[(t):RESPONSIBLE_FOR ] WHERE NOT EXISTS ((m)-[:ALLOCATED",
            "generation_time": 2.613909959793091,
            "execution_time": 0.0020558834075927734,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'I': expected LOAD CSV line: 2, column: 23, offset: 196 errCtx: UNWIND range(3) AS x LIMIT 4 OFFSET (collect ((p1)-[:HAS_SKILL]->())[78]) * f... errCtxOffset: 22",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person) WHERE p.name =~ '.*(?:[mM][aAnN][gG])' RETURN DISTINCT p LIMIT 10; -- Managers with highest seniority level at any point in time will be returned first, followed by the top managers who are currently managing more teams",
            "generation_time": 0.4952273368835449,
            "execution_time": 0.0018429756164550781,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (p1:Person)<-(r1:RESPONSIBLE_FOR)-(pol:Policy), (t2:Team {name:'X'}) WHERE p1 = t2 RETURN pol, r1 LIMIT 50; // Add the actual team name in ' X ', e.g., Find problematic areas responsible for Team ABC",
            "generation_time": 0.5243210792541504,
            "execution_time": 0.0016412734985351562,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p1)<-(r)-(:Person {name:\"AI Stuff\", role:'Manager'})->(t2) WHERE p1 = t2 RETURN count(*) AS cnt ORDER BY cnt DESC LIMIT 5;",
            "generation_time": 0.4076273441314697,
            "execution_time": 0.001712799072265625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '(': expected '-' or '[' line: 1, column: 13, offset: 12 errCtx: MATCH (p1)<-(r)-(:Person {name:\"AI Stuff\", role:'Manager'})->(t2) WHERE p1 = ... errCtxOffset: 12",
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(skill) WHERE skill.name = 'busFactorForCriticalProjects' RETURN COUNT(DISTINCT p), SUM((40 - CAST([startedAt] AS datetime)) / 60 DIV NULLIF(CAST([endDate] AS date)-[created_at].date, 1) as totalMinutesInBusFactor WHERE project.type = 'critical'",
            "generation_time": 0.6748793125152588,
            "execution_time": 0.001848459243774414,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'S': expected AND line: 1, column: 144, offset: 143 errCtx: ...INCT p), SUM((40 - CAST([startedAt] AS datetime)) / 60 DIV NULLIF(CAST([en... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH(p1:Person) WHERE toLower(p1.department) = 'X' OR p1.name CONTAINS '/^X/i' RETURN count(DISTINCT p1), collect(distinct p1)[0..2]  // Display first three members",
            "generation_time": 1.2523515224456787,
            "execution_time": 0.0025665760040283203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 1
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)<-[:MEMBER_OF {role:'X', is_lead: true}]-(t:Team), p2:(Skill) WHERE NOT (([s:SKILL] ->(+)) FROM 0..3 OUTBOUND WHERE t.id = id ) MATCH (p1)-[[r*]]-(:Person)--() AND r.[name CONTAINS 'X'] RETURN COUNT([x IN [((m)[2])...[s][:type] SUBSTRING(9, 0..3)",
            "generation_time": 0.7613711357116699,
            "execution_time": 0.001714468002319336,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected '=' line: 1, column: 71, offset: 70 errCtx: ...ole:'X', is_lead: true}]-(t:Team), p2:(Skill) WHERE NOT (([s:SKILL] ->(+))... errCtxOffset: 40",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p1:Person {name:'John'}) UNION MATCH (p2:Person {name:'Jon'}) RETURN p1 , p2; -- Union of both match patterns and return the union entities. Without LIMIT, there can be multiple results for each entity in case they have same names ('john', 'jon')",
            "generation_time": 0.5132379531860352,
            "execution_time": 0.0014743804931640625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p:Person)<-(r1:MEMBER_OF)-(t:Team {name:'data'})-[:REPORTS_TO]->(entity2:Office), ((person: Person, tz : Timezone)) WHERE p.id \u2260 person.manager_id AND TIMEZONE('+03:00',tz) = 'UTC'-((p)-[r1*]-(t)); DELETE r1;",
            "generation_time": 0.6611428260803223,
            "execution_time": 0.0013587474822998047,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (p:Person)<-(m:MemberOf)->(t:Team {name : 'X'}) WHERE m.is_lead = true RETURN p, t LIMIT 10; // Assuming X is the team name you are looking for and replace it with your actual parameter",
            "generation_time": 0.4505589008331299,
            "execution_time": 0.001443624496459961,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 24,
        "execution_success": 7,
        "has_results": 3,
        "pattern_matches": 6,
        "avg_generation_time": 0.9916306513327139,
        "avg_execution_time": 0.002633209581728335,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.0,
          "organizational_insights": 0.0,
          "edge_cases": 0.0
        }
      },
      "overall_score": 37.03703703703704
    },
    {
      "model": "llama3.2:3b",
      "timestamp": "2025-06-22T20:48:48.183934",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person) WHERE lower(p.role) = 'cto' OR lower(p.department) = 'cto' RETURN p.id, p.name, p.email",
            "generation_time": 4.90495491027832,
            "execution_time": 0.0014748573303222656,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team) WHERE t.department = 'engineering' RETURN t.id, t.name, t.focus",
            "generation_time": 0.3955554962158203,
            "execution_time": 0.0016436576843261719,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.id, p.name, p.email, o.name AS location",
            "generation_time": 0.5361001491546631,
            "execution_time": 0.002383708953857422,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)-[:HAS_SKILL]->(skill:Skill)\nWHERE p.role = 'Senior Engineer'\nAND skill.name IN ['Python', 'React']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority",
            "generation_time": 0.8555722236633301,
            "execution_time": 0.0020055770874023438,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (p:Policy)-[:UPDATED_IN {year: 2024}]-(entity)\nWHERE p.severity = 'CRITICAL'\nRETURN entity.id, p.name, p.description, p.severity",
            "generation_time": 0.5964455604553223,
            "execution_time": 0.0016939640045166016,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {is_lead: false}]->(p:Person)\nWITH t, COUNT(p) as memberCount\nWHERE memberCount > 10\nRETURN t.name, memberCount",
            "generation_time": 0.6413404941558838,
            "execution_time": 0.0019385814666748047,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person) WHERE LOWER(p.department) IN ['X', 'Y', 'Z']\nRETURN p.id, p.name, p.department, COUNT(DISTINCT p.id) as num_employees",
            "generation_time": 0.6077520847320557,
            "execution_time": 0.0014286041259765625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'LOWER'",
            "result_count": 0
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team)\n  LOAD RECURSION t.team_members\nWITH COLLECT(t.team_members) as team_members_list\nUNWIND team_members_list AS member\nWITH member, COUNT(member) as count\nRETURN department, AVG(count) as average_team_size",
            "generation_time": 0.7418308258056641,
            "execution_time": 0.001590728759765625,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'R': expected LOAD CSV line: 2, column: 8, offset: 22 errCtx:   LOAD RECURSION t.team_members errCtxOffset: 7",
            "result_count": 0
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office)\nWITH p, o, COUNT(p.seniority) AS seniority_count, COLLECT(DISTINCT o.region) AS locations\nRETURN o.name, COUNT(seniority_count) AS total_seniority_count, seniority_count, LOCATE(locations, 'senior') + LOCATE(locations, 'mid-level') + LOCATE(locations, 'junior') AS seniority_distribution, LOCATE(locations, 'senior') AS senior_percentage,\nLCASE(seniority) IN ['senior', 'mid-level', 'junior'] AS senior_level\nORDER BY senior_percentage DESC LIMIT 10",
            "generation_time": 1.671534776687622,
            "execution_time": 0.0017161369323730469,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'LOCATE'",
            "result_count": 0
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(manager)\nWHERE manager IN MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-()\nRETURN p.id, p.name, p.email, t.name AS department, t.role",
            "generation_time": 0.783785343170166,
            "execution_time": 0.0014257431030273438,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 2, column: 50, offset: 91 errCtx: WHERE manager IN MATCH (t:Team {name: 'data'})<-[:MEMBER_OF {is_lead: true}]-() errCtxOffset: 49",
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy), (t)-[:ALLOCATED_TO]->(p:Person)\nWHERE t.focus = 'Customer Project' AND p.role = 'Project Manager'\nRETURN pol.id, pol.name, pol.category, pol.description",
            "generation_time": 0.7767717838287354,
            "execution_time": 0.002085447311401367,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project), (proj)<-[r:WORKS_WITH]-(client:Client)\nWHERE lower(proj.type) CONTAINS 'financial' AND lower(p.role) CONTAINS 'engineer'\nRETURN p.id, p.name, p.email, p.department, p.role",
            "generation_time": 0.8765945434570312,
            "execution_time": 0.00128173828125,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH p=(person:Person)-[:REPORTS_TO*]-(manager)\nWHERE lower(person.role) = 'junior developer' OR lower(person.name) = 'ceo'\nRETURN p, manager",
            "generation_time": 0.593055009841919,
            "execution_time": 0.0013973712921142578,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (s:Team {name: 'Security'})-[:RESPONSIBLE_FOR]->(pol:Policy)\nOPTIONAL MATCH (p:Person)-[:MEMBER_OF]->(t:Team) WHERE t.name = 'Security'\nRETURN s.name, pol.id, pol.name, pol.category",
            "generation_time": 0.795170783996582,
            "execution_time": 0.002002716064453125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (t:Team {name: 'Product'})-[:MEMBER_OF {role: true}]->(p:Person)\nOPTIONAL MATCH (e:Person {role: 'Engineer'})\nRETURN t.name, p.name, e.name, t.focus, e.role, t.department, p.department",
            "generation_time": 0.8179042339324951,
            "execution_time": 0.0018837451934814453,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH p=(p:Person)-[r1]->()-[r2]->(p) WHERE r1.isLead OR r2.isLead RETURN p.id, p.name, p.email, p.role, p.manager_id, r1.role, r2.role",
            "generation_time": 0.7177515029907227,
            "execution_time": 0.02120375633239746,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person)<-[:HAS_SKILL]-(:Skill)\nWHERE NOT EXISTS (\n  MATCH (ot:Team)-[:MEMBER_OF]->(pt:Person)<-[:HAS_SKILL]-(:Skill)\n  WHERE ot <> t AND pt <> p\n)",
            "generation_time": 0.8588840961456299,
            "execution_time": 0.0014548301696777344,
            "syntax_valid": false,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 20, offset: 101 errCtx:   MATCH (ot:Team)-[:MEMBER_OF]->(pt:Person)<-[:HAS_SKILL]-(:Skill) errCtxOffset: 19",
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (t:Project)-[:NEEDS]->(s:Skill),\n     (p:Person)-[:ALLOCATED_TO]->(tp:Team),\n     (tp:Team)-[:MEMBER_OF {is_lead: true}]-(pp:Person)\nWHERE t.status = 'Ongoing' OR t.status = 'Closed'\nAND s.name NOT IN (\n  SELECT distinct(s1.name) \n  FROM (p)-[:HAS_SKILL]->(s1)\n  JOIN (tp)-[:ALLOCATED_TO]->(s2) \n  WHERE pp.name = p.name AND tp.id = s2.team_id\n)\nRETURN t.name AS project_name, s.name AS skill_name, pp.name AS team_member_name",
            "generation_time": 1.7272040843963623,
            "execution_time": 0.0014982223510742188,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'd': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, ',' or ')' line: 6, column: 10, offset: 218 errCtx:   SELECT distinct(s1.name)  errCtxOffset: 9",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person) WHERE lower(p.name) OR lower(p.email) OR lower(p.role) OR lower(p.seniority) RETURN p.id, p.name, p.email, p.role, p.seniority",
            "generation_time": 0.6554479598999023,
            "execution_time": 0.0014221668243408203,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (p:Person)-[:REPORTS_TO]->(senior) WHERE senior.seniority = 'Problematic' OR (p.department, p.location) IN ['HR', 'Risk Management'] RETURN p.name, p.email, p.department, p.location",
            "generation_time": 0.7373397350311279,
            "execution_time": 0.0014307498931884766,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ',': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label or ')' line: 1, column: 97, offset: 96 errCtx: ...rity = 'Problematic' OR (p.department, p.location) IN ['HR', 'Risk Managem... errCtxOffset: 40",
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(skill:Skill) WHERE toLower(skill.name) CONTAINS 'ai' RETURN p.id, p.name, p.email, p.role, p.department",
            "generation_time": 0.603060245513916,
            "execution_time": 0.005001544952392578,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 45
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(project:Project)\nWHERE project.type = 'Critical'\nWITH collect(DISTINCT p) as team_members\nWITH size(team_members) as total_members, count(distinct(p) - [p]) as critical_members\nRETURN total_members, critical_members",
            "generation_time": 0.974729061126709,
            "execution_time": 0.0015444755554199219,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'p' not defined",
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)-[:RESPONSIBLE_FOR]->(pol:Policy)\nWITH t, col = collect(DISTINCT pol.category) + ' ', col = toLower(col)\nWHERE NOT any(c in elements(col) where exists((pol)<-[:RESPONSIBLE_FOR]-(:Person)))\nRETURN t.name, col, COLLECT(DISTINCT p.name)",
            "generation_time": 0.9936304092407227,
            "execution_time": 0.0015211105346679688,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "'col' not defined",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF {role: true}]->(p:Person)\nWHERE t.id NOT IN (\n  MATCH (t:Team)-[:MEMBER_OF]->(p:Person)\n  RETURN p.id\n) AND size((p:Person)-[:HAS_SKILL]->())=1",
            "generation_time": 0.8815910816192627,
            "execution_time": 0.0015156269073486328,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 19, offset: 91 errCtx:   MATCH (t:Team)-[:MEMBER_OF]->(p:Person) errCtxOffset: 18",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\nWHERE lower(p.name) CONTAINS 'john' OR lower(p.name) CONTAINS 'jon'\nRETURN p; LIMIT 100",
            "generation_time": 0.5111105442047119,
            "execution_time": 0.003629446029663086,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Error: query with more than one statement is not supported.",
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {role: 'data'}]->(t:Team)<-[:RESPONSIBLE_FOR]-(pol:Policy), (r:Group)<-[:RESPONSIBLE_FOR]-(pol)\nOPTIONAL MATCH (p)-[r]-()\nWITH DISTINCT p, t\nWHERE NOT p.member_of = []\nRETURN p.name, t.name, pol.name, r.type",
            "generation_time": 1.0843620300292969,
            "execution_time": 0.0016531944274902344,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "The alias 'r' was specified for both a node and a relationship.",
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team {name: 'Find team leads'})<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.id, p.name, t.id, t.name",
            "generation_time": 0.6096367835998535,
            "execution_time": 0.0020034313201904297,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 26,
        "execution_success": 11,
        "has_results": 1,
        "pattern_matches": 8,
        "avg_generation_time": 0.9610783612286603,
        "avg_execution_time": 0.0025863382551405164,
        "category_scores": {
          "simple_lookups": 0.6666666666666666,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.0,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 0.3333333333333333,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 42.59259259259259
    },
    {
      "model": "qwen2.5-coder:7b",
      "timestamp": "2025-06-22T20:49:14.204351",
      "categories": {
        "simple_lookups": [
          {
            "query": "Who is the CTO?",
            "generated_cypher": "MATCH (p:Person {role: 'CTO'})\nRETURN p.name, p.email, p.department, p.location\nLIMIT 1",
            "generation_time": 9.97161078453064,
            "execution_time": 0.001865386962890625,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "List all teams in the engineering department",
            "generated_cypher": "MATCH (t:Team {department: 'Engineering'})\nRETURN t.name AS team_name, t.focus AS team_focus LIMIT 100",
            "generation_time": 0.9463992118835449,
            "execution_time": 0.0017399787902832031,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 4
          },
          {
            "query": "Find employees in the Berlin office",
            "generated_cypher": "MATCH (p:Person)-[:WORKS_AT]->(o:Office {name: 'Berlin'})\nRETURN p.name AS employee_name, p.email AS email, p.department AS department, p.role AS role\nLIMIT 10",
            "generation_time": 1.330920934677124,
            "execution_time": 0.001775979995727539,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "filtered_searches": [
          {
            "query": "Show me senior engineers with Python and React skills",
            "generated_cypher": "MATCH (p:Person {role: 'Engineer', seniority: 'Senior'})<-[:HAS_SKILL]->(s:Skill {name: toLower('Python')})\nWHERE EXISTS((p)-[:HAS_SKILL]->(:Skill {name: toLower('React')}))\nRETURN p.name, p.email, p.department, p.role, p.seniority\nLIMIT 10",
            "generation_time": 2.007840871810913,
            "execution_time": 0.0016608238220214844,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(p)-[:HAS_SKILL]->(:Skill {name: toLower('React')})'",
            "result_count": 0
          },
          {
            "query": "Find all critical security policies updated this year",
            "generated_cypher": "MATCH (pol:Policy {category: 'security', severity: 'critical'})\nWHERE pol.updated_at >= date(\"2023-01-01\") AND pol.updated_at < date(\"2024-01-01\")\nRETURN pol.name, pol.description, pol.category, pol.severity, pol.updated_at",
            "generation_time": 1.7662084102630615,
            "execution_time": 0.001352548599243164,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'date'",
            "result_count": 0
          },
          {
            "query": "Which teams have more than 10 members?",
            "generated_cypher": "MATCH (t:Team)-[r:MEMBER_OF]->(p:Person)\nWITH t.name AS teamName, count(r) AS memberCount\nWHERE memberCount > 10\nRETURN teamName, memberCount\nORDER BY memberCount DESC;",
            "generation_time": 1.4444551467895508,
            "execution_time": 0.0019948482513427734,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "aggregations": [
          {
            "query": "How many people work in each department?",
            "generated_cypher": "MATCH (p:Person)\nRETURN p.department AS department, count(*) AS employee_count\nORDER BY department;",
            "generation_time": 0.8168356418609619,
            "execution_time": 0.0018448829650878906,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 15
          },
          {
            "query": "What's the average team size across all departments?",
            "generated_cypher": "MATCH (t:Team)\nWITH t.department AS department, COUNT(t) AS team_size\nRETURN department, AVG(team_size) AS avg_team_size\nORDER BY avg_team_size DESC;",
            "generation_time": 1.1181256771087646,
            "execution_time": 0.001798391342163086,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 11
          },
          {
            "query": "Show the distribution of seniority levels by location",
            "generated_cypher": "MATCH (p:Person)\nRETURN p.location AS Location, p.seniority AS Seniority, count(*) AS Count\nORDER BY Location, Seniority\nLIMIT 100;",
            "generation_time": 1.1355054378509521,
            "execution_time": 0.0045032501220703125,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 84
          }
        ],
        "multi_hop_relationships": [
          {
            "query": "Find all people who report to someone in the data team",
            "generated_cypher": "MATCH (dataTeam:Team {name: 'Data'})<-[:MEMBER_OF {is_lead: true}]-(manager:Person)-[:REPORTS_TO*1..2]-(employee:Person)\nRETURN employee.name, employee.email, employee.department, employee.role\nLIMIT 50;",
            "generation_time": 1.5557887554168701,
            "execution_time": 0.002236604690551758,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which policies affect teams working on customer projects?",
            "generated_cypher": "MATCH (pol:Policy)-[:RESPONSIBLE_FOR]->(team:Team)-[m:MEMBER_OF]->(proj:Project {type: 'customer'})\nRETURN pol.name AS policy_name, pol.category AS policy_category, pol.description AS policy_description\nLIMIT 10;",
            "generation_time": 1.514164924621582,
            "execution_time": 0.001695871353149414,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show me engineers who work with clients in the financial sector",
            "generated_cypher": "MATCH (p:Person {role: 'engineer'})<-[:ALLOCATED_TO]->(proj:Project)-[wjc:WORKS_WITH]->(c:Client {industry: 'financial'})\nRETURN p.name, p.email, c.name AS client_name, c.industry, proj.name AS project_name\nLIMIT 10;",
            "generation_time": 1.739917516708374,
            "execution_time": 0.001873016357421875,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "path_finding": [
          {
            "query": "What's the reporting chain from junior developers to the CEO?",
            "generated_cypher": "MATCH path = (juniorDeveloper:Person {role: 'Junior Developer'})<-[:REPORTS_TO*]-(manager:Person)\nWHERE toLower(manager.role) = 'ceo'\nRETURN path\nLIMIT 1",
            "generation_time": 1.4642210006713867,
            "execution_time": 0.0018849372863769531,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find all connections between the security team and compliance policies",
            "generated_cypher": "MATCH (t:Team {name: 'security'})<-[:MEMBER_OF]-(p:Person)-[:RESPONSIBLE_FOR]->(pol:Policy)\nRETURN p.name AS person_name, pol.name AS policy_name, pol.category AS policy_category, pol.description AS policy_description",
            "generation_time": 1.5682952404022217,
            "execution_time": 0.0018777847290039062,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Show how the product team collaborates with engineering",
            "generated_cypher": "MATCH (p1:Person)-[:MEMBER_OF {role: 'Collaborator'}]-(t:Team {name: toLower('product')})\nWITH p1, t\nMATCH (p2:Person)-[:MEMBER_OF {role: 'Collaborator'}]-(t)\nWHERE p1 <> p2\nRETURN p1.name AS Product_Collaborator,\n       p2.name AS Engineering_Collaborator,\n       count(DISTINCT t) AS Number_of_Teams_Shared\nLIMIT 10;",
            "generation_time": 2.6725597381591797,
            "execution_time": 0.002402782440185547,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "complex_patterns": [
          {
            "query": "Find circular reporting structures (people who indirectly report to themselves)",
            "generated_cypher": "MATCH p = (p1:Person)-[:REPORTS_TO*]->(p2:Person)\nWHERE id(p1) = id(p2) AND length(p) > 1\nRETURN DISTINCT p1.id, p1.name, collect(DISTINCT p2.id) AS indirect_reports\nLIMIT 50;",
            "generation_time": 1.7136287689208984,
            "execution_time": 0.002187490463256836,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Which teams have members with skills that no other team has?",
            "generated_cypher": "MATCH (t:Team)-[:MEMBER_OF]->(p:Person)-[:HAS_SKILL]->(s:Skill)\nWITH t.name AS team_name, collect(s.name) AS skills\nWHERE size([s IN skills WHERE NOT EXISTS((t2:Team)-[:MEMBER_OF]->(p2:Person)-[:HAS_SKILL]->(s))]) > 0\nRETURN team_name, skills\nLIMIT 10;",
            "generation_time": 2.187162399291992,
            "execution_time": 0.0018367767333984375,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Identify skill gaps: skills needed by projects but not possessed by allocated team members",
            "generated_cypher": "MATCH (p1:Person)-[:ALLOCATED_TO]->(proj:Project)\nWITH proj, collect(DISTINCT p1.id) AS team_members\nUNWIND proj.skills AS required_skill\nWHERE NOT exists((p2:Person WHERE p2.id IN team_members)-[:HAS_SKILL]->(required_skill))\nRETURN required_skill.name AS skill_gap",
            "generation_time": 1.8599331378936768,
            "execution_time": 0.0012679100036621094,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input 'H': expected WITH line: 4, column: 2, offset: 139 errCtx: WHERE NOT exists((p2:Person WHERE p2.id IN team_members)-[:HAS_SKILL]->(requi... errCtxOffset: 1",
            "result_count": 0
          }
        ],
        "ambiguous_requests": [
          {
            "query": "Show me the important people",
            "generated_cypher": "MATCH (p:Person {seniority: 'important'})\nRETURN p.name, p.email, p.department, p.role\nLIMIT 10",
            "generation_time": 0.9854638576507568,
            "execution_time": 0.0015575885772705078,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Find problematic areas in the organization",
            "generated_cypher": "MATCH (i:Incident) WHERE i.severity > 1\nRETURN i.id AS incident_id, i.description AS issue_description, i.created_at AS created_on, i.resolved_at AS resolved_on\nLIMIT 10",
            "generation_time": 1.197404384613037,
            "execution_time": 0.0016558170318603516,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "Who should I talk to about AI stuff?",
            "generated_cypher": "MATCH (p:Person)-[:HAS_SKILL]->(s:Skill {name: 'AI'})\nRETURN p.name AS PersonName, p.email AS Email, p.department AS Department, p.role AS Role\nLIMIT 10",
            "generation_time": 1.3241181373596191,
            "execution_time": 0.0015006065368652344,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          }
        ],
        "organizational_insights": [
          {
            "query": "What's the bus factor for critical projects? (how many people would need to leave to endanger the project)",
            "generated_cypher": "MATCH (p:Person)-[:ALLOCATED_TO]->(proj:Project {status: 'critical'})\nWITH proj, collect(p) AS team_members\nRETURN proj.name AS project_name, size(team_members) AS team_size, size(filter(m in team_members | m.role = 'lead')) AS lead_count",
            "generation_time": 1.631594181060791,
            "execution_time": 0.0013363361358642578,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input '|': expected '.', '(', AND, OR, XOR, NOT, '=~', '=', '<>', '+', '-', '*', '/', '%', '^', IN, CONTAINS, STARTS WITH, ENDS WITH, '<=', '>=', '<', '>', IS NULL, IS NOT NULL, '[', '{', a label, WHERE, ')' or ',' line: 3, column: 98, offset: 205 errCtx: ...AS team_size, size(filter(m in team_members | m.role = 'lead')) AS lead_count errCtxOffset: 47",
            "result_count": 0
          },
          {
            "query": "Find potential compliance violations: teams without required policy training",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nWHERE NOT EXISTS ((p)-[:MEMBER_OF]->(:Group {name: 'Policy Training'}))\nRETURN t.name AS TeamName, t.department AS Department\nLIMIT 10;",
            "generation_time": 1.5616002082824707,
            "execution_time": 0.0016217231750488281,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "Unable to resolve filtered alias '(p)-[:MEMBER_OF]->(:Group {name: 'Policy Training'})'",
            "result_count": 0
          },
          {
            "query": "Identify knowledge silos: skills possessed by only one person in a team",
            "generated_cypher": "MATCH (p1:Person)-[:HAS_SKILL]->(s:Skill)\nWHERE NOT EXISTS (\n  MATCH (p2:Person)-[:HAS_SKILL]->(s)\n  WHERE p2 <> p1 AND (p2 MEMBERSHIP_OF OR p2 REPORTS_TO) ANYOF (p1 MEMBERSHIP_OF OR p1 REPORTS_TO)\n)\nRETURN s.name AS skill_name, COUNT(DISTINCT p1) AS num_people\nLIMIT 10;",
            "generation_time": 2.3530311584472656,
            "execution_time": 0.0014014244079589844,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": "errMsg: Invalid input ':': expected an identifier, '(', NOT, '+', '-', TRUE, FALSE, NULL, \"...string...\", a float, an integer, '[', a parameter, '{', CASE, FILTER, EXTRACT, REDUCE, ALL, ANY, NONE, SINGLE, shortestPath, allShortestPaths, a function name or ']' line: 3, column: 22, offset: 82 errCtx:   MATCH (p2:Person)-[:HAS_SKILL]->(s) errCtxOffset: 21",
            "result_count": 0
          }
        ],
        "edge_cases": [
          {
            "query": "Find people named John or Jon (handle name variations)",
            "generated_cypher": "MATCH (p:Person)\nWHERE lower(p.name) IN ['john', 'jon']\nRETURN p.id, p.name, p.email, p.department, p.role, p.seniority, p.location, p.timezone, p.manager_id, p.hire_date\nLIMIT 10",
            "generation_time": 1.5657823085784912,
            "execution_time": 0.0013301372528076172,
            "syntax_valid": true,
            "execution_success": false,
            "has_results": false,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": "Unknown function 'lower'",
            "result_count": 0
          },
          {
            "query": "What happens if everyone in the data team leaves?",
            "generated_cypher": "MATCH (p:Person)-[:MEMBER_OF {role: 'data team member'}]->(t:Team)\nWITH t\nOPTIONAL MATCH (t)<-[:RESPONSIBLE_FOR]-(pol:Policy)\nRETURN t.name AS team_name, pol.name AS policy_responsible, COUNT(pol) AS policies_responsible\nLIMIT 10;",
            "generation_time": 1.8039875030517578,
            "execution_time": 0.002228260040283203,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": false,
            "pattern_match": false,
            "complexity_appropriate": false,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 0
          },
          {
            "query": "\u03c0\u0178'\u20af Find team leads \u03c0\u0178'\u20af",
            "generated_cypher": "MATCH (t:Team)<-[:MEMBER_OF {is_lead: true}]-(p:Person)\nRETURN p.name AS TeamLeadName, p.email AS TeamLeadEmail, t.name AS TeamName\nLIMIT 10",
            "generation_time": 1.3264000415802002,
            "execution_time": 0.0021333694458007812,
            "syntax_valid": true,
            "execution_success": true,
            "has_results": true,
            "pattern_match": true,
            "complexity_appropriate": true,
            "handles_ambiguity": true,
            "error": null,
            "result_count": 10
          }
        ]
      },
      "overall_metrics": {
        "total_queries": 27,
        "syntax_valid": 27,
        "execution_success": 20,
        "has_results": 5,
        "pattern_matches": 11,
        "avg_generation_time": 1.872702051092077,
        "avg_execution_time": 0.0018727602782072845,
        "category_scores": {
          "simple_lookups": 1.0,
          "filtered_searches": 0.0,
          "aggregations": 0.0,
          "multi_hop_relationships": 0.6666666666666666,
          "path_finding": 0.0,
          "complex_patterns": 0.0,
          "ambiguous_requests": 1.0,
          "organizational_insights": 0.0,
          "edge_cases": 0.3333333333333333
        }
      },
      "overall_score": 58.33333333333333
    }
  ],
  "rankings": [
    {
      "model": "qwen2.5-coder:7b",
      "score": 58.33333333333333
    },
    {
      "model": "llama3.2:3b",
      "score": 42.59259259259259
    },
    {
      "model": "deepseek-coder:1.3b",
      "score": 37.03703703703704
    }
  ]
}