api-1  | INFO:     Will watch for changes in these directories: ['/app']
api-1  | INFO:     Uvicorn running on http://0.0.0.0:8000 (Press CTRL+C to quit)
api-1  | INFO:     Started reloader process [1] using StatReload
api-1  | INFO:     Started server process [8]
api-1  | INFO:     Waiting for application startup.
api-1  | INFO:     Application startup complete.
api-1  | INFO:     172.19.0.1:59616 - "WebSocket /ws" [accepted]
api-1  | INFO:     connection open
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "How many departments are there."\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895a0b590>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:02:17 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:02:17.782260321Z', 'response': '{\n  "reasoning": "The user is asking for a count of distinct departments within the organization. This involves counting entities without needing relationship information, which aligns with the \'search_database\' use case.",\n  "tools": ["search_database", "store_message"],\n  "response_type": "search"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 8257, 5075, 26811, 1728, 884, 2017, 3107, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 436, 312, 2385, 432, 19088, 26811, 1728, 4797, 322, 12083, 32, 1348, 37383, 33404, 11740, 2876, 41905, 12112, 2471, 30, 1510, 3014, 101, 623, 322, 330, 1903, 81, 4603, 25, 793, 1135, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111], 'total_duration': 3432902961, 'load_duration': 1217396677, 'prompt_eval_count': 1430, 'prompt_eval_duration': 713854446, 'eval_count': 70, 'eval_duration': 1500388904}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | INFO:root:Executing full-text search query: CALL db.idx.fulltext.queryNodes('all_text_search', 'How many departments are there.') YIELD node, score
api-1  |         RETURN node, score, labels(node) as labels
api-1  |         LIMIT 25
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "How many departments are there."\n\nDatabase results:\n{\'people\': [], \'teams\': [], \'groups\': [], \'policies\': [], \'messages\': []}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895063790>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:02:21 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:02:21.137024878Z', 'response': "## Answer to Your Query:\n\nThere are **0 departments** found in the current data set.\n\n### No Departments Matching Your Request\n\nUnfortunately, the database doesn't contain any records for departments at this time. \n\nIf you believe there should be department information present or if you need assistance in setting up department-related data, please consult with your IT or data management team. They can help you define the structure and populate relevant details about departments, teams, groups, policies, and contacts. \n\nFor any future queries related to these categories, ensure that the necessary data fields are correctly filled out and updated regularly for accurate results.", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 8257, 5075, 26811, 1728, 884, 2017, 3107, 203, 203, 3954, 3276, 44, 203, 12157, 16607, 950, 5518, 330, 16916, 950, 5518, 330, 6332, 950, 5518, 330, 16669, 950, 5518, 330, 6286, 950, 1605, 111, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 433, 23574, 372, 10604, 6645, 44, 203, 203, 8309, 884, 1115, 34, 26811, 1728, 326, 2431, 328, 322, 1550, 706, 739, 32, 203, 203, 1482, 3139, 5391, 502, 1728, 12253, 299, 10604, 4448, 203, 203, 44808, 30, 322, 3500, 4163, 1330, 4799, 1346, 9212, 436, 26811, 1728, 821, 458, 1133, 32, 1659, 203, 2797, 844, 13710, 2017, 1395, 526, 23572, 2471, 5024, 556, 415, 844, 1849, 47221, 328, 5748, 973, 23572, 31, 10513, 706, 30, 4322, 13655, 623, 1370, 17399, 556, 706, 11146, 6498, 32, 11228, 883, 3049, 844, 5597, 322, 5193, 461, 18967, 10088, 4245, 2625, 26811, 1728, 30, 18920, 30, 8351, 30, 20608, 30, 461, 26910, 32, 1659, 203, 1562, 1346, 7062, 11792, 5886, 372, 3282, 12770, 30, 7279, 688, 322, 7506, 706, 3829, 884, 8464, 15732, 963, 461, 4459, 10605, 631, 436, 26572, 3276, 32], 'total_duration': 3333612542, 'load_duration': 6979382, 'prompt_eval_count': 830, 'prompt_eval_duration': 260811847, 'eval_count': 139, 'eval_duration': 3065381494}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "how many employees"\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89506cd10>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:02:41 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:02:41.212344913Z', 'response': '{\n  "reasoning": "The user is asking for a count of employees which falls under the category of organizational analysis, specifically department analysis. This requires querying the database for the number of people in a specific department.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 6893, 5075, 28990, 20, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 436, 312, 2385, 432, 28990, 1510, 39394, 1531, 322, 6215, 432, 12083, 279, 9209, 30, 21473, 23572, 9209, 32, 1348, 7171, 38654, 322, 3500, 436, 322, 1451, 432, 7024, 328, 312, 2818, 23572, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111], 'total_duration': 2339958112, 'load_duration': 10857471, 'prompt_eval_count': 1427, 'prompt_eval_duration': 694573450, 'eval_count': 71, 'eval_duration': 1634087967}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:query_patterns:No pattern matched for query: how many employees
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an expert in generating Cypher queries for FalkorDB.\nYour task is to convert a natural language question into a Cypher query that retrieves data from a graph database.\nThe graph has the following schema:\n\nNodes:\n- Person: id, name, email, department, role, location, manager_id, hire_date\n- Team: id, name, department, focus\n- Group: id, name, type, description\n- Policy: id, name, category, description, severity\n- Message: id, sender_id, content, channel, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF]->(Team)\n- (Person)-[:MEMBER_OF]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR]->(Policy)\n\nInstructions:\n1.  Analyze the user\'s question to identify the key entities, relationships, and properties.\n2.  Construct a Cypher query that accurately retrieves the requested information.\n3.  The query must be a SINGLE Cypher statement. Do not use multiple statements, semicolons, or conditional logic.\n4.  Your response must contain ONLY the Cypher query on a single line, with absolutely no other text, explanations, comments, or additional queries.\n5.  Always return the `id` property of the nodes in the result, along with any other requested properties.\n6.  For questions about teams or people, also return the `department`.\n7.  Return a maximum of 25 results unless otherwise specified.\n8.  For date comparisons, use string comparisons since dates are stored as ISO 8601 strings (e.g., WHERE p.hire_date > \'2024-01-01\').\n9.  When returning nodes, also return their labels.\n10. Be careful with relationship directions:\n    - Person-[:MEMBER_OF]->Team/Group (Person is member of Team/Group)\n    - Person-[:REPORTS_TO]->Person (first person reports to second person)\n    - Team/Group-[:RESPONSIBLE_FOR]->Policy (Team/Group is responsible for Policy)\n11. WHERE clauses must be placed AFTER the entire pattern, not inside node patterns. \n    - Correct: MATCH (p:Person)-[:MEMBER_OF]->(t:Team) WHERE t.name = \'Engineering\'\n    - Wrong: MATCH (p:Person)-[:MEMBER_OF]->(t:Team WHERE t.name = \'Engineering\')\n12. IMPORTANT: Detect role vs name queries:\n    - Role titles (CTO, CEO, Director, Manager, Lead, VP, President) should search by role property\n    - Person names should search by name property\n    - "the CTO" or "our CTO" means search WHERE role CONTAINS \'CTO\'\n    - "John Smith" or "Sarah" means search WHERE name CONTAINS \'John Smith\' or name CONTAINS \'Sarah\'\n13. Use fuzzy matching with CONTAINS for better results:\n    - For names: Use CONTAINS for partial matches (e.g., WHERE name CONTAINS \'Sarah\')\n    - For teams: Use CONTAINS for partial matches (e.g., WHERE t.name CONTAINS \'mobile\' OR t.name CONTAINS \'Mobile\')\n    - For roles: Use CONTAINS for variations (e.g., WHERE role CONTAINS \'CTO\' OR role CONTAINS \'Chief Technology\')\n    - For policies: Use CONTAINS for categories (e.g., WHERE p.category CONTAINS \'compliance\' OR p.name CONTAINS \'compliance\')\n14. CRITICAL: Output ONLY a single valid Cypher query on ONE LINE. No explanations, no comments, no notes, no additional text before or after the query. Just the Cypher query itself.\n\nCommon Query Patterns:\n\nFinding team members with fuzzy matching:\n- Question: "Who\'s on the mobile team?"\n- Query: MATCH (p:Person)-[:MEMBER_OF]->(t:Team) WHERE t.name CONTAINS \'mobile\' OR t.name CONTAINS \'Mobile\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nFinding managers by name (partial match):\n- Question: "Who is Sarah\'s manager?"\n- Query: MATCH (p:Person)-[:REPORTS_TO]->(m:Person) WHERE p.name CONTAINS \'Sarah\' RETURN m.id, m.name, m.email, m.department, m.role, labels(m) as labels\n\nFinding policy owners with fuzzy category matching:\n- Question: "Who\'s responsible for compliance policies?"\n- Query: MATCH (t)-[:RESPONSIBLE_FOR]->(p:Policy) WHERE p.category CONTAINS \'compliance\' OR p.name CONTAINS \'compliance\' OR p.description CONTAINS \'compliance\' RETURN t.id, t.name, labels(t) as labels, p.id, p.name, p.category, p.severity LIMIT 25\n\nFinding people by department (case insensitive):\n- Question: "Show me people in engineering"\n- Query: MATCH (p:Person) WHERE p.department CONTAINS \'engineering\' OR p.department CONTAINS \'Engineering\' RETURN p.id, p.name, p.email, p.role, labels(p) as labels LIMIT 25\n\nFinding group members with partial matching:\n- Question: "Who\'s in the governance group?"\n- Query: MATCH (p:Person)-[:MEMBER_OF]->(g:Group) WHERE g.name CONTAINS \'governance\' OR g.name CONTAINS \'Governance\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nFinding people who report to a role (not name):\n- Question: "Show me people who report to the CTO"\n- Query: MATCH (p:Person)-[:REPORTS_TO]->(m:Person) WHERE m.role CONTAINS \'CTO\' OR m.role CONTAINS \'Chief Technology\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nFinding people by role with multiple variations:\n- Question: "Who are the team leads?"\n- Query: MATCH (p:Person) WHERE p.role CONTAINS \'Lead\' OR p.role CONTAINS \'lead\' OR p.role CONTAINS \'Manager\' OR p.role CONTAINS \'manager\' OR p.role CONTAINS \'Head\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nQuestion: "how many employees"\nQuery:', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89506de10>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:02:42 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:02:42.22044174Z', 'response': 'MATCH (p:Person) RETURN count(p)', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 30895, 328, 17335, 22350, 36149, 11792, 436, 506, 3724, 271, 1996, 32, 203, 10195, 2899, 438, 372, 4483, 312, 19844, 2898, 7000, 1991, 312, 22350, 36149, 2467, 688, 41633, 706, 645, 312, 3996, 3500, 32, 203, 1318, 3996, 1401, 322, 2412, 5365, 44, 203, 203, 5909, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 3894, 30, 7884, 81, 314, 30, 420, 548, 81, 770, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 827, 30, 3048, 203, 31, 15310, 44, 804, 30, 636, 30, 6215, 30, 3048, 30, 25017, 203, 31, 4578, 44, 804, 30, 7045, 81, 314, 30, 1795, 30, 3826, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 6583, 26, 4248, 27, 203, 203, 24817, 44, 203, 35, 32, 225, 2244, 12884, 322, 1256, 1182, 7000, 372, 12411, 322, 1202, 11740, 30, 25041, 30, 461, 4308, 32, 203, 36, 32, 225, 12968, 312, 22350, 36149, 2467, 688, 21726, 12225, 41633, 322, 8843, 2471, 32, 203, 37, 32, 225, 886, 2467, 2298, 526, 312, 358, 47259, 22350, 36149, 7603, 32, 3278, 646, 793, 4609, 15252, 30, 8794, 18658, 2612, 30, 556, 21161, 8130, 32, 203, 38, 32, 225, 10604, 1789, 2298, 4799, 28222, 322, 22350, 36149, 2467, 544, 312, 3982, 1628, 30, 623, 39364, 1289, 1604, 1344, 30, 538, 5623, 993, 30, 8446, 30, 556, 5388, 11792, 32, 203, 39, 32, 225, 25144, 442, 322, 529, 314, 82, 2804, 432, 322, 5166, 328, 322, 1056, 30, 7947, 623, 1346, 1604, 8843, 4308, 32, 203, 40, 32, 225, 2616, 10017, 2625, 18920, 556, 7024, 30, 2329, 442, 322, 529, 18495, 2541, 203, 41, 32, 225, 2744, 312, 7091, 432, 225, 36, 39, 3276, 7351, 5878, 3191, 32, 203, 42, 32, 225, 2616, 2340, 43399, 30, 793, 802, 43399, 4558, 18719, 884, 7107, 619, 19687, 225, 42, 40, 34, 35, 5852, 308, 87, 32, 89, 4317, 4998, 298, 32, 90, 548, 81, 770, 848, 330, 36, 34, 36, 38, 31, 34, 35, 31, 34, 35, 1814, 203, 43, 32, 225, 5076, 14116, 5166, 30, 2329, 442, 3623, 6492, 32, 203, 35, 34, 32, 4261, 34942, 623, 12112, 29038, 44, 284, 429, 11038, 31, 2867, 7239, 81, 2109, 6583, 8237, 33, 1564, 308, 6005, 438, 5809, 432, 12641, 33, 1564, 27, 284, 429, 11038, 31, 2867, 25252, 69, 81, 1407, 6583, 6005, 308, 2232, 4916, 14201, 372, 3100, 4916, 27, 284, 429, 12641, 33, 1564, 31, 2867, 15812, 567, 2123, 14507, 81, 7321, 6583, 4248, 308, 8237, 33, 1564, 438, 18392, 436, 15310, 27, 203, 35, 35, 32, 4998, 37344, 2298, 526, 17180, 48048, 322, 9449, 5257, 30, 646, 6517, 1541, 15103, 32, 3701, 429, 30713, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 102, 44, 8237, 27, 4998, 273, 32, 426, 280, 330, 3711, 8637, 25, 284, 429, 37527, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 102, 44, 8237, 4998, 273, 32, 426, 280, 330, 3711, 8637, 683, 203, 35, 36, 32, 33669, 4516, 44, 25967, 4203, 8480, 636, 11792, 44, 284, 429, 13936, 27840, 308, 935, 65, 30, 390, 10209, 30, 13254, 271, 30, 10702, 30, 39066, 30, 676, 66, 30, 30193, 4840, 27, 1395, 3233, 810, 4203, 2804, 284, 429, 11038, 4467, 1395, 3233, 810, 636, 2804, 284, 429, 313, 1382, 390, 1407, 20, 556, 313, 515, 390, 1407, 20, 6058, 3233, 4998, 4203, 2198, 5794, 14008, 330, 935, 65, 25, 284, 429, 313, 19693, 35142, 20, 556, 313, 47063, 2371, 20, 6058, 3233, 4998, 636, 2198, 5794, 14008, 330, 19693, 35142, 25, 556, 636, 2198, 5794, 14008, 330, 47063, 2371, 25, 203, 35, 37, 32, 4417, 42687, 9215, 623, 2198, 5794, 14008, 436, 6085, 3276, 44, 284, 429, 2616, 4467, 44, 4417, 2198, 5794, 14008, 436, 7360, 8001, 308, 87, 32, 89, 4317, 4998, 636, 2198, 5794, 14008, 330, 47063, 2371, 683, 284, 429, 2616, 18920, 44, 4417, 2198, 5794, 14008, 436, 7360, 8001, 308, 87, 32, 89, 4317, 4998, 273, 32, 426, 2198, 5794, 14008, 330, 7747, 25, 1878, 273, 32, 426, 2198, 5794, 14008, 330, 11355, 683, 284, 429, 2616, 13479, 44, 4417, 2198, 5794, 14008, 436, 40514, 308, 87, 32, 89, 4317, 4998, 4203, 2198, 5794, 14008, 330, 935, 65, 25, 1878, 4203, 2198, 5794, 14008, 330, 828, 21918, 21909, 683, 284, 429, 2616, 20608, 44, 4417, 2198, 5794, 14008, 436, 12770, 308, 87, 32, 89, 4317, 4998, 298, 32, 3153, 2198, 5794, 14008, 330, 35271, 25, 1878, 298, 32, 426, 2198, 5794, 14008, 330, 35271, 683, 203, 35, 38, 32, 9964, 28758, 44, 5582, 28222, 312, 3982, 2080, 22350, 36149, 2467, 544, 27143, 26543, 32, 3139, 538, 5623, 993, 30, 1289, 8446, 30, 1289, 10173, 30, 1289, 5388, 1344, 2670, 556, 2685, 322, 2467, 32, 9077, 322, 22350, 36149, 2467, 8015, 32, 203, 203, 5240, 6645, 13409, 101, 44, 203, 203, 41189, 6498, 8999, 623, 42687, 9215, 44, 203, 31, 15196, 44, 313, 27868, 1182, 544, 322, 10915, 6498, 12791, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 102, 44, 8237, 27, 4998, 273, 32, 426, 2198, 5794, 14008, 330, 7747, 25, 1878, 273, 32, 426, 2198, 5794, 14008, 330, 11355, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 41189, 39143, 810, 636, 308, 9865, 2530, 711, 203, 31, 15196, 44, 313, 27868, 438, 48804, 2371, 1182, 7884, 12791, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 95, 44, 6005, 27, 4998, 298, 32, 426, 2198, 5794, 14008, 330, 47063, 2371, 25, 18546, 345, 32, 314, 30, 345, 32, 426, 30, 345, 32, 1935, 30, 345, 32, 18495, 30, 345, 32, 4298, 30, 6492, 26, 95, 27, 619, 6492, 203, 203, 41189, 7231, 34027, 623, 42687, 6215, 9215, 44, 203, 31, 15196, 44, 313, 27868, 1182, 18392, 436, 4953, 20608, 12791, 203, 31, 6645, 44, 31054, 308, 102, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 6583, 26, 98, 44, 4248, 27, 4998, 298, 32, 3153, 2198, 5794, 14008, 330, 35271, 25, 1878, 298, 32, 426, 2198, 5794, 14008, 330, 35271, 25, 1878, 298, 32, 2310, 2198, 5794, 14008, 330, 35271, 25, 18546, 273, 32, 314, 30, 273, 32, 426, 30, 6492, 26, 102, 27, 619, 6492, 30, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 3153, 30, 298, 32, 24791, 7445, 225, 36, 39, 203, 203, 41189, 7024, 810, 23572, 308, 1732, 7889, 10467, 711, 203, 31, 15196, 44, 313, 4311, 597, 7024, 328, 33627, 20, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 27, 4998, 298, 32, 18495, 2198, 5794, 14008, 330, 40528, 25, 1878, 298, 32, 18495, 2198, 5794, 14008, 330, 3711, 8637, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 41189, 2350, 8999, 623, 7360, 9215, 44, 203, 31, 15196, 44, 313, 27868, 1182, 328, 322, 23714, 723, 2350, 12791, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 7239, 81, 2109, 6583, 26, 89, 44, 1564, 27, 4998, 485, 32, 426, 2198, 5794, 14008, 330, 89, 38082, 25, 1878, 485, 32, 426, 2198, 5794, 14008, 330, 57, 38082, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 41189, 7024, 6560, 3639, 372, 312, 4203, 308, 1206, 636, 711, 203, 31, 15196, 44, 313, 4311, 597, 7024, 6560, 3639, 372, 322, 390, 1407, 20, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 95, 44, 6005, 27, 4998, 345, 32, 4298, 2198, 5794, 14008, 330, 935, 65, 25, 1878, 345, 32, 4298, 2198, 5794, 14008, 330, 828, 21918, 21909, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 41189, 7024, 810, 4203, 623, 4609, 40514, 44, 203, 31, 15196, 44, 313, 27868, 884, 322, 6498, 27608, 12791, 203, 31, 6645, 44, 31054, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 27577, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 18637, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 1572, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 4018, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 7979, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 9927, 44, 313, 6893, 5075, 28990, 20, 203, 1625, 44, 0, 203, 49152, 17594, 49153, 15895, 308, 98, 44, 6005, 27, 18546, 2385, 26, 98, 27], 'total_duration': 987512582, 'load_duration': 9086460, 'prompt_eval_count': 1608, 'prompt_eval_duration': 714567537, 'eval_count': 12, 'eval_duration': 263380699}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "how many employees"\n\nDatabase results:\n{\'query\': \'MATCH (p:Person) RETURN count(p)\', \'count\': 1, \'results\': [{\'count(p)\': 500}]}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895082b50>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:02:46 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:02:46.604189196Z', 'response': "## Employees Count\n\nYou have **500** employees in total based on the database query results. This count can serve as a key figure for various tasks such as resource allocation or team formations. \n\nNo specific leads, managers, or decision-makers are highlighted here as there's no additional information regarding organizational roles or hierarchy within your request. \n\n### Next Steps:\n\n1. **Identify Teams**: To find relevant contacts or team leaders, you may need to refine your query focusing on departments or specific teams. \n2. **Department-wise Breakdown**: If needed, you can further analyze the distribution of employees across different departments by adjusting the database query accordingly. \n\nFor immediate assistance in identifying key personnel related to particular tasks or projects, please provide additional context or criteria so we can tailor our response more effectively to your needs.", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 6893, 5075, 28990, 20, 203, 203, 3954, 3276, 44, 203, 12157, 1217, 950, 330, 15895, 308, 98, 44, 6005, 27, 18546, 2385, 26, 98, 7243, 330, 998, 950, 225, 35, 30, 330, 4295, 950, 39228, 998, 26, 98, 27, 950, 225, 39, 34, 34, 49108, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 433, 46216, 12910, 9618, 203, 203, 4282, 1159, 1115, 39, 34, 34, 326, 28990, 328, 3380, 4122, 544, 322, 3500, 2467, 3276, 32, 1348, 2385, 883, 13942, 619, 312, 1202, 10986, 436, 10297, 8253, 3751, 619, 2869, 18120, 556, 6498, 2234, 993, 32, 1659, 203, 2023, 2818, 27608, 30, 39143, 30, 556, 17200, 31, 12620, 483, 884, 33306, 2442, 619, 2017, 1182, 1289, 5388, 2471, 12047, 12083, 279, 13479, 556, 21291, 4797, 1370, 1326, 32, 1659, 203, 1482, 10961, 17096, 44, 478, 35, 32, 1115, 9594, 1147, 29983, 4914, 2614, 2290, 10088, 26910, 556, 6498, 999, 2980, 30, 844, 1631, 1849, 372, 2488, 482, 1370, 2467, 35167, 908, 544, 26811, 1728, 556, 2818, 18920, 32, 1659, 36, 32, 1115, 19051, 31, 3767, 19868, 1746, 4914, 1670, 5349, 30, 844, 883, 9686, 22928, 322, 7433, 432, 28990, 10160, 3449, 26811, 1728, 810, 10891, 299, 322, 3500, 2467, 23601, 32, 1659, 203, 1562, 11068, 47221, 328, 31583, 1202, 4916, 8613, 5886, 372, 8409, 8253, 556, 8528, 30, 4322, 2355, 5388, 1619, 556, 15261, 1259, 996, 883, 13203, 271, 2992, 1789, 1829, 29419, 372, 1370, 5652, 32], 'total_duration': 4363916771, 'load_duration': 8174484, 'prompt_eval_count': 841, 'prompt_eval_duration': 268598307, 'eval_count': 187, 'eval_duration': 4086661325}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "Who is the ceo?"\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895a0a950>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:03:29 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:03:29.064341167Z', 'response': '{\n  "reasoning": "The user is asking for a specific individual\'s role, which requires querying the organizational database for person-related data. This information involves identifying who holds a particular position within the company structure.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 27868, 438, 322, 10635, 97, 12791, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 436, 312, 2818, 10090, 1182, 4203, 30, 1510, 7171, 38654, 322, 12083, 279, 3500, 436, 4916, 31, 10513, 706, 32, 1348, 2471, 37383, 31583, 6560, 16430, 312, 8409, 2747, 4797, 322, 10512, 5193, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111], 'total_duration': 2412533702, 'load_duration': 7786234, 'prompt_eval_count': 1429, 'prompt_eval_duration': 751948929, 'eval_count': 71, 'eval_duration': 1652268639}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | INFO:query_patterns:Matched pattern 'find_by_role' for query: Who is the ceo?
api-1  | INFO:root:Using pre-compiled pattern for query: Who is the ceo?
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a FalkorDB Cypher query generator. The previous query returned no results, so you need to generate a broader, more flexible query.\n\nOriginal user request: "Who is the ceo?"\nPrevious query that returned no results: MATCH (p:Person) WHERE p.role CONTAINS \'ceo\' OR p.role CONTAINS \'Ceo\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nANALYSIS: The previous query was too specific. Generate a broader query using these strategies:\n\nFALLBACK STRATEGIES:\n1. **Expand search terms**: Use partial matching instead of exact matching\n2. **Remove constraints**: Drop overly specific WHERE conditions\n3. **Use broader categories**: If searching for specific roles/departments, try parent categories\n4. **Alternative approaches**: Try different relationship patterns or node types\n5. **Fuzzy matching**: Use more flexible text matching with shorter keywords\n\nCOMMON ADJUSTMENTS:\n- Change exact matches (=) to partial matches (CONTAINS)\n- Remove overly specific department/role filters\n- Try searching across all entity types (Person, Team, Group, Policy)\n- Use shorter, more general keywords\n- Remove time-based or status-based constraints\n- Try alternative relationship paths\n\nFALLBACK PATTERNS:\n- If searching for specific people failed, try finding teams/groups in that area\n- If policy search failed, try finding people who might know about the topic\n- If department search failed, try role-based search\n- If role search failed, try department-based search\n- If no entities found, try broader organizational queries\n\nEXAMPLE TRANSFORMATIONS:\n- "Software Engineer" → "Engineer" or "Software" or "Development"\n- "Human Resources Manager" → "Human" or "HR" or "Manager" or "People"\n- Specific policy names → policy categories or keywords\n- Exact department matches → partial department matching\n\nGenerate a single, broader Cypher query that has a higher chance of returning relevant results. Return ONLY the Cypher query without explanation.\n\nIMPORTANT: Make the query significantly broader than the previous one while still being relevant to the user\'s request.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89507f910>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:03:33 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:03:33.302044875Z', 'response': "MATCH (p:Person) WHERE p.role CONTAINS 'ceo' OR p.title CONTAINS 'ceo' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 50", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 506, 3724, 271, 1996, 22350, 36149, 2467, 9750, 32, 886, 4552, 2467, 4717, 1289, 3276, 30, 1259, 844, 1849, 372, 4450, 312, 8035, 820, 30, 1829, 28188, 2467, 32, 203, 203, 11296, 1256, 1326, 44, 313, 27868, 438, 322, 10635, 97, 12791, 203, 11698, 2467, 688, 4717, 1289, 3276, 44, 31054, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 369, 97, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 53, 17762, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 39861, 16928, 1296, 44, 886, 4552, 2467, 1597, 5133, 2818, 32, 10945, 312, 8035, 820, 2467, 1471, 3282, 35678, 44, 203, 203, 45125, 8803, 9314, 17847, 12145, 44, 203, 35, 32, 1115, 12255, 3233, 5955, 4914, 4417, 7360, 9215, 4174, 432, 7153, 9215, 203, 36, 32, 1115, 4913, 13383, 4914, 14105, 2288, 631, 2818, 4998, 5479, 203, 37, 32, 1115, 4391, 8035, 820, 12770, 4914, 1670, 20286, 436, 2818, 13479, 33, 20811, 1728, 30, 1596, 2935, 12770, 203, 38, 32, 1115, 34111, 31913, 4914, 8959, 3449, 12112, 15103, 556, 1541, 3738, 203, 39, 32, 1115, 56, 25274, 9215, 4914, 4417, 1829, 28188, 1344, 9215, 623, 35759, 16400, 203, 203, 22116, 6988, 35942, 32477, 44, 203, 31, 5614, 7153, 8001, 20545, 27, 372, 7360, 8001, 308, 20595, 69, 27, 203, 31, 6478, 2288, 631, 2818, 23572, 33, 4298, 10582, 203, 31, 8959, 20286, 10160, 1169, 4422, 3738, 308, 6005, 30, 12641, 30, 7051, 30, 15310, 27, 203, 31, 4417, 35759, 30, 1829, 8074, 16400, 203, 31, 6478, 1133, 31, 7873, 556, 2287, 31, 7873, 13383, 203, 31, 8959, 15529, 12112, 7842, 203, 203, 45125, 8803, 447, 15835, 3020, 44, 203, 31, 1670, 20286, 436, 2818, 7024, 3803, 30, 1596, 17340, 18920, 33, 6332, 328, 688, 5951, 203, 31, 1670, 7231, 3233, 3803, 30, 1596, 17340, 7024, 6560, 4796, 3702, 2625, 322, 8456, 203, 31, 1670, 23572, 3233, 3803, 30, 1596, 4203, 31, 7873, 3233, 203, 31, 1670, 4203, 3233, 3803, 30, 1596, 23572, 31, 7873, 3233, 203, 31, 1670, 1289, 11740, 2431, 30, 1596, 8035, 820, 12083, 279, 11792, 203, 203, 33968, 43128, 5060, 19419, 44, 203, 31, 313, 9902, 44436, 20, 14567, 313, 3711, 265, 20, 556, 313, 9902, 20, 556, 313, 20235, 20, 203, 31, 313, 21390, 17697, 10702, 20, 14567, 313, 21390, 20, 556, 313, 5137, 20, 556, 313, 1572, 20, 556, 313, 24853, 20, 203, 31, 25081, 7231, 4467, 14567, 7231, 12770, 556, 16400, 203, 31, 37634, 23572, 8001, 14567, 7360, 23572, 9215, 203, 203, 10505, 312, 3982, 30, 8035, 820, 22350, 36149, 2467, 688, 1401, 312, 12224, 16554, 432, 14116, 10088, 3276, 32, 2744, 28222, 322, 22350, 36149, 2467, 2876, 18799, 32, 203, 203, 33862, 44, 6400, 322, 2467, 32323, 8035, 820, 2784, 322, 4552, 1591, 2218, 4204, 3998, 10088, 372, 322, 1256, 1182, 1326, 32, 0, 203, 49152, 17594, 49153, 15895, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 369, 97, 25, 1878, 298, 32, 1311, 2198, 5794, 14008, 330, 369, 97, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 39, 34], 'total_duration': 1465972970, 'load_duration': 7173239, 'prompt_eval_count': 537, 'prompt_eval_duration': 92016233, 'eval_count': 60, 'eval_duration': 1366341400}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "Who is the ceo?"\n\nDatabase results:\n{\'query\': "MATCH (p:Person) WHERE p.role CONTAINS \'ceo\' OR p.role CONTAINS \'Ceo\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25", \'count\': 0, \'results\': []}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89509b8d0>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:03:37 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:03:37.442525222Z', 'response': 'No people were found matching the criteria of being a CEO or Ceo. \n\n## Key Insights:\n- The current database does not contain any records for individuals holding the role of CEO or Ceo.\n\n### Suggested Next Steps:\n1. **Verify Role Names:** Ensure the search term \'ceo\' was spelled correctly, as case sensitivity might have been an issue.\n2. **Expand Search Criteria:** If there\'s flexibility, consider searching for related roles like "Chief Executive Officer" or "CEO (alternate spellings)."\n3. **Check Data Source Integrity:** Review the data source to confirm that the information about CEOs is indeed present and correctly indexed. \n\nRemember, if you\'re unsure about any aspect of your search or need further assistance, feel free to ask!', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 27868, 438, 322, 10635, 97, 12791, 203, 203, 3954, 3276, 44, 203, 12157, 1217, 950, 313, 15895, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 369, 97, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 53, 17762, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 392, 330, 998, 950, 225, 34, 30, 330, 4295, 950, 1605, 111, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 2023, 7024, 4528, 2431, 9215, 322, 15261, 432, 3998, 312, 390, 10209, 556, 390, 17762, 32, 1659, 203, 433, 3891, 38247, 44, 203, 31, 886, 1550, 3500, 1957, 646, 4799, 1346, 9212, 436, 34546, 21843, 322, 4203, 432, 390, 10209, 556, 390, 17762, 32, 203, 203, 1482, 28192, 318, 10961, 17096, 44, 203, 35, 32, 1115, 10570, 13936, 34901, 4777, 15545, 322, 3233, 5615, 330, 369, 97, 25, 1597, 1869, 342, 1231, 8464, 30, 619, 1135, 44137, 4796, 1159, 2583, 600, 2427, 32, 203, 36, 32, 1115, 12255, 7422, 18805, 4777, 1670, 2017, 1182, 41459, 30, 6295, 20286, 436, 5886, 13479, 2124, 313, 828, 21918, 6779, 19290, 43788, 265, 20, 556, 313, 1955, 65, 308, 24943, 15037, 2052, 36875, 203, 37, 32, 1115, 2140, 2398, 6374, 14291, 543, 4777, 15054, 322, 706, 1914, 372, 8655, 688, 322, 2471, 2625, 390, 10209, 101, 438, 23793, 5024, 461, 8464, 18501, 32, 1659, 203, 38577, 30, 415, 844, 4484, 44325, 2625, 1346, 14335, 432, 1370, 3233, 556, 1849, 9686, 47221, 30, 10871, 3741, 372, 7660, 19], 'total_duration': 4121282503, 'load_duration': 7146748, 'prompt_eval_count': 883, 'prompt_eval_duration': 275981517, 'eval_count': 174, 'eval_duration': 3837668495}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "list all managers"\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89506fad0>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:04:01 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:04:01.275699579Z', 'response': '{\n  "reasoning": "The user is asking for a list of managers, which involves identifying relationships between entities. This requires executing a custom Cypher query to traverse the \'REPORTS_TO\' relationship in the database.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 668, 1169, 39143, 20, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 436, 312, 1149, 432, 39143, 30, 1510, 37383, 31583, 25041, 3733, 11740, 32, 1348, 7171, 16924, 312, 3115, 22350, 36149, 2467, 372, 29046, 322, 330, 25252, 69, 81, 1407, 25, 12112, 328, 322, 3500, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111], 'total_duration': 2587181318, 'load_duration': 7374454, 'prompt_eval_count': 1427, 'prompt_eval_duration': 874054420, 'eval_count': 72, 'eval_duration': 1705301699}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | INFO:query_patterns:Matched pattern 'find_by_role' for query: list all managers
api-1  | INFO:root:Using pre-compiled pattern for query: list all managers
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "list all managers"\n\nDatabase results:\n{\'query\': "MATCH (p:Person) WHERE p.role CONTAINS \'manager\' OR p.role CONTAINS \'Manager\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25", \'count\': 25, \'results\': [{\'p.id\': \'person_1\', \'p.name\': \'Michael Mack\', \'p.email\': \'ivalentine@example.com\', \'p.department\': \'Engineering\', \'p.role\': \'Senior Engineering Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_2\', \'p.name\': \'Becky Melendez\', \'p.email\': \'blacknancy@example.net\', \'p.department\': \'Operations\', \'p.role\': \'Business Operations Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_6\', \'p.name\': \'Justin Pittman\', \'p.email\': \'ericortiz@example.org\', \'p.department\': \'Marketing\', \'p.role\': \'VP of Marketing Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_11\', \'p.name\': \'Rebecca Jenkins\', \'p.email\': \'robert54@example.com\', \'p.department\': \'Marketing\', \'p.role\': \'Marketing Operations Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_14\', \'p.name\': \'Cody Smith DVM\', \'p.email\': \'heather99@example.org\', \'p.department\': \'Security\', \'p.role\': \'Security Manager Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_15\', \'p.name\': \'Kenneth Medina\', \'p.email\': \'tiffany76@example.net\', \'p.department\': \'HR\', \'p.role\': \'HR Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_20\', \'p.name\': \'Joseph Krause\', \'p.email\': \'vincentjames@example.com\', \'p.department\': \'Product\', \'p.role\': \'Associate Product Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_21\', \'p.name\': \'Nicolas Johnson\', \'p.email\': \'ipena@example.org\', \'p.department\': \'Operations\', \'p.role\': \'Operations Manager Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_31\', \'p.name\': \'Joseph Guerrero\', \'p.email\': \'harrismadison@example.net\', \'p.department\': \'Business Development\', \'p.role\': \'Senior Business Development Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_33\', \'p.name\': \'Kenneth Luna\', \'p.email\': \'rileygabriel@example.org\', \'p.department\': \'Security\', \'p.role\': \'Security Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_36\', \'p.name\': \'Dakota Rojas\', \'p.email\': \'tiffanymontgomery@example.org\', \'p.department\': \'HR\', \'p.role\': \'HR Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_42\', \'p.name\': \'Patricia Mitchell\', \'p.email\': \'johnsonzachary@example.net\', \'p.department\': \'Quality Assurance\', \'p.role\': \'QA Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_43\', \'p.name\': \'Annette Hobbs\', \'p.email\': \'murrayjulia@example.org\', \'p.department\': \'Marketing\', \'p.role\': \'Marketing Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_44\', \'p.name\': \'Alex Guerra\', \'p.email\': \'stantonlauren@example.net\', \'p.department\': \'Customer Success\', \'p.role\': \'Customer Support Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_45\', \'p.name\': \'Kenneth Green\', \'p.email\': \'veronica87@example.com\', \'p.department\': \'Research\', \'p.role\': \'Market Research Manager Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_46\', \'p.name\': \'George Campos\', \'p.email\': \'stephaniegraham@example.net\', \'p.department\': \'Quality Assurance\', \'p.role\': \'QA Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_52\', \'p.name\': \'Michael Allen\', \'p.email\': \'dominique93@example.com\', \'p.department\': \'Business Development\', \'p.role\': \'Senior Business Development Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_58\', \'p.name\': \'Molly Thomas\', \'p.email\': \'bellbenjamin@example.net\', \'p.department\': \'Product\', \'p.role\': \'Principal Product Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_66\', \'p.name\': \'Alexandra Lewis\', \'p.email\': \'rossdana@example.com\', \'p.department\': \'Product\', \'p.role\': \'Product Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_68\', \'p.name\': \'David Butler\', \'p.email\': \'lcole@example.net\', \'p.department\': \'Data Science\', \'p.role\': \'Data Science Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_79\', \'p.name\': \'Cindy Perkins\', \'p.email\': \'jenniferhiggins@example.com\', \'p.department\': \'Security\', \'p.role\': \'Security Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_80\', \'p.name\': \'John Villanueva\', \'p.email\': \'lschwartz@example.org\', \'p.department\': \'Product\', \'p.role\': \'Group Product Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_84\', \'p.name\': \'Monica Wright\', \'p.email\': \'alexparks@example.org\', \'p.department\': \'Customer Success\', \'p.role\': \'Senior Customer Success Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_85\', \'p.name\': \'Amanda Davis\', \'p.email\': \'agordon@example.net\', \'p.department\': \'Research\', \'p.role\': \'Research Manager\', \'labels\': [\'Person\']}, {\'p.id\': \'person_86\', \'p.name\': \'Maria Bond\', \'p.email\': \'dawsonwilliam@example.net\', \'p.department\': \'Business Development\', \'p.role\': \'Partnership Manager\', \'labels\': [\'Person\']}]}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895085390>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:04:34 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:04:34.321097598Z', 'response': "## Managers for Your Request\n\nHere's a list of all identified managers within our database, formatted for easy reference:\n\n### **Key People to Contact**\n\n1. **Michael Mack**\n   - Role: Senior Engineering Manager\n   - Department: Engineering\n   - Email: [ivalentine@example.com](mailto:ivalentine@example.com)\n   \n2. Becky Melendez  \n   - Role: Business Operations Manager  \n   - Department: Operations  \n   - Email: [blacknancy@example.net](mailto:blacknancy@example.net)\n\n3. Justin Pittman  \n   - Role: VP of Marketing Manager  \n   - Department: Marketing  \n   - Email: [ericortiz@example.org](mailto:ericortiz@example.org)\n\n4. Rebecca Jenkins  \n   - Role: Marketing Operations Manager  \n   - Department: Marketing  \n   - Email: [robert54@example.com](mailto:robert54@example.com)\n\n5. Cody Smith DVM  \n   - Role: Security Manager Manager  \n   - Department: Security  \n   - Email: [heather99@example.org](mailto:heather99@example.org)\n\n6. Kenneth Medina  \n   - Role: HR Manager  \n   - Department: HR  \n   - Email: [tiffany76@example.net](mailto:tiffany76@example.net)\n\n7. Joseph Krause  \n   - Role: Associate Product Manager  \n   - Department: Product  \n   - Email: [vincentjames@example.com](mailto:vincentjames@example.com)\n\n8. Nicolas Johnson  \n   - Role: Operations Manager Manager  \n   - Department: Operations  \n   - Email: [ipena@example.org](mailto:ipena@example.org)\n\n9. Joseph Guerrero  \n   - Role: Senior Business Development Manager  \n   - Department: Business Development  \n   - Email: [harrismadison@example.net](mailto:harrismadison@example.net)\n\n10. Kenneth Luna  \n    - Role: Security Manager  \n    - Department: Security  \n    - Email: [rileygabriel@example.org](mailto:rileygabriel@example.org)\n\n11. Dakota Rojas  \n    - Role: HR Manager  \n    - Department: HR  \n    - Email: [tiffanymontgomery@example.org](mailto:tiffanymontgomery@example.org)\n\n12. Patricia Mitchell  \n    - Role: QA Manager  \n    - Department: Quality Assurance  \n    - Email: [johnsonzachary@example.net](mailto:johnsonzachary@example.net)\n\n13. Annette Hobbs  \n    - Role: Marketing Manager  \n    - Department: Marketing  \n    - Email: [murrayjulia@example.org](mailto:murrayjulia@example.org)\n\n14. Alex Guerra  \n    - Role: Customer Support Manager  \n    - Department: Customer Success  \n    - Email: [stantonlauren@example.net](mailto:stantonlauren@example.net)\n\n15. Kenneth Green  \n    - Role: Market Research Manager Manager  \n    - Department: Research  \n    - Email: [veronica87@example.com](mailto:veronica87@example.com)\n\n16. Michael Allen  \n    - Role: Senior Business Development Manager  \n    - Department: Business Development  \n    - Email: [dominique93@example.com](mailto:dominique93@example.com)\n\n17. Molly Thomas  \n    - Role: Principal Product Manager  \n    - Department: Product  \n    - Email: [bellbenjamin@example.net](mailto:bellbenjamin@example.net)\n\n18. Alexandra Lewis  \n    - Role: Product Manager  \n    - Department: Product  \n    - Email: [rossdana@example.com](mailto:rossdana@example.com)\n\n19. David Butler  \n    - Role: Data Science Manager  \n    - Department: Data Science  \n    - Email: [lcole@example.net](mailto:lcole@example.net)\n\n20. Cindy Perkins  \n    - Role: Security Manager  \n    - Department: Security  \n    - Email: [jenniferhiggins@example.com](mailto:jenniferhiggins@example.com)\n\n21. John Villanueva  \n    - Role: Group Product Manager  \n    - Department: Product  \n    - Email: [lschwartz@example.org](mailto:lschwartz@example.org)\n\n22. Monica Wright  \n    - Role: Senior Customer Success Manager  \n    - Department: Customer Success  \n    - Email: [alexparks@example.org](mailto:alexparks@example.org)\n\n23. Amanda Davis  \n    - Role: Research Manager  \n    - Department: Research  \n    - Email: [agordon@example.net](mailto:agordon@example.net)\n\n24. Maria Bond  \n    - Role: Partnership Manager  \n    - Department: Business Development  \n    - Email: [dawsonwilliam@example.net](mailto:dawsonwilliam@example.net)\n\n### **Next Steps**\n\nWith this list of managers, you can now identify and reach out to the appropriate individuals depending on your needs. Bold entries are prioritized for direct contact if immediate action is required. \n\nFor specific tasks or further details about each manager's role or department, please don't hesitate to ask for more information on any particular entry.", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 668, 1169, 39143, 20, 203, 203, 3954, 3276, 44, 203, 12157, 1217, 950, 313, 15895, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 4018, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 1572, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 392, 330, 998, 950, 225, 36, 39, 30, 330, 4295, 950, 39228, 98, 32, 314, 950, 330, 6416, 81, 35, 370, 330, 98, 32, 426, 950, 330, 47204, 488, 459, 370, 330, 98, 32, 1935, 950, 330, 387, 9556, 482, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 3711, 8637, 370, 330, 98, 32, 4298, 950, 330, 30673, 3166, 26585, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 36, 370, 330, 98, 32, 426, 950, 330, 1467, 454, 107, 38634, 18740, 108, 370, 330, 98, 32, 1935, 950, 330, 7021, 96, 10360, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 11208, 370, 330, 98, 32, 4298, 950, 330, 13270, 27724, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 40, 370, 330, 98, 32, 426, 950, 330, 12584, 266, 447, 14916, 1588, 370, 330, 98, 32, 1935, 950, 330, 4685, 373, 425, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 4494, 8842, 370, 330, 98, 32, 4298, 950, 330, 12453, 432, 7778, 8842, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 35, 35, 370, 330, 98, 32, 426, 950, 330, 435, 22986, 1173, 28493, 370, 330, 98, 32, 1935, 950, 330, 43947, 39, 38, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 4494, 8842, 370, 330, 98, 32, 4298, 950, 330, 4494, 8842, 27724, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 35, 38, 370, 330, 98, 32, 426, 950, 330, 53, 1084, 35142, 475, 5047, 370, 330, 98, 32, 1935, 950, 330, 292, 3790, 43, 43, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 5188, 370, 330, 98, 32, 4298, 950, 330, 5188, 10702, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 35, 39, 370, 330, 98, 32, 426, 950, 330, 61, 26227, 349, 14333, 5225, 370, 330, 98, 32, 1935, 950, 330, 37002, 1813, 41, 40, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 5137, 370, 330, 98, 32, 4298, 950, 330, 5137, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 36, 34, 370, 330, 98, 32, 426, 950, 330, 60, 2475, 833, 1224, 1691, 539, 370, 330, 98, 32, 1935, 950, 330, 13762, 2460, 92, 17060, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 3409, 370, 330, 98, 32, 4298, 950, 330, 47200, 7688, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 36, 35, 370, 330, 98, 32, 426, 950, 330, 64, 18658, 302, 21566, 1155, 370, 330, 98, 32, 1935, 950, 330, 639, 10221, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 11208, 370, 330, 98, 32, 4298, 950, 330, 11208, 10702, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 37, 35, 370, 330, 98, 32, 426, 950, 330, 60, 2475, 833, 8085, 530, 2144, 370, 330, 98, 32, 1935, 950, 330, 90, 846, 5738, 339, 5835, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 13270, 15612, 370, 330, 98, 32, 4298, 950, 330, 30673, 3166, 17265, 15612, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 37, 37, 370, 330, 98, 32, 426, 950, 330, 61, 26227, 349, 498, 12120, 370, 330, 98, 32, 1935, 950, 330, 344, 8332, 28162, 40941, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 5188, 370, 330, 98, 32, 4298, 950, 330, 5188, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 37, 40, 370, 330, 98, 32, 426, 950, 330, 54, 774, 5724, 11786, 18534, 370, 330, 98, 32, 1935, 950, 330, 37002, 1813, 25412, 24385, 834, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 5137, 370, 330, 98, 32, 4298, 950, 330, 5137, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 38, 36, 370, 330, 98, 32, 426, 950, 330, 11609, 3936, 905, 34319, 1058, 611, 370, 330, 98, 32, 1935, 950, 330, 25172, 1155, 108, 867, 672, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 15569, 7405, 23203, 370, 330, 98, 32, 4298, 950, 330, 19533, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 38, 37, 370, 330, 98, 32, 426, 950, 330, 1045, 1299, 519, 677, 906, 3883, 370, 330, 98, 32, 1935, 950, 330, 48999, 11528, 19025, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 4494, 8842, 370, 330, 98, 32, 4298, 950, 330, 4494, 8842, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 38, 38, 370, 330, 98, 32, 426, 950, 330, 27413, 8085, 13003, 370, 330, 98, 32, 1935, 950, 330, 270, 692, 267, 3075, 27206, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 7940, 12633, 370, 330, 98, 32, 4298, 950, 330, 7940, 6318, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 38, 39, 370, 330, 98, 32, 426, 950, 330, 61, 26227, 349, 25567, 370, 330, 98, 32, 1935, 950, 330, 424, 267, 5285, 42, 41, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 30033, 370, 330, 98, 32, 4298, 950, 330, 17949, 18699, 10702, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 38, 40, 370, 330, 98, 32, 426, 950, 330, 4571, 24729, 34696, 500, 370, 330, 98, 32, 1935, 950, 330, 6686, 833, 13732, 771, 2371, 404, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 15569, 7405, 23203, 370, 330, 98, 32, 4298, 950, 330, 19533, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 39, 36, 370, 330, 98, 32, 426, 950, 330, 47204, 3367, 272, 370, 330, 98, 32, 1935, 950, 330, 4722, 266, 2673, 43, 37, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 13270, 15612, 370, 330, 98, 32, 4298, 950, 330, 30673, 3166, 17265, 15612, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 39, 42, 370, 330, 98, 32, 426, 950, 330, 30658, 631, 34963, 370, 330, 98, 32, 1935, 950, 330, 28939, 10584, 39202, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 3409, 370, 330, 98, 32, 4298, 950, 330, 14281, 7688, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 40, 40, 370, 330, 98, 32, 426, 950, 330, 27413, 16878, 498, 393, 297, 370, 330, 98, 32, 1935, 950, 330, 3503, 35794, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 3409, 370, 330, 98, 32, 4298, 950, 330, 3409, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 40, 42, 370, 330, 98, 32, 426, 950, 330, 34411, 7141, 1180, 370, 330, 98, 32, 1935, 950, 330, 94, 331, 274, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 750, 19519, 370, 330, 98, 32, 4298, 950, 330, 750, 19519, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 41, 43, 370, 330, 98, 32, 426, 950, 330, 53, 552, 107, 4211, 93, 2372, 370, 330, 98, 32, 1935, 950, 330, 92, 9616, 24080, 90, 365, 1523, 101, 50, 2763, 32, 508, 370, 330, 98, 32, 18495, 950, 330, 5188, 370, 330, 98, 32, 4298, 950, 330, 5188, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 42, 34, 370, 330, 98, 32, 426, 950, 330, 19693, 676, 728, 278, 340, 5319, 370, 330, 98, 32, 1935, 950, 330, 3246, 380, 105, 35676, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 3409, 370, 330, 98, 32, 4298, 950, 330, 1564, 7688, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 42, 38, 370, 330, 98, 32, 426, 950, 330, 3538, 5285, 624, 990, 370, 330, 98, 32, 1935, 950, 330, 23848, 568, 5505, 50, 2763, 32, 1088, 370, 330, 98, 32, 18495, 950, 330, 7940, 12633, 370, 330, 98, 32, 4298, 950, 330, 30673, 3166, 14850, 12633, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 42, 39, 370, 330, 98, 32, 426, 950, 330, 51, 995, 83, 475, 8027, 370, 330, 98, 32, 1935, 950, 330, 481, 655, 267, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 30033, 370, 330, 98, 32, 4298, 950, 330, 30033, 10702, 370, 330, 5919, 950, 2107, 6005, 785, 835, 5053, 98, 32, 314, 950, 330, 6416, 81, 42, 40, 370, 330, 98, 32, 426, 950, 330, 5686, 905, 551, 6257, 370, 330, 98, 32, 1935, 950, 330, 86, 812, 1155, 105, 36397, 50, 2763, 32, 1299, 370, 330, 98, 32, 18495, 950, 330, 13270, 15612, 370, 330, 98, 32, 4298, 950, 330, 2639, 96, 10082, 10702, 370, 330, 5919, 950, 2107, 6005, 26830, 6653, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 433, 4784, 16871, 436, 10604, 4448, 203, 203, 10921, 1182, 312, 1149, 432, 1169, 18891, 39143, 4797, 2992, 3500, 30, 14186, 436, 8792, 4121, 44, 203, 203, 1482, 1115, 953, 33126, 372, 12141, 326, 478, 35, 32, 1115, 47204, 488, 459, 326, 664, 429, 13936, 44, 43019, 3166, 26585, 10702, 664, 429, 24506, 44, 26585, 664, 429, 10024, 44, 428, 387, 9556, 482, 50, 2763, 32, 508, 729, 16956, 44, 387, 9556, 482, 50, 2763, 32, 508, 27, 284, 203, 36, 32, 4261, 454, 107, 38634, 18740, 108, 4970, 429, 13936, 44, 17265, 27724, 10702, 4970, 429, 24506, 44, 27724, 4970, 429, 10024, 44, 428, 7021, 96, 10360, 50, 2763, 32, 1299, 729, 16956, 44, 7021, 96, 10360, 50, 2763, 32, 1299, 27, 478, 37, 32, 9077, 266, 447, 14916, 1588, 4970, 429, 13936, 44, 676, 66, 432, 7778, 8842, 10702, 4970, 429, 24506, 44, 7778, 8842, 4970, 429, 10024, 44, 428, 4685, 373, 425, 50, 2763, 32, 1088, 729, 16956, 44, 4685, 373, 425, 50, 2763, 32, 1088, 27, 478, 38, 32, 902, 22986, 1173, 28493, 4970, 429, 13936, 44, 7778, 8842, 27724, 10702, 4970, 429, 24506, 44, 7778, 8842, 4970, 429, 10024, 44, 428, 43947, 39, 38, 50, 2763, 32, 508, 729, 16956, 44, 43947, 39, 38, 50, 2763, 32, 508, 27, 478, 39, 32, 390, 1084, 35142, 475, 5047, 4970, 429, 13936, 44, 7337, 10702, 10702, 4970, 429, 24506, 44, 7337, 4970, 429, 10024, 44, 428, 292, 3790, 43, 43, 50, 2763, 32, 1088, 729, 16956, 44, 292, 3790, 43, 43, 50, 2763, 32, 1088, 27, 478, 40, 32, 1224, 26227, 349, 14333, 5225, 4970, 429, 13936, 44, 46915, 10702, 4970, 429, 24506, 44, 46915, 4970, 429, 10024, 44, 428, 37002, 1813, 41, 40, 50, 2763, 32, 1299, 729, 16956, 44, 37002, 1813, 41, 40, 50, 2763, 32, 1299, 27, 478, 41, 32, 45400, 833, 1224, 1691, 539, 4970, 429, 13936, 44, 20617, 332, 7688, 10702, 4970, 429, 24506, 44, 7688, 4970, 429, 10024, 44, 428, 13762, 2460, 92, 17060, 50, 2763, 32, 508, 729, 16956, 44, 13762, 2460, 92, 17060, 50, 2763, 32, 508, 27, 478, 42, 32, 489, 18658, 302, 21566, 1155, 4970, 429, 13936, 44, 27724, 10702, 10702, 4970, 429, 24506, 44, 27724, 4970, 429, 10024, 44, 428, 639, 10221, 50, 2763, 32, 1088, 729, 16956, 44, 639, 10221, 50, 2763, 32, 1088, 27, 478, 43, 32, 45400, 833, 8085, 530, 2144, 4970, 429, 13936, 44, 43019, 3166, 17265, 15612, 10702, 4970, 429, 24506, 44, 17265, 15612, 4970, 429, 10024, 44, 428, 90, 846, 5738, 339, 5835, 50, 2763, 32, 1299, 729, 16956, 44, 90, 846, 5738, 339, 5835, 50, 2763, 32, 1299, 27, 478, 35, 34, 32, 1224, 26227, 349, 498, 12120, 10065, 429, 13936, 44, 7337, 10702, 10065, 429, 24506, 44, 7337, 10065, 429, 10024, 44, 428, 344, 8332, 28162, 40941, 50, 2763, 32, 1088, 729, 16956, 44, 344, 8332, 28162, 40941, 50, 2763, 32, 1088, 27, 478, 35, 35, 32, 475, 774, 5724, 11786, 18534, 10065, 429, 13936, 44, 46915, 10702, 10065, 429, 24506, 44, 46915, 10065, 429, 10024, 44, 428, 37002, 1813, 25412, 24385, 834, 50, 2763, 32, 1088, 729, 16956, 44, 37002, 1813, 25412, 24385, 834, 50, 2763, 32, 1088, 27, 478, 35, 36, 32, 17549, 3936, 905, 34319, 1058, 611, 10065, 429, 13936, 44, 36623, 10702, 10065, 429, 24506, 44, 30472, 7405, 23203, 10065, 429, 10024, 44, 428, 25172, 1155, 108, 867, 672, 50, 2763, 32, 1299, 729, 16956, 44, 25172, 1155, 108, 867, 672, 50, 2763, 32, 1299, 27, 478, 35, 37, 32, 2244, 1299, 519, 677, 906, 3883, 10065, 429, 13936, 44, 7778, 8842, 10702, 10065, 429, 24506, 44, 7778, 8842, 10065, 429, 10024, 44, 428, 48999, 11528, 19025, 50, 2763, 32, 1088, 729, 16956, 44, 48999, 11528, 19025, 50, 2763, 32, 1088, 27, 478, 35, 38, 32, 21211, 8085, 13003, 10065, 429, 13936, 44, 14850, 6318, 10702, 10065, 429, 24506, 44, 14850, 12633, 10065, 429, 10024, 44, 428, 270, 692, 267, 3075, 27206, 50, 2763, 32, 1299, 729, 16956, 44, 270, 692, 267, 3075, 27206, 50, 2763, 32, 1299, 27, 478, 35, 39, 32, 1224, 26227, 349, 25567, 10065, 429, 13936, 44, 24899, 18699, 10702, 10702, 10065, 429, 24506, 44, 18699, 10065, 429, 10024, 44, 428, 424, 267, 5285, 42, 41, 50, 2763, 32, 508, 729, 16956, 44, 424, 267, 5285, 42, 41, 50, 2763, 32, 508, 27, 478, 35, 40, 32, 29118, 3367, 272, 10065, 429, 13936, 44, 43019, 3166, 17265, 15612, 10702, 10065, 429, 24506, 44, 17265, 15612, 10065, 429, 10024, 44, 428, 4722, 266, 2673, 43, 37, 50, 2763, 32, 508, 729, 16956, 44, 4722, 266, 2673, 43, 37, 50, 2763, 32, 508, 27, 478, 35, 41, 32, 41882, 631, 34963, 10065, 429, 13936, 44, 41028, 7688, 10702, 10065, 429, 24506, 44, 7688, 10065, 429, 10024, 44, 428, 28939, 10584, 39202, 50, 2763, 32, 1299, 729, 16956, 44, 28939, 10584, 39202, 50, 2763, 32, 1299, 27, 478, 35, 42, 32, 21211, 16878, 498, 393, 297, 10065, 429, 13936, 44, 7688, 10702, 10065, 429, 24506, 44, 7688, 10065, 429, 10024, 44, 428, 3503, 35794, 50, 2763, 32, 508, 729, 16956, 44, 3503, 35794, 50, 2763, 32, 508, 27, 478, 35, 43, 32, 23236, 7141, 1180, 10065, 429, 13936, 44, 2398, 19519, 10702, 10065, 429, 24506, 44, 2398, 19519, 10065, 429, 10024, 44, 428, 94, 331, 274, 50, 2763, 32, 1299, 729, 16956, 44, 94, 331, 274, 50, 2763, 32, 1299, 27, 478, 36, 34, 32, 390, 552, 107, 4211, 93, 2372, 10065, 429, 13936, 44, 7337, 10702, 10065, 429, 24506, 44, 7337, 10065, 429, 10024, 44, 428, 92, 9616, 24080, 90, 365, 1523, 101, 50, 2763, 32, 508, 729, 16956, 44, 92, 9616, 24080, 90, 365, 1523, 101, 50, 2763, 32, 508, 27, 478, 36, 35, 32, 21566, 676, 728, 278, 340, 5319, 10065, 429, 13936, 44, 7051, 7688, 10702, 10065, 429, 24506, 44, 7688, 10065, 429, 10024, 44, 428, 3246, 380, 105, 35676, 50, 2763, 32, 1088, 729, 16956, 44, 3246, 380, 105, 35676, 50, 2763, 32, 1088, 27, 478, 36, 36, 32, 5903, 5285, 624, 990, 10065, 429, 13936, 44, 43019, 3166, 14850, 12633, 10702, 10065, 429, 24506, 44, 14850, 12633, 10065, 429, 10024, 44, 428, 23848, 568, 5505, 50, 2763, 32, 1088, 729, 16956, 44, 23848, 568, 5505, 50, 2763, 32, 1088, 27, 478, 36, 37, 32, 399, 995, 83, 475, 8027, 10065, 429, 13936, 44, 18699, 10702, 10065, 429, 24506, 44, 18699, 10065, 429, 10024, 44, 428, 481, 655, 267, 50, 2763, 32, 1299, 729, 16956, 44, 481, 655, 267, 50, 2763, 32, 1299, 27, 478, 36, 38, 32, 8359, 905, 551, 6257, 10065, 429, 13936, 44, 6673, 96, 10082, 10702, 10065, 429, 24506, 44, 17265, 15612, 10065, 429, 10024, 44, 428, 86, 812, 1155, 105, 36397, 50, 2763, 32, 1299, 729, 16956, 44, 86, 812, 1155, 105, 36397, 50, 2763, 32, 1299, 27, 203, 203, 1482, 1115, 3353, 17096, 326, 203, 203, 1554, 458, 1149, 432, 39143, 30, 844, 883, 2464, 12411, 461, 15669, 963, 372, 322, 9136, 34546, 14714, 544, 1370, 5652, 32, 551, 1455, 8036, 884, 41585, 1191, 436, 3872, 7260, 415, 11068, 2125, 438, 2129, 32, 1659, 203, 1562, 2818, 8253, 556, 9686, 4245, 2625, 2504, 7884, 1182, 4203, 556, 23572, 30, 4322, 2800, 1330, 46974, 332, 372, 7660, 436, 1829, 2471, 544, 1346, 8409, 3414, 32], 'total_duration': 30215836568, 'load_duration': 8780897, 'prompt_eval_count': 2459, 'prompt_eval_duration': 1102406708, 'eval_count': 1236, 'eval_duration': 29104165536}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "how many people in engineering?"\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89506b210>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:05:16 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:05:16.995353158Z', 'response': '{\n  "reasoning": "The user is inquiring about the number of people in a specific department - Engineering. This requires counting individuals within that department, which is an organizational analysis task.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 6893, 5075, 7024, 328, 33627, 12791, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 328, 448, 13570, 2625, 322, 1451, 432, 7024, 328, 312, 2818, 23572, 429, 26585, 32, 1348, 7171, 33404, 34546, 4797, 688, 23572, 30, 1510, 438, 600, 12083, 279, 9209, 2899, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111], 'total_duration': 2458901830, 'load_duration': 7389764, 'prompt_eval_count': 1429, 'prompt_eval_duration': 883310295, 'eval_count': 67, 'eval_duration': 1567717335}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | INFO:query_patterns:Matched pattern 'count_people_dept' for query: how many people in engineering?
api-1  | INFO:root:Using pre-compiled pattern for query: how many people in engineering?
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "how many people in engineering?"\n\nDatabase results:\n{\'query\': "MATCH (p:Person) WHERE p.department CONTAINS \'engineering\' OR p.department CONTAINS \'Engineering\' RETURN count(p) as count", \'count\': 1, \'results\': [{\'count\': 35}]}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb89506bdd0>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:05:22 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:05:22.152696916Z', 'response': "**Number of People in Engineering:**\n\nThere are **35** individuals currently identified as part of the engineering department. \n\n## Key People to Contact:\nAs an action-oriented assistant, I prioritize leads and key stakeholders within this group for collaboration and task execution. Here's a summary of potential contacts based on the available data:\n\n- **Engineering Team Leads:**\n  - *Name 1*: [Role 1], Department: Engineering, Email: [address]\n  - *Name 2*: [Role 2], Department: Engineering, Email: [address]\n\n  *Note:* These individuals are critical for day-to-day engineering operations and can guide you through specific projects or challenges within the department.\n\n## Next Steps:\n1. Reach out to the identified team leads for initial discussions regarding your project or task related to engineering. \n2. If further insights are needed, consider engaging with more engineering personnel based on your specific requirements, keeping in mind the total count of 35 individuals available for collaboration within this department.", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 6893, 5075, 7024, 328, 33627, 12791, 203, 203, 3954, 3276, 44, 203, 12157, 1217, 950, 313, 15895, 308, 98, 44, 6005, 27, 4998, 298, 32, 18495, 2198, 5794, 14008, 330, 40528, 25, 1878, 298, 32, 18495, 2198, 5794, 14008, 330, 3711, 8637, 25, 18546, 2385, 26, 98, 27, 619, 2385, 392, 330, 998, 950, 225, 35, 30, 330, 4295, 950, 39228, 998, 950, 225, 37, 39, 49108, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 326, 1918, 432, 33126, 328, 26585, 4777, 203, 203, 8309, 884, 1115, 37, 39, 326, 34546, 5927, 18891, 619, 1742, 432, 322, 33627, 23572, 32, 1659, 203, 433, 3891, 33126, 372, 12141, 44, 203, 1465, 600, 2125, 31, 42368, 47330, 30, 439, 41585, 518, 27608, 461, 1202, 38594, 19489, 4797, 458, 2350, 436, 39973, 461, 2899, 6063, 32, 9540, 1182, 312, 8822, 432, 13792, 26910, 4122, 544, 322, 3304, 706, 44, 203, 203, 31, 1115, 3711, 8637, 12641, 39066, 101, 4777, 334, 429, 319, 558, 225, 35, 22174, 428, 4539, 225, 35, 614, 24506, 44, 26585, 30, 10024, 44, 428, 2468, 79, 334, 429, 319, 558, 225, 36, 22174, 428, 4539, 225, 36, 614, 24506, 44, 26585, 30, 10024, 44, 428, 2468, 79, 719, 319, 5217, 20665, 8204, 34546, 884, 18896, 436, 5808, 31, 452, 31, 3368, 33627, 7373, 461, 883, 8630, 844, 3919, 2818, 8528, 556, 35439, 4797, 322, 23572, 32, 203, 203, 433, 10961, 17096, 44, 203, 35, 32, 902, 867, 963, 372, 322, 18891, 6498, 27608, 436, 2815, 40712, 12047, 1370, 2074, 556, 2899, 5886, 372, 33627, 32, 1659, 36, 32, 1670, 9686, 43912, 884, 5349, 30, 6295, 14707, 4879, 623, 1829, 33627, 4916, 8613, 4122, 544, 1370, 2818, 10130, 30, 23337, 328, 12204, 322, 3380, 2385, 432, 225, 37, 39, 34546, 3304, 436, 39973, 4797, 458, 23572, 32], 'total_duration': 5135886210, 'load_duration': 7233401, 'prompt_eval_count': 863, 'prompt_eval_duration': 269996322, 'eval_count': 224, 'eval_duration': 4858223131}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are an AI assistant that analyzes user messages and decides what actions to take. You specialize in helping users complete tasks by finding relevant policies and identifying the right people to involve.\n\nUser message: "List all members of engineering"\n\nAVAILABLE DATABASE CONTEXT:\nThe database contains corporate organizational data with:\n- 500 people across departments: Engineering, Operations, Marketing, DevOps, Product\n- 35 teams including: Core Platform (Engineering), Frontend Web (Engineering), Mobile Apps (Engineering)\n- 15 cross-functional groups including: Security Council (governance), Data Governance Committee (governance), Architecture Review Board (technical)\n- 20 policies and compliance frameworks\n\nFALKORDB SCHEMA:\nNode Types:\n- Person: id, name, email, department, role, hire_date, location, manager_id\n- Team: id, name, department, focus\n- Group: id, name, description, type, lead_department  \n- Policy: id, name, description, category, severity, responsible_type, compliance_frameworks\n- Message: original, pig_latin, timestamp\n\nRelationships:\n- (Person)-[:MEMBER_OF {role, is_lead}]->(Team)\n- (Person)-[:MEMBER_OF {role, joined_date}]->(Group)\n- (Person)-[:REPORTS_TO]->(Person)\n- (Team)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n- (Group)-[:RESPONSIBLE_FOR {responsibility_type, assigned_date}]->(Policy)\n\nBased on this message, decide what actions should be taken. You can recommend one or more of the following tools:\n\n1. "search_database" - Search using pre-built queries (people, teams, groups, policies, messages)\n2. "custom_query" - Generate a custom Cypher query for complex organizational data requests\n3. "pig_latin" - Convert the message to pig latin (DEFAULT - use this for normal conversations)\n4. "store_message" - Store the message in the database\n\nIMPORTANT DECISION LOGIC:\n\nUSE "custom_query" for these patterns:\n\nTASK-ORIENTED QUERIES (PRIORITY):\n- Policy compliance: "I need to implement X", "how do I do Y", "what\'s required for Z", "I\'m working on A"\n- Policy ownership: "who owns X policy", "who\'s responsible for Y", "who should I talk to about Z"\n- Task approvals: "who approves X", "who can sign off on Y", "who leads Z initiative"\n- Compliance questions: "what policies apply to X", "what\'s needed for Y compliance", "requirements for Z"\n- Implementation help: "starting a new project", "need approval for X", "implementing Y feature"\n\nORGANIZATIONAL ANALYSIS:\n- Manager/hierarchy questions: "who is X\'s manager", "who reports to Y", "who does X report to"\n- Team leadership: "who are the team leads", "find team leads in Engineering", "who leads the Sales team"\n- Organizational structure: "who has the most reports", "find managers", "show me the hierarchy"\n- Team membership: "who\'s on the X team", "find members of Y team", "what team is X on"\n- Cross-functional analysis: "who works with X", "find X\'s colleagues", "show me connections"\n- Department analysis: "how many people in Engineering", "count by department", "show department sizes"\n- Multiple people queries: "employees in X", "people in Y department", "staff in Z", "workers in A"\n\nPOLICY & COMPLIANCE DISCOVERY:\n- Policy searches: "find security policies", "data privacy requirements", "development standards"\n- Responsibility mapping: "who handles X", "what team owns Y", "responsible parties for Z"\n- Process guidance: "approval workflow for X", "steps to implement Y", "who to contact for Z"\n\nUSE "search_database" for these patterns:\n- Simple name lookups: "find John Smith", "show me Sarah", "lookup Danny"\n- Basic entity searches when NOT asking for relationships: "show Engineering teams", "list security policies"\n- Simple keyword searches without relationships or filtering\n\nUSE "pig_latin" for:\n- Casual conversation: "hello", "thanks", "how are you"\n- Non-organizational questions\n\nALWAYS include "store_message" to save conversation history\n\nKEY PATTERN RECOGNITION:\n- If the query involves WHO, HOW MANY, WHICH, or relationships between entities, use "custom_query"\n- If the user is asking about implementing, starting, or completing something, use "custom_query" to find relevant policies and owners\n- If the user needs to know "who should I talk to" or "who\'s responsible", use "custom_query"\n\nIMPORTANT: Respond with ONLY a valid JSON object, no other text. The JSON must contain:\n- "reasoning": Your reasoning for the decision (explain if task-oriented and what they need)\n- "tools": Array of tool names to call\n- "response_type": "pig_latin" for pig latin responses, "search" for database search responses, "custom" for custom query responses, or "chat" for other responses\n\nExample responses:\n{\n  "reasoning": "This is a normal chat message, so I should convert it to pig latin as the default behavior.",\n  "tools": ["pig_latin", "store_message"],\n  "response_type": "pig_latin"\n}\n\n{\n  "reasoning": "The user is asking to search for specific entities without needing relationship information.",\n  "tools": ["search_database"],\n  "response_type": "search"\n}\n\n{\n  "reasoning": "The user has a task-oriented query about implementing something and needs to find relevant policies and the right people (team leads, policy owners) to work with.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb8959b3dd0>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:05:34 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:05:34.825065592Z', 'response': '{\n  "reasoning": "The user\'s request involves identifying a group of people (members of engineering department), which requires relationship analysis between \'Person\' and \'Team\'. This falls under the category of Organizational Analysis, specifically Team membership.",\n  "tools": ["custom_query", "store_message"],\n  "response_type": "custom"\n}', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 600, 19551, 47330, 688, 17920, 20573, 1256, 5218, 461, 5973, 12804, 2769, 6885, 372, 4818, 32, 2448, 7456, 518, 328, 37860, 4250, 6153, 8253, 810, 17340, 10088, 20608, 461, 31583, 322, 2091, 7024, 372, 43033, 32, 203, 203, 1240, 1474, 44, 313, 720, 1169, 8999, 432, 33627, 20, 203, 203, 25431, 26235, 2198, 6016, 44, 203, 1318, 3500, 4304, 36713, 332, 12083, 279, 706, 623, 44, 203, 31, 225, 39, 34, 34, 7024, 10160, 26811, 1728, 44, 26585, 30, 27724, 30, 7778, 8842, 30, 40390, 30, 7688, 203, 31, 225, 37, 39, 18920, 6237, 44, 7349, 11325, 308, 3711, 8637, 471, 45049, 3704, 308, 3711, 8637, 471, 16966, 24386, 308, 3711, 8637, 27, 203, 31, 225, 35, 39, 8184, 31, 18651, 8351, 6237, 44, 7337, 45486, 308, 89, 38082, 471, 2398, 570, 38082, 41772, 308, 89, 38082, 471, 29321, 15054, 18666, 308, 40180, 27, 203, 31, 225, 36, 34, 20608, 461, 4953, 29879, 203, 203, 56, 726, 61, 758, 1996, 358, 5180, 1400, 44, 203, 1212, 13400, 44, 203, 31, 11038, 44, 804, 30, 636, 30, 4096, 30, 23572, 30, 4203, 30, 420, 548, 81, 770, 30, 3894, 30, 7884, 81, 314, 203, 31, 12641, 44, 804, 30, 636, 30, 23572, 30, 9280, 203, 31, 7051, 44, 804, 30, 636, 30, 3048, 30, 827, 30, 16190, 81, 18495, 261, 203, 31, 15310, 44, 804, 30, 636, 30, 3048, 30, 6215, 30, 25017, 30, 18392, 81, 681, 30, 4953, 81, 43075, 203, 31, 4578, 44, 4707, 30, 298, 365, 81, 23423, 30, 6341, 203, 203, 30996, 44, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 438, 81, 18637, 111, 6583, 26, 8237, 27, 203, 31, 308, 6005, 7824, 2867, 7239, 81, 2109, 301, 4298, 30, 27033, 81, 770, 111, 6583, 26, 1564, 27, 203, 31, 308, 6005, 7824, 2867, 25252, 69, 81, 1407, 6583, 26, 6005, 27, 203, 31, 308, 8237, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 31, 308, 1564, 7824, 2867, 15812, 567, 2123, 14507, 81, 7321, 301, 43054, 3453, 81, 681, 30, 11012, 81, 770, 111, 6583, 26, 4248, 27, 203, 203, 10332, 544, 458, 1474, 30, 19737, 2769, 6885, 1395, 526, 11508, 32, 2448, 883, 13152, 1591, 556, 1829, 432, 322, 2412, 8684, 44, 478, 35, 32, 313, 1903, 81, 4603, 20, 429, 7422, 1471, 1406, 31, 8282, 11792, 308, 16607, 30, 18920, 30, 8351, 30, 20608, 30, 5218, 27, 203, 36, 32, 313, 2988, 81, 1217, 20, 429, 10945, 312, 3115, 22350, 36149, 2467, 436, 8640, 12083, 279, 706, 5167, 203, 37, 32, 313, 43085, 81, 23423, 20, 429, 8125, 322, 1474, 372, 298, 365, 41954, 308, 5807, 429, 793, 458, 436, 4302, 48223, 27, 203, 38, 32, 313, 2157, 81, 1436, 20, 429, 8809, 322, 1474, 328, 322, 3500, 203, 203, 33862, 24308, 7591, 5776, 1102, 44, 203, 203, 4855, 313, 2988, 81, 1217, 20, 436, 3282, 15103, 44, 203, 203, 15147, 31, 758, 21736, 1345, 21810, 527, 12145, 308, 28185, 711, 203, 31, 15310, 4953, 44, 313, 59, 1849, 372, 2054, 1593, 392, 313, 6893, 745, 439, 745, 1410, 392, 313, 7733, 1182, 2129, 436, 2523, 392, 313, 59, 3464, 4740, 544, 399, 20, 203, 31, 15310, 13668, 44, 313, 19483, 42665, 1593, 7231, 392, 313, 19483, 1182, 18392, 436, 1410, 392, 313, 19483, 1395, 439, 12440, 372, 2625, 2523, 20, 203, 31, 4187, 4264, 9359, 44, 313, 19483, 4264, 4954, 1593, 392, 313, 19483, 883, 2596, 2126, 544, 1410, 392, 313, 19483, 27608, 2523, 26441, 1353, 20, 203, 31, 2252, 4339, 10017, 44, 313, 7733, 20608, 4871, 372, 1593, 392, 313, 7733, 1182, 5349, 436, 1410, 4953, 392, 313, 15965, 436, 2523, 20, 203, 31, 19965, 3049, 44, 313, 19569, 312, 537, 2074, 392, 313, 10898, 27869, 436, 1593, 392, 313, 9165, 299, 1410, 2787, 20, 203, 203, 22581, 927, 27002, 726, 1737, 726, 16928, 1296, 44, 203, 31, 10702, 33, 32754, 10017, 44, 313, 19483, 438, 1593, 1182, 7884, 392, 313, 19483, 14201, 372, 1410, 392, 313, 19483, 1957, 1593, 3639, 372, 20, 203, 31, 12641, 999, 47482, 44, 313, 19483, 884, 322, 6498, 27608, 392, 313, 1809, 6498, 27608, 328, 26585, 392, 313, 19483, 27608, 322, 25573, 6498, 20, 203, 31, 24274, 279, 5193, 44, 313, 19483, 1401, 322, 4630, 14201, 392, 313, 1809, 39143, 392, 313, 2245, 597, 322, 21291, 20, 203, 31, 12641, 26050, 44, 313, 19483, 1182, 544, 322, 1593, 6498, 392, 313, 1809, 8999, 432, 1410, 6498, 392, 313, 7733, 6498, 438, 1593, 544, 20, 203, 31, 19178, 31, 18651, 9209, 44, 313, 19483, 4847, 623, 1593, 392, 313, 1809, 1593, 1182, 932, 274, 481, 1032, 392, 313, 2245, 597, 12215, 20, 203, 31, 24506, 9209, 44, 313, 6893, 5075, 7024, 328, 26585, 392, 313, 998, 810, 23572, 392, 313, 2245, 23572, 12998, 20, 203, 31, 21138, 7024, 11792, 44, 313, 34128, 328, 1593, 392, 313, 16607, 328, 1410, 23572, 392, 313, 15989, 328, 2523, 392, 313, 17733, 328, 399, 20, 203, 203, 27571, 549, 14199, 1798, 6307, 10363, 47751, 44, 203, 31, 15310, 33243, 44, 313, 1809, 7663, 20608, 392, 313, 605, 27919, 10130, 392, 313, 12196, 29787, 20, 203, 31, 20989, 2612, 3453, 7996, 44, 313, 19483, 13650, 1593, 392, 313, 7733, 6498, 42665, 1410, 392, 313, 43054, 1478, 35443, 436, 2523, 20, 203, 31, 6833, 34467, 44, 313, 27485, 10153, 436, 1593, 392, 313, 7439, 372, 2054, 1410, 392, 313, 19483, 372, 7260, 436, 2523, 20, 203, 203, 4855, 313, 1903, 81, 4603, 20, 436, 3282, 15103, 44, 203, 31, 7155, 636, 2779, 9016, 44, 313, 1809, 21566, 35142, 392, 313, 2245, 597, 48804, 2371, 392, 313, 10122, 475, 26638, 20, 203, 31, 9261, 4422, 33243, 1412, 2370, 24240, 436, 25041, 44, 313, 2245, 26585, 18920, 392, 313, 668, 7663, 20608, 20, 203, 31, 7155, 11659, 33243, 2876, 25041, 556, 17495, 203, 203, 4855, 313, 43085, 81, 23423, 20, 436, 44, 203, 31, 24410, 1029, 19509, 44, 313, 7656, 392, 313, 29376, 392, 313, 6893, 884, 844, 20, 203, 31, 12495, 31, 12708, 279, 10017, 203, 203, 30007, 2305, 313, 2157, 81, 1436, 20, 372, 4131, 19509, 8142, 203, 203, 3307, 447, 18939, 3042, 1197, 11785, 3942, 44, 203, 31, 1670, 322, 2467, 37383, 624, 2253, 30, 11551, 73, 488, 15205, 30, 8741, 43656, 30, 556, 25041, 3733, 11740, 30, 793, 313, 2988, 81, 1217, 20, 203, 31, 1670, 322, 1256, 438, 24240, 2625, 19359, 30, 8049, 30, 556, 9631, 299, 4660, 30, 793, 313, 2988, 81, 1217, 20, 372, 2290, 10088, 20608, 461, 34027, 203, 31, 1670, 322, 1256, 5652, 372, 3702, 313, 19483, 1395, 439, 12440, 372, 20, 556, 313, 19483, 1182, 18392, 392, 793, 313, 2988, 81, 1217, 20, 203, 203, 33862, 44, 43728, 623, 28222, 312, 2080, 3398, 1300, 30, 1289, 1604, 1344, 32, 886, 3398, 2298, 4799, 44, 203, 31, 313, 10354, 299, 563, 10604, 5966, 299, 436, 322, 17200, 308, 35542, 415, 2899, 31, 42368, 461, 2769, 2953, 1849, 27, 203, 31, 313, 4280, 563, 2629, 432, 4559, 4467, 372, 1476, 203, 31, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 436, 298, 365, 41954, 14812, 30, 313, 1903, 20, 436, 3500, 3233, 14812, 30, 313, 2988, 20, 436, 3115, 2467, 14812, 30, 556, 313, 6172, 20, 436, 1604, 14812, 203, 203, 5297, 14812, 44, 203, 109, 334, 313, 10354, 299, 563, 313, 2272, 438, 312, 4302, 11210, 1474, 30, 1259, 439, 1395, 4483, 561, 372, 298, 365, 41954, 619, 322, 1244, 5853, 4414, 334, 313, 4280, 563, 3037, 43085, 81, 23423, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 43085, 81, 23423, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 438, 24240, 372, 3233, 436, 2818, 11740, 2876, 41905, 12112, 2471, 4414, 334, 313, 4280, 563, 3037, 1903, 81, 4603, 3439, 334, 313, 1986, 81, 681, 563, 313, 1903, 20, 203, 111, 203, 203, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1401, 312, 2899, 31, 42368, 2467, 2625, 19359, 4660, 461, 5652, 372, 2290, 10088, 20608, 461, 322, 2091, 7024, 308, 5883, 27608, 30, 7231, 34027, 27, 372, 1389, 623, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111, 0, 203, 49152, 17594, 49153, 109, 334, 313, 10354, 299, 563, 313, 1318, 1256, 1182, 1326, 37383, 31583, 312, 2350, 432, 7024, 308, 7910, 432, 33627, 23572, 471, 1510, 7171, 12112, 9209, 3733, 330, 6005, 25, 461, 330, 8237, 2473, 1348, 39394, 1531, 322, 6215, 432, 24274, 279, 17422, 30, 21473, 12641, 26050, 4414, 334, 313, 4280, 563, 3037, 2988, 81, 1217, 392, 313, 2157, 81, 1436, 3439, 334, 313, 1986, 81, 681, 563, 313, 2988, 20, 203, 111], 'total_duration': 2444164856, 'load_duration': 8354265, 'prompt_eval_count': 1429, 'prompt_eval_duration': 692979333, 'eval_count': 75, 'eval_duration': 1742411733}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | INFO:query_patterns:Matched pattern 'find_by_role' for query: List all members of engineering
api-1  | INFO:root:Using pre-compiled pattern for query: List all members of engineering
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a FalkorDB Cypher query generator. The previous query returned no results, so you need to generate a broader, more flexible query.\n\nOriginal user request: "List all members of engineering"\nPrevious query that returned no results: MATCH (p:Person) WHERE p.role CONTAINS \'members of engineering\' OR p.role CONTAINS \'Members Of Engineering\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25\n\nANALYSIS: The previous query was too specific. Generate a broader query using these strategies:\n\nFALLBACK STRATEGIES:\n1. **Expand search terms**: Use partial matching instead of exact matching\n2. **Remove constraints**: Drop overly specific WHERE conditions\n3. **Use broader categories**: If searching for specific roles/departments, try parent categories\n4. **Alternative approaches**: Try different relationship patterns or node types\n5. **Fuzzy matching**: Use more flexible text matching with shorter keywords\n\nCOMMON ADJUSTMENTS:\n- Change exact matches (=) to partial matches (CONTAINS)\n- Remove overly specific department/role filters\n- Try searching across all entity types (Person, Team, Group, Policy)\n- Use shorter, more general keywords\n- Remove time-based or status-based constraints\n- Try alternative relationship paths\n\nFALLBACK PATTERNS:\n- If searching for specific people failed, try finding teams/groups in that area\n- If policy search failed, try finding people who might know about the topic\n- If department search failed, try role-based search\n- If role search failed, try department-based search\n- If no entities found, try broader organizational queries\n\nEXAMPLE TRANSFORMATIONS:\n- "Software Engineer" → "Engineer" or "Software" or "Development"\n- "Human Resources Manager" → "Human" or "HR" or "Manager" or "People"\n- Specific policy names → policy categories or keywords\n- Exact department matches → partial department matching\n\nGenerate a single, broader Cypher query that has a higher chance of returning relevant results. Return ONLY the Cypher query without explanation.\n\nIMPORTANT: Make the query significantly broader than the previous one while still being relevant to the user\'s request.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb895083310>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:05:36 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:05:36.420646887Z', 'response': "MATCH (p:Person) WHERE ANY(x IN p.roles WHERE x CONTAINS 'engineer') OR p.department CONTAINS 'engineering' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25", 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 506, 3724, 271, 1996, 22350, 36149, 2467, 9750, 32, 886, 4552, 2467, 4717, 1289, 3276, 30, 1259, 844, 1849, 372, 4450, 312, 8035, 820, 30, 1829, 28188, 2467, 32, 203, 203, 11296, 1256, 1326, 44, 313, 720, 1169, 8999, 432, 33627, 20, 203, 11698, 2467, 688, 4717, 1289, 3276, 44, 31054, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 7910, 432, 33627, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 9653, 16035, 26585, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 203, 203, 39861, 16928, 1296, 44, 886, 4552, 2467, 1597, 5133, 2818, 32, 10945, 312, 8035, 820, 2467, 1471, 3282, 35678, 44, 203, 203, 45125, 8803, 9314, 17847, 12145, 44, 203, 35, 32, 1115, 12255, 3233, 5955, 4914, 4417, 7360, 9215, 4174, 432, 7153, 9215, 203, 36, 32, 1115, 4913, 13383, 4914, 14105, 2288, 631, 2818, 4998, 5479, 203, 37, 32, 1115, 4391, 8035, 820, 12770, 4914, 1670, 20286, 436, 2818, 13479, 33, 20811, 1728, 30, 1596, 2935, 12770, 203, 38, 32, 1115, 34111, 31913, 4914, 8959, 3449, 12112, 15103, 556, 1541, 3738, 203, 39, 32, 1115, 56, 25274, 9215, 4914, 4417, 1829, 28188, 1344, 9215, 623, 35759, 16400, 203, 203, 22116, 6988, 35942, 32477, 44, 203, 31, 5614, 7153, 8001, 20545, 27, 372, 7360, 8001, 308, 20595, 69, 27, 203, 31, 6478, 2288, 631, 2818, 23572, 33, 4298, 10582, 203, 31, 8959, 20286, 10160, 1169, 4422, 3738, 308, 6005, 30, 12641, 30, 7051, 30, 15310, 27, 203, 31, 4417, 35759, 30, 1829, 8074, 16400, 203, 31, 6478, 1133, 31, 7873, 556, 2287, 31, 7873, 13383, 203, 31, 8959, 15529, 12112, 7842, 203, 203, 45125, 8803, 447, 15835, 3020, 44, 203, 31, 1670, 20286, 436, 2818, 7024, 3803, 30, 1596, 17340, 18920, 33, 6332, 328, 688, 5951, 203, 31, 1670, 7231, 3233, 3803, 30, 1596, 17340, 7024, 6560, 4796, 3702, 2625, 322, 8456, 203, 31, 1670, 23572, 3233, 3803, 30, 1596, 4203, 31, 7873, 3233, 203, 31, 1670, 4203, 3233, 3803, 30, 1596, 23572, 31, 7873, 3233, 203, 31, 1670, 1289, 11740, 2431, 30, 1596, 8035, 820, 12083, 279, 11792, 203, 203, 33968, 43128, 5060, 19419, 44, 203, 31, 313, 9902, 44436, 20, 14567, 313, 3711, 265, 20, 556, 313, 9902, 20, 556, 313, 20235, 20, 203, 31, 313, 21390, 17697, 10702, 20, 14567, 313, 21390, 20, 556, 313, 5137, 20, 556, 313, 1572, 20, 556, 313, 24853, 20, 203, 31, 25081, 7231, 4467, 14567, 7231, 12770, 556, 16400, 203, 31, 37634, 23572, 8001, 14567, 7360, 23572, 9215, 203, 203, 10505, 312, 3982, 30, 8035, 820, 22350, 36149, 2467, 688, 1401, 312, 12224, 16554, 432, 14116, 10088, 3276, 32, 2744, 28222, 322, 22350, 36149, 2467, 2876, 18799, 32, 203, 203, 33862, 44, 6400, 322, 2467, 32323, 8035, 820, 2784, 322, 4552, 1591, 2218, 4204, 3998, 10088, 372, 322, 1256, 1182, 1326, 32, 0, 203, 49152, 17594, 49153, 15895, 308, 98, 44, 6005, 27, 4998, 2964, 26, 106, 1236, 298, 32, 9715, 4998, 816, 2198, 5794, 14008, 330, 3483, 265, 683, 1878, 298, 32, 18495, 2198, 5794, 14008, 330, 40528, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39], 'total_duration': 1576453005, 'load_duration': 7415112, 'prompt_eval_count': 539, 'prompt_eval_duration': 90919517, 'eval_count': 65, 'eval_duration': 1477654375}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
api-1  | DEBUG:root:Sending request to Ollama: {'model': 'granite3.3:8b-largectx', 'prompt': 'You are a helpful assistant that formats database query results for task-oriented users who need to complete work and find the right people to collaborate with.\n\nUser\'s original request: "List all members of engineering"\n\nDatabase results:\n{\'query\': "MATCH (p:Person) WHERE p.role CONTAINS \'members of engineering\' OR p.role CONTAINS \'Members Of Engineering\' RETURN p.id, p.name, p.email, p.department, p.role, labels(p) as labels LIMIT 25", \'count\': 0, \'results\': []}\n\nPlease format these results in a clear, actionable way that helps the user complete their task using **valid Markdown formatting**.\n\nGuidelines:\n- Present the information in a natural, conversational tone focused on enabling action\n- Use Markdown syntax for formatting:\n  - **Bold text** for emphasis and key contacts/policies\n  - `Code blocks` for names, roles, or technical terms when appropriate\n  - ## Headers for sections when organizing information\n  - * Bullet points for lists\n  - | Tables | when showing structured data\n  - > Blockquotes for important insights or next steps\n\nTASK-ORIENTED FORMATTING PRIORITIES:\n\n**For Policy & Compliance Results:**\n- **Highlight critical/high severity policies first**\n- Show policy names, categories, and key requirements\n- **Emphasize who owns each policy** (teams/groups responsible)\n- Include contact information for policy owners when available\n- Suggest next steps for compliance or implementation\n\n**For People/Contact Results:**\n- **Prioritize leads, managers, and decision-makers**\n- Always show: name, role, email, department\n- **Bold the names of team leads and key stakeholders**\n- Group people by their relevance to the task (e.g., "Policy Owners", "Team Leads", "Approvers")\n- Include team/group affiliations to show expertise areas\n\n**For Task Implementation:**\n- Structure results as actionable guidance\n- Use section headers like:\n  - "## Key People to Contact"\n  - "## Relevant Policies to Review" \n  - "## Next Steps"\n- **Bold the most important contacts** to reach out to first\n- Explain why each person/policy is relevant to their task\n\n**Response Structure:**\n1. Start with a direct answer to their question\n2. Show the most critical/high-priority items first\n3. Group related information together\n4. End with suggested next steps or additional considerations\n\n**Key Features:**\n- Highlight key insights, patterns, or relationships in the data\n- If there are many results, summarize the most important ones and provide key statistics\n- **If there are no results, be direct and honest - simply state "No policies were found" or "No matching results" without making up information**\n- For organizational data, emphasize **who can help** and **who has authority**\n- Make the response helpful, actionable, and easy to understand\n- Include counts/totals when relevant (e.g., "Found **3 critical policies** and **5 key contacts**")\n\n**NO RESULTS HANDLING:**\n- If no policies are found, respond with: "No policies were found matching your request."\n- If no people are found, respond with: "No people were found matching your criteria."\n- If no teams/groups are found, respond with: "No teams or groups were found for this area."\n- DO NOT suggest alternative searches or provide generic advice unless there are actual results\n- DO NOT invent or hallucinate information when no results exist\n- Keep no-results responses brief and factual\n\nIMPORTANT: Use proper Markdown formatting throughout your response. Focus on enabling the user to take action and complete their task efficiently. When there are no results, be honest and direct rather than filling space with potentially incorrect information.', 'stream': False}
api-1  | DEBUG:httpcore.connection:connect_tcp.started host='ollama' port=11434 local_address=None timeout=60 socket_options=None
api-1  | DEBUG:httpcore.connection:connect_tcp.complete return_value=<httpcore._backends.anyio.AnyIOStream object at 0x7fb8950720d0>
api-1  | DEBUG:httpcore.http11:send_request_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_headers.complete
api-1  | DEBUG:httpcore.http11:send_request_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:send_request_body.complete
api-1  | DEBUG:httpcore.http11:receive_response_headers.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_headers.complete return_value=(b'HTTP/1.1', 200, b'OK', [(b'Content-Type', b'application/json; charset=utf-8'), (b'Date', b'Thu, 19 Jun 2025 05:05:40 GMT'), (b'Transfer-Encoding', b'chunked')])
api-1  | INFO:httpx:HTTP Request: POST http://ollama:11434/api/generate "HTTP/1.1 200 OK"
api-1  | DEBUG:httpcore.http11:receive_response_body.started request=<Request [b'POST']>
api-1  | DEBUG:httpcore.http11:receive_response_body.complete
api-1  | DEBUG:httpcore.http11:response_closed.started
api-1  | DEBUG:httpcore.http11:response_closed.complete
api-1  | DEBUG:root:Received response from Ollama: {'model': 'granite3.3:8b-largectx', 'created_at': '2025-06-19T05:05:40.290918057Z', 'response': 'No members were found matching the criteria for "engineering". \n\n## Key Takeaways\n- There are currently **no records** of individuals who identify as part of the engineering department based on your request.\n\n## Next Steps\n- Double-check the spelling or phrasing of your search term to ensure accuracy.\n- Verify if there might be a different department name used in the database (e.g., "Engineering Team," "Engineering Division"). \n- If you\'re certain about the term but still encounter issues, consider reaching out to an administrator for assistance with data entry or search function clarification. \n\nRemember, your query aims to list all members of engineering; without matching records, immediate action may revolve around refining your search parameters.', 'done': True, 'done_reason': 'stop', 'context': [49152, 2946, 49153, 39558, 390, 17071, 2821, 44, 30468, 225, 36, 34, 36, 38, 32, 203, 4282, 884, 8080, 278, 659, 30, 18909, 810, 25697, 32, 2448, 884, 312, 17247, 19551, 47330, 32, 0, 203, 49152, 496, 49153, 4282, 884, 312, 17247, 47330, 688, 15477, 3500, 2467, 3276, 436, 2899, 31, 42368, 4250, 6560, 1849, 372, 6153, 1389, 461, 2290, 322, 2091, 7024, 372, 21368, 332, 623, 32, 203, 203, 1240, 1182, 4707, 1326, 44, 313, 720, 1169, 8999, 432, 33627, 20, 203, 203, 3954, 3276, 44, 203, 12157, 1217, 950, 313, 15895, 308, 98, 44, 6005, 27, 4998, 298, 32, 4298, 2198, 5794, 14008, 330, 7910, 432, 33627, 25, 1878, 298, 32, 4298, 2198, 5794, 14008, 330, 9653, 16035, 26585, 25, 18546, 298, 32, 314, 30, 298, 32, 426, 30, 298, 32, 1935, 30, 298, 32, 18495, 30, 298, 32, 4298, 30, 6492, 26, 98, 27, 619, 6492, 7445, 225, 36, 39, 392, 330, 998, 950, 225, 34, 30, 330, 4295, 950, 1605, 111, 203, 203, 6574, 2179, 3282, 3276, 328, 312, 4233, 30, 2125, 444, 3352, 688, 15761, 322, 1256, 6153, 3623, 2899, 1471, 1115, 1327, 21047, 17948, 6192, 203, 203, 15757, 4446, 44, 203, 31, 26823, 322, 2471, 328, 312, 19844, 30, 457, 5232, 5144, 46023, 20975, 544, 29300, 2125, 203, 31, 4417, 21047, 8345, 436, 17948, 44, 334, 429, 1115, 16835, 1344, 326, 436, 12480, 22557, 461, 1202, 26910, 33, 16669, 334, 429, 529, 1227, 9058, 82, 436, 4467, 30, 13479, 30, 556, 22131, 5955, 1412, 9136, 334, 429, 5286, 19344, 436, 15521, 1412, 10558, 6183, 2471, 334, 429, 319, 44928, 4981, 436, 10375, 334, 429, 523, 43960, 523, 1412, 14838, 28546, 706, 334, 429, 848, 6575, 25072, 436, 8913, 43912, 556, 2354, 6655, 203, 203, 15147, 31, 758, 21736, 1345, 22900, 12734, 1392, 2773, 38416, 33026, 44, 203, 203, 326, 1562, 15310, 549, 2252, 4339, 19677, 4777, 203, 31, 1115, 13360, 18896, 33, 4363, 25017, 20608, 1932, 326, 203, 31, 7914, 7231, 4467, 30, 12770, 30, 461, 1202, 10130, 203, 31, 1115, 16794, 2040, 518, 6560, 42665, 2504, 7231, 326, 308, 16916, 33, 6332, 18392, 27, 203, 31, 12432, 7260, 2471, 436, 7231, 34027, 1412, 3304, 203, 31, 28192, 2354, 6655, 436, 4953, 556, 4736, 203, 203, 326, 1562, 33126, 33, 5870, 19677, 4777, 203, 31, 1115, 27086, 283, 518, 27608, 30, 39143, 30, 461, 17200, 31, 12620, 483, 326, 203, 31, 25144, 2519, 44, 636, 30, 4203, 30, 4096, 30, 23572, 203, 31, 1115, 16835, 322, 4467, 432, 6498, 27608, 461, 1202, 38594, 19489, 326, 203, 31, 7051, 7024, 810, 3623, 316, 40289, 372, 322, 2899, 308, 87, 32, 89, 4317, 313, 4248, 29912, 483, 392, 313, 8237, 39066, 101, 392, 313, 10083, 5232, 657, 203, 31, 12432, 6498, 33, 1363, 19964, 993, 372, 2519, 30895, 1125, 19492, 203, 203, 326, 1562, 4187, 19965, 4777, 203, 31, 19247, 3276, 619, 2125, 444, 34467, 203, 31, 4417, 4169, 4826, 2124, 44, 334, 429, 313, 433, 3891, 33126, 372, 12141, 20, 334, 429, 313, 433, 902, 8577, 447, 9327, 372, 15054, 20, 5235, 429, 313, 433, 10961, 17096, 20, 203, 31, 1115, 16835, 322, 4630, 8913, 26910, 326, 372, 15669, 963, 372, 1932, 203, 31, 1283, 7355, 6916, 2504, 4916, 33, 6038, 438, 10088, 372, 3623, 2899, 203, 203, 326, 1397, 19247, 4777, 203, 35, 32, 4793, 623, 312, 3872, 7592, 372, 3623, 7000, 203, 36, 32, 7914, 322, 4630, 18896, 33, 4363, 31, 9786, 3946, 1932, 203, 37, 32, 7051, 5886, 2471, 10752, 203, 38, 32, 4720, 623, 20051, 2354, 6655, 556, 5388, 6295, 993, 203, 203, 326, 953, 16999, 4777, 203, 31, 44025, 1202, 43912, 30, 15103, 30, 556, 25041, 328, 322, 706, 203, 31, 1670, 2017, 884, 5075, 3276, 30, 46053, 322, 4630, 8913, 11668, 461, 2355, 1202, 14564, 203, 31, 1115, 2797, 2017, 884, 1289, 3276, 30, 526, 3872, 461, 41211, 429, 9639, 1603, 313, 2023, 20608, 4528, 2431, 20, 556, 313, 2023, 9215, 3276, 20, 2876, 9018, 973, 2471, 326, 203, 31, 2616, 12083, 279, 706, 30, 12480, 2040, 518, 1115, 19483, 883, 3049, 326, 461, 1115, 19483, 1401, 27756, 326, 203, 31, 6400, 322, 1789, 17247, 30, 2125, 444, 30, 461, 8792, 372, 7648, 203, 31, 12432, 15172, 33, 41284, 1412, 10088, 308, 87, 32, 89, 4317, 313, 3595, 1115, 37, 18896, 20608, 326, 461, 1115, 39, 1202, 26910, 326, 657, 203, 203, 326, 2576, 20336, 69, 25999, 31332, 4777, 203, 31, 1670, 1289, 20608, 884, 2431, 30, 16533, 623, 44, 313, 2023, 20608, 4528, 2431, 9215, 1370, 1326, 3107, 203, 31, 1670, 1289, 7024, 884, 2431, 30, 16533, 623, 44, 313, 2023, 7024, 4528, 2431, 9215, 1370, 15261, 3107, 203, 31, 1670, 1289, 18920, 33, 6332, 884, 2431, 30, 16533, 623, 44, 313, 2023, 18920, 556, 8351, 4528, 2431, 436, 458, 5951, 3107, 203, 31, 4085, 2370, 6919, 15529, 33243, 556, 2355, 10140, 29327, 7351, 2017, 884, 4648, 3276, 203, 31, 4085, 2370, 37350, 556, 48965, 1008, 3043, 2471, 1412, 1289, 3276, 2307, 203, 31, 19114, 1289, 31, 4295, 14812, 25585, 461, 296, 7975, 203, 203, 33862, 44, 4417, 7240, 21047, 17948, 28025, 1370, 1789, 32, 33062, 544, 29300, 322, 1256, 372, 4818, 2125, 461, 6153, 3623, 2899, 42990, 32, 5076, 2017, 884, 1289, 3276, 30, 526, 41211, 461, 3872, 9283, 2784, 39277, 5122, 623, 22035, 12479, 2471, 32, 0, 203, 49152, 17594, 49153, 2023, 8999, 4528, 2431, 9215, 322, 15261, 436, 313, 40528, 2296, 1659, 203, 433, 3891, 21740, 812, 1951, 203, 31, 5802, 884, 5927, 1115, 1347, 9212, 326, 432, 34546, 6560, 12411, 619, 1742, 432, 322, 33627, 23572, 4122, 544, 1370, 1326, 32, 203, 203, 433, 10961, 17096, 203, 31, 6934, 31, 1553, 322, 15037, 299, 556, 2674, 100, 9949, 432, 1370, 3233, 5615, 372, 7279, 14222, 32, 203, 31, 12072, 415, 2017, 4796, 526, 312, 3449, 23572, 636, 1654, 328, 322, 3500, 308, 87, 32, 89, 4317, 313, 3711, 8637, 12641, 2360, 313, 3711, 8637, 17536, 3386, 1895, 225, 203, 31, 1670, 844, 4484, 9437, 2625, 322, 5615, 1273, 4204, 11709, 5654, 30, 6295, 316, 9469, 963, 372, 600, 25504, 436, 47221, 623, 706, 3414, 556, 3233, 667, 24272, 1865, 32, 1659, 203, 38577, 30, 1370, 2467, 43784, 372, 1149, 1169, 8999, 432, 33627, 45, 2876, 9215, 9212, 30, 11068, 2125, 1631, 14093, 2921, 6835, 2488, 19068, 1370, 3233, 3377, 32], 'total_duration': 3852131194, 'load_duration': 7251196, 'prompt_eval_count': 885, 'prompt_eval_duration': 276323079, 'eval_count': 162, 'eval_duration': 3567696347}
api-1  | DEBUG:httpcore.connection:close.started
api-1  | DEBUG:httpcore.connection:close.complete
